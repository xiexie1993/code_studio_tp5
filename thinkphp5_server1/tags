!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $A   = mt_rand(1, $this->imageH \/ 2); \/\/ 振幅$/;"	v
A	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $A = mt_rand(1, $this->imageH \/ 2); \/\/ 振幅$/;"	v
APP_PATH	.\public\index.php	/^define('APP_PATH', __DIR__ . '\/..\/application\/');$/;"	d
APP_PATH	.\thinkphp\base.php	/^defined('APP_PATH') or define('APP_PATH', dirname($_SERVER['SCRIPT_FILENAME']) . DS);$/;"	d
AbstractMigration	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^abstract class AbstractMigration implements MigrationInterface$/;"	c
AbstractSeed	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^abstract class AbstractSeed implements SeedInterface$/;"	c
AbstractTemplateCreation	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^abstract class AbstractTemplateCreation implements CreationInterface$/;"	c
AdapterFactory	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^class AdapterFactory$/;"	c
AdapterInterface	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^interface AdapterInterface$/;"	i
AdapterWrapper	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^abstract class AdapterWrapper implements AdapterInterface, WrapperInterface$/;"	c
App	.\thinkphp\library\think\App.php	/^class App$/;"	c
Argument	.\thinkphp\library\think\console\input\Argument.php	/^class Argument$/;"	c
Arr	.\vendor\topthink\think-helper\src\Arr.php	/^class Arr$/;"	c
Ask	.\thinkphp\library\think\console\output\Ask.php	/^class Ask$/;"	c
Autoload	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^class Autoload extends Command$/;"	c
BUF	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $BUF = [];$/;"	v
Bcrypt	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^class Bcrypt$/;"	c
BeforeValidException	.\extend\php-jwt-master\src\BeforeValidException.php	/^class BeforeValidException extends \\UnexpectedValueException$/;"	c
BeforeValidException	.\vendor\firebase\php-jwt\src\BeforeValidException.php	/^class BeforeValidException extends \\UnexpectedValueException$/;"	c
BelongsTo	.\thinkphp\library\think\model\relation\BelongsTo.php	/^class BelongsTo extends OneToOne$/;"	c
BelongsToMany	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^class BelongsToMany extends Relation$/;"	c
BindParamException	.\thinkphp\library\think\db\exception\BindParamException.php	/^class BindParamException extends DbException$/;"	c
Bootstrap	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^class Bootstrap extends Paginator$/;"	c
Breakpoint	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^class Breakpoint extends Migrate$/;"	c
Buffer	.\thinkphp\library\think\console\output\driver\Buffer.php	/^class Buffer$/;"	c
Build	.\thinkphp\library\think\Build.php	/^class Build$/;"	c
Build	.\thinkphp\library\think\console\command\Build.php	/^class Build extends Command$/;"	c
Builder	.\thinkphp\library\think\db\Builder.php	/^abstract class Builder$/;"	c
Builder	.\thinkphp\library\think\process\Builder.php	/^class Builder$/;"	c
Builder	.\vendor\topthink\think-mongo\src\Builder.php	/^class Builder$/;"	c
CACHE_PATH	.\thinkphp\base.php	/^defined('CACHE_PATH') or define('CACHE_PATH', RUNTIME_PATH . 'cache' . DS);$/;"	d
COL	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $this->COL = ($GIF_red > -1 && $GIF_grn > -1 && $GIF_blu > -1) ?$/;"	v
COL	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $COL = -1;$/;"	v
CONF_EXT	.\thinkphp\base.php	/^defined('CONF_EXT') or define('CONF_EXT', EXT); \/\/ 配置文件后缀$/;"	d
CONF_PATH	.\thinkphp\base.php	/^defined('CONF_PATH') or define('CONF_PATH', APP_PATH); \/\/ 配置文件目录$/;"	d
CORE_PATH	.\thinkphp\base.php	/^define('CORE_PATH', LIB_PATH . 'think' . DS);$/;"	d
Cache	.\thinkphp\library\think\Cache.php	/^class Cache$/;"	c
CallQueuedHandler	.\vendor\topthink\think-queue\src\queue\CallQueuedHandler.php	/^class CallQueuedHandler$/;"	c
Captcha	.\vendor\topthink\think-captcha\src\Captcha.php	/^class Captcha$/;"	c
CaptchaController	.\vendor\topthink\think-captcha\src\CaptchaController.php	/^class CaptchaController$/;"	c
Choice	.\thinkphp\library\think\console\output\question\Choice.php	/^class Choice extends Question$/;"	c
ClassLoader	.\vendor\composer\ClassLoader.php	/^class ClassLoader$/;"	c
ClassNotFoundException	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^class ClassNotFoundException extends \\RuntimeException$/;"	c
Clear	.\thinkphp\library\think\console\command\Clear.php	/^class Clear extends Command$/;"	c
Collection	.\thinkphp\library\think\Collection.php	/^class Collection implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable$/;"	c
Collection	.\thinkphp\library\think\model\Collection.php	/^class Collection extends BaseCollection$/;"	c
Column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^class Column$/;"	c
Column	.\vendor\topthink\think-migration\src\db\Column.php	/^class Column extends \\Phinx\\Db\\Table\\Column$/;"	c
Command	.\thinkphp\library\think\console\Command.php	/^class Command$/;"	c
Command	.\vendor\topthink\think-migration\src\Command.php	/^abstract class Command extends \\think\\console\\Command$/;"	c
ComposerAutoloaderInit34a41e2841af1a67f3ddef099fc7b348	.\vendor\composer\autoload_real.php	/^class ComposerAutoloaderInit34a41e2841af1a67f3ddef099fc7b348$/;"	c
ComposerStaticInit34a41e2841af1a67f3ddef099fc7b348	.\vendor\composer\autoload_static.php	/^class ComposerStaticInit34a41e2841af1a67f3ddef099fc7b348$/;"	c
Config	.\thinkphp\library\think\Config.php	/^class Config$/;"	c
Config	.\thinkphp\library\think\console\command\optimize\Config.php	/^class Config extends Command$/;"	c
Confirmation	.\thinkphp\library\think\console\output\question\Confirmation.php	/^class Confirmation extends Question$/;"	c
Connection	.\thinkphp\library\think\db\Connection.php	/^abstract class Connection$/;"	c
Connection	.\vendor\topthink\think-mongo\src\Connection.php	/^class Connection$/;"	c
Connector	.\vendor\topthink\think-queue\src\queue\Connector.php	/^abstract class Connector$/;"	c
Console	.\thinkphp\library\think\Console.php	/^class Console$/;"	c
Console	.\thinkphp\library\think\console\output\descriptor\Console.php	/^class Console$/;"	c
Console	.\thinkphp\library\think\console\output\driver\Console.php	/^class Console$/;"	c
Console	.\thinkphp\library\think\debug\Console.php	/^class Console$/;"	c
Controller	.\thinkphp\library\think\Controller.php	/^class Controller$/;"	c
Controller	.\thinkphp\library\think\console\command\make\Controller.php	/^class Controller extends Make$/;"	c
Cookie	.\thinkphp\library\think\Cookie.php	/^class Cookie$/;"	c
Create	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^class Create extends Migrate$/;"	c
Create	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^class Create extends Seed$/;"	c
CreationInterface	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^interface CreationInterface$/;"	i
CropTest	.\vendor\topthink\think-image\tests\CropTest.php	/^class CropTest extends TestCase$/;"	c
Cx	.\thinkphp\library\think\template\taglib\Cx.php	/^class Cx extends Taglib$/;"	c
DIS	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $this->DIS = ($GIF_dis > -1) ? (($GIF_dis < 3) ? $GIF_dis : 3) : 2;$/;"	v
DIS	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $DIS = 2;$/;"	v
DS	.\thinkphp\base.php	/^define('DS', DIRECTORY_SEPARATOR);$/;"	d
DataNotFoundException	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^class DataNotFoundException extends DbException$/;"	c
Database	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^class Database extends Connector$/;"	c
Database	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^class Database extends Job$/;"	c
Db	.\thinkphp\library\think\Db.php	/^class Db$/;"	c
DbException	.\thinkphp\library\think\exception\DbException.php	/^class DbException extends Exception$/;"	c
Debug	.\thinkphp\library\think\Debug.php	/^class Debug$/;"	c
Decoder	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^class Decoder$/;"	c
Definition	.\thinkphp\library\think\console\input\Definition.php	/^class Definition$/;"	c
Descriptor	.\thinkphp\library\think\console\output\Descriptor.php	/^class Descriptor$/;"	c
Driver	.\thinkphp\library\think\cache\Driver.php	/^abstract class Driver$/;"	c
ENV_PREFIX	.\thinkphp\base.php	/^defined('ENV_PREFIX') or define('ENV_PREFIX', 'PHP_'); \/\/ 环境变量的配置前缀$/;"	d
ERR	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $ERR = [$/;"	v
EXT	.\thinkphp\base.php	/^define('EXT', '.php');$/;"	d
EXTEND_PATH	.\thinkphp\base.php	/^defined('EXTEND_PATH') or define('EXTEND_PATH', ROOT_PATH . 'extend' . DS);$/;"	d
Encoder	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^class Encoder$/;"	c
Env	.\thinkphp\library\think\Env.php	/^class Env$/;"	c
Error	.\thinkphp\library\think\Error.php	/^class Error$/;"	c
ErrorException	.\thinkphp\library\think\exception\ErrorException.php	/^class ErrorException extends Exception$/;"	c
Exception	.\thinkphp\library\think\Exception.php	/^class Exception extends \\Exception$/;"	c
Exception	.\vendor\topthink\think-image\src\image\Exception.php	/^class Exception extends \\RuntimeException$/;"	c
ExpiredException	.\extend\php-jwt-master\src\ExpiredException.php	/^class ExpiredException extends \\UnexpectedValueException$/;"	c
ExpiredException	.\vendor\firebase\php-jwt\src\ExpiredException.php	/^class ExpiredException extends \\UnexpectedValueException$/;"	c
Expression	.\thinkphp\library\think\db\Expression.php	/^class Expression$/;"	c
Failed	.\thinkphp\library\think\process\exception\Failed.php	/^class Failed extends \\RuntimeException$/;"	c
File	.\thinkphp\library\think\File.php	/^class File extends SplFileObject$/;"	c
File	.\thinkphp\library\think\cache\driver\File.php	/^class File extends Driver$/;"	c
File	.\thinkphp\library\think\log\driver\File.php	/^class File$/;"	c
File	.\thinkphp\library\think\template\driver\File.php	/^class File$/;"	c
FlipTest	.\vendor\topthink\think-image\tests\FlipTest.php	/^class FlipTest extends TestCase$/;"	c
ForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^class ForeignKey$/;"	c
Formatter	.\thinkphp\library\think\console\output\Formatter.php	/^class Formatter$/;"	c
GIF	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $GIF = "GIF89a"; \/* GIF header 6 bytes    *\/$/;"	v
GIF_arrays	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_arrays = [];$/;"	v
GIF_bfseek	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_bfseek = 0;$/;"	v
GIF_buffer	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_buffer = [];$/;"	v
GIF_buffer	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_buffer = [];$/;"	v
GIF_code	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^            $GIF_code = $this->GIF_buffer[8] & 0x07;$/;"	v
GIF_code	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^            $GIF_code = $this->GIF_colorC;$/;"	v
GIF_colorC	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_colorC = $this->GIF_buffer[4] & 0x07;$/;"	v
GIF_colorC	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_colorC;$/;"	v
GIF_colorF	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $GIF_colorF = $this->GIF_buffer[8] & 0x80 ? 1 : 0;$/;"	v
GIF_colorF	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_colorF = $this->GIF_buffer[4] & 0x80 ? 1 : 0;$/;"	v
GIF_colorF	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_colorF;$/;"	v
GIF_colorS	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_colorS = 2 << $this->GIF_colorC;$/;"	v
GIF_colorS	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_colorS;$/;"	v
GIF_delays	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_delays = [];$/;"	v
GIF_global	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^            $this->GIF_global = $this->GIF_buffer;$/;"	v
GIF_global	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_global = [];$/;"	v
GIF_screen	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $GIF_screen = $this->GIF_buffer;$/;"	v
GIF_screen	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_screen = $this->GIF_buffer;$/;"	v
GIF_screen	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_screen = [];$/;"	v
GIF_size	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $GIF_size = 2 << $GIF_code;$/;"	v
GIF_sort	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^            $GIF_sort = $this->GIF_buffer[8] & 0x20 ? 1 : 0;$/;"	v
GIF_sort	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^            $GIF_sort = $this->GIF_sorted;$/;"	v
GIF_sorted	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_sorted = $this->GIF_buffer[4] & 0x08 ? 1 : 0;$/;"	v
GIF_sorted	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_sorted;$/;"	v
GIF_stream	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_stream = $GIF_pointer;$/;"	v
GIF_stream	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_stream = "";$/;"	v
GIF_string	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^        $this->GIF_string = "GIF87a";$/;"	v
GIF_string	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public $GIF_string = "";$/;"	v
Gif	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^class Gif$/;"	c
Global_len	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Global_len = 2 << (ord($this->BUF[0]{10}) & 0x07);$/;"	v
Global_rgb	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Global_rgb = substr($this->BUF[0], 13,$/;"	v
Handle	.\thinkphp\library\think\exception\Handle.php	/^class Handle$/;"	c
HasMany	.\thinkphp\library\think\model\relation\HasMany.php	/^class HasMany extends Relation$/;"	c
HasManyThrough	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^class HasManyThrough extends Relation$/;"	c
HasOne	.\thinkphp\library\think\model\relation\HasOne.php	/^class HasOne extends OneToOne$/;"	c
Hash	.\vendor\topthink\think-helper\src\Hash.php	/^class Hash$/;"	c
Help	.\thinkphp\library\think\console\command\Help.php	/^class Help extends Command$/;"	c
Hook	.\thinkphp\library\think\Hook.php	/^class Hook$/;"	c
Html	.\thinkphp\library\think\debug\Html.php	/^class Html$/;"	c
HttpException	.\thinkphp\library\think\exception\HttpException.php	/^class HttpException extends \\RuntimeException$/;"	c
HttpResponseException	.\thinkphp\library\think\exception\HttpResponseException.php	/^class HttpResponseException extends \\RuntimeException$/;"	c
IMG	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $this->IMG = 1;$/;"	v
IMG	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $IMG = -1;$/;"	v
IS_CLI	.\thinkphp\base.php	/^define('IS_CLI', PHP_SAPI == 'cli' ? true : false);$/;"	d
IS_WIN	.\thinkphp\base.php	/^define('IS_WIN', strpos(PHP_OS, 'WIN') !== false);$/;"	d
Image	.\vendor\topthink\think-image\src\Image.php	/^class Image$/;"	c
Index	.\application\api\controller\Index.php	/^class Index$/;"	c
Index	.\application\index\controller\Index.php	/^class Index$/;"	c
Index	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^class Index$/;"	c
InfoTest	.\vendor\topthink\think-image\tests\InfoTest.php	/^class InfoTest extends TestCase$/;"	c
Ini	.\thinkphp\library\think\config\driver\Ini.php	/^class Ini$/;"	c
Input	.\thinkphp\library\think\console\Input.php	/^class Input$/;"	c
IrreversibleMigrationException	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\IrreversibleMigrationException.php	/^class IrreversibleMigrationException extends \\Exception$/;"	c
JWT	.\extend\php-jwt-master\src\JWT.php	/^class JWT$/;"	c
JWT	.\vendor\firebase\php-jwt\src\JWT.php	/^class JWT$/;"	c
JWTTest	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^class JWTTest extends PHPUnit_Framework_TestCase$/;"	c
Job	.\vendor\topthink\think-queue\src\queue\Job.php	/^abstract class Job$/;"	c
Json	.\thinkphp\library\think\config\driver\Json.php	/^class Json$/;"	c
Json	.\thinkphp\library\think\response\Json.php	/^class Json extends Response$/;"	c
Jsonp	.\thinkphp\library\think\response\Jsonp.php	/^class Jsonp extends Response$/;"	c
LIB_PATH	.\thinkphp\base.php	/^define('LIB_PATH', THINK_PATH . 'library' . DS);$/;"	d
LOG_PATH	.\thinkphp\base.php	/^defined('LOG_PATH') or define('LOG_PATH', RUNTIME_PATH . 'log' . DS);$/;"	d
LOP	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $this->LOP = ($GIF_lop > -1) ? $GIF_lop : 0;$/;"	v
LOP	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $LOP = 0;$/;"	v
Lang	.\thinkphp\library\think\Lang.php	/^class Lang$/;"	c
Listen	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^class Listen extends Command$/;"	c
Listener	.\vendor\topthink\think-queue\src\queue\Listener.php	/^class Listener$/;"	c
Lists	.\thinkphp\library\think\console\command\Lists.php	/^class Lists extends Command$/;"	c
Lite	.\thinkphp\library\think\cache\driver\Lite.php	/^class Lite extends Driver$/;"	c
Loader	.\thinkphp\library\think\Loader.php	/^class Loader$/;"	c
Locals_end	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_end = strlen($this->BUF[$i]) - $Locals_str - 1;$/;"	v
Locals_ext	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                    $Locals_ext = "!\\xF9\\x04" . chr(($this->DIS << 2) + 1) .$/;"	v
Locals_ext	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_ext = "!\\xF9\\x04" . chr(($this->DIS << 2) + 0) .$/;"	v
Locals_img	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                $Locals_img = substr($Locals_tmp, 0, 10);$/;"	v
Locals_img	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                $Locals_img = substr($Locals_tmp, 8, 10);$/;"	v
Locals_img	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_img = '';$/;"	v
Locals_len	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_len = 2 << (ord($this->BUF[$i]{10}) & 0x07);$/;"	v
Locals_rgb	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_rgb = substr($this->BUF[$i], 13,$/;"	v
Locals_str	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_str = 13 + 3 * (2 << (ord($this->BUF[$i]{10}) & 0x07));$/;"	v
Locals_tmp	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                $Locals_tmp = substr($Locals_tmp, 10, strlen($Locals_tmp) - 10);$/;"	v
Locals_tmp	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                $Locals_tmp = substr($Locals_tmp, 18, strlen($Locals_tmp) - 18);$/;"	v
Locals_tmp	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        $Locals_tmp = substr($this->BUF[$i], $Locals_str, $Locals_end);$/;"	v
Log	.\thinkphp\library\think\Log.php	/^class Log$/;"	c
Make	.\thinkphp\library\think\console\command\Make.php	/^abstract class Make extends Command$/;"	c
Md5	.\vendor\topthink\think-helper\src\hash\Md5.php	/^class Md5$/;"	c
Memcache	.\thinkphp\library\think\cache\driver\Memcache.php	/^class Memcache extends Driver$/;"	c
Memcache	.\thinkphp\library\think\session\driver\Memcache.php	/^class Memcache extends SessionHandler$/;"	c
Memcached	.\thinkphp\library\think\cache\driver\Memcached.php	/^class Memcached extends Driver$/;"	c
Memcached	.\thinkphp\library\think\session\driver\Memcached.php	/^class Memcached extends SessionHandler$/;"	c
Merge	.\thinkphp\library\think\model\Merge.php	/^class Merge extends Model$/;"	c
Migrate	.\vendor\topthink\think-migration\src\command\Migrate.php	/^abstract class Migrate extends Command$/;"	c
MigrationInterface	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^interface MigrationInterface$/;"	i
Migrator	.\vendor\topthink\think-migration\src\Migrator.php	/^class Migrator extends AbstractMigration$/;"	c
Model	.\thinkphp\library\think\Model.php	/^abstract class Model implements \\JsonSerializable, \\ArrayAccess$/;"	c
Model	.\thinkphp\library\think\console\command\make\Model.php	/^class Model extends Make$/;"	c
ModelNotFoundException	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^class ModelNotFoundException extends DbException$/;"	c
MorphMany	.\thinkphp\library\think\model\relation\MorphMany.php	/^class MorphMany extends Relation$/;"	c
MorphOne	.\thinkphp\library\think\model\relation\MorphOne.php	/^class MorphOne extends Relation$/;"	c
MorphTo	.\thinkphp\library\think\model\relation\MorphTo.php	/^class MorphTo extends Relation$/;"	c
Mysql	.\thinkphp\library\think\db\builder\Mysql.php	/^class Mysql extends Builder$/;"	c
Mysql	.\thinkphp\library\think\db\connector\Mysql.php	/^class Mysql extends Connection$/;"	c
MysqlAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^class MysqlAdapter extends PdoAdapter implements AdapterInterface$/;"	c
Nothing	.\thinkphp\library\think\console\output\driver\Nothing.php	/^class Nothing$/;"	c
OneToOne	.\thinkphp\library\think\model\relation\OneToOne.php	/^abstract class OneToOne extends Relation$/;"	c
Option	.\thinkphp\library\think\console\input\Option.php	/^class Option$/;"	c
Output	.\thinkphp\library\think\console\Output.php	/^class Output$/;"	c
PDOException	.\thinkphp\library\think\exception\PDOException.php	/^class PDOException extends DbException$/;"	c
PDOStatement	.\thinkphp\library\think\db\Connection.php	/^                $this->PDOStatement = $this->linkID->prepare($sql);$/;"	v
PDOStatement	.\thinkphp\library\think\db\Connection.php	/^        $this->PDOStatement = null;$/;"	v
PDOStatement	.\thinkphp\library\think\db\Connection.php	/^    protected $PDOStatement;$/;"	v
Paginator	.\thinkphp\library\think\Paginator.php	/^abstract class Paginator implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable$/;"	c
PdoAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^abstract class PdoAdapter implements AdapterInterface$/;"	c
Pgsql	.\thinkphp\library\think\db\builder\Pgsql.php	/^class Pgsql extends Builder$/;"	c
Pgsql	.\thinkphp\library\think\db\connector\Pgsql.php	/^class Pgsql extends Connection$/;"	c
Php	.\thinkphp\library\think\view\driver\Php.php	/^class Php$/;"	c
Pipes	.\thinkphp\library\think\process\pipes\Pipes.php	/^abstract class Pipes$/;"	c
Pivot	.\thinkphp\library\think\model\Pivot.php	/^class Pivot extends Model$/;"	c
Plugin	.\vendor\topthink\think-installer\src\Plugin.php	/^class Plugin implements PluginInterface$/;"	c
PostgresAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^class PostgresAdapter extends PdoAdapter implements AdapterInterface$/;"	c
Process	.\thinkphp\library\think\Process.php	/^class Process$/;"	c
ProxyAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^class ProxyAdapter extends AdapterWrapper$/;"	c
Query	.\thinkphp\library\think\db\Query.php	/^class Query$/;"	c
Query	.\vendor\topthink\think-mongo\src\Query.php	/^class Query$/;"	c
Question	.\thinkphp\library\think\console\output\Question.php	/^class Question$/;"	c
Queue	.\vendor\topthink\think-queue\src\Queue.php	/^class Queue$/;"	c
ROOT_PATH	.\thinkphp\base.php	/^defined('ROOT_PATH') or define('ROOT_PATH', dirname(realpath(APP_PATH)) . DS);$/;"	d
RUNTIME_PATH	.\thinkphp\base.php	/^defined('RUNTIME_PATH') or define('RUNTIME_PATH', ROOT_PATH . 'runtime' . DS);$/;"	d
Redirect	.\thinkphp\library\think\response\Redirect.php	/^class Redirect extends Response$/;"	c
Redis	.\thinkphp\library\think\cache\driver\Redis.php	/^class Redis extends Driver$/;"	c
Redis	.\thinkphp\library\think\session\driver\Redis.php	/^class Redis extends SessionHandler$/;"	c
Redis	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^class Redis extends Connector$/;"	c
Redis	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^class Redis extends Job$/;"	c
Relation	.\thinkphp\library\think\model\Relation.php	/^abstract class Relation$/;"	c
Request	.\thinkphp\library\think\Request.php	/^class Request$/;"	c
Response	.\thinkphp\library\think\Response.php	/^class Response$/;"	c
Rest	.\thinkphp\library\think\controller\Rest.php	/^abstract class Rest$/;"	c
Restart	.\vendor\topthink\think-queue\src\queue\command\Restart.php	/^class Restart extends Command$/;"	c
Rollback	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^class Rollback extends Migrate$/;"	c
RotateTest	.\vendor\topthink\think-image\tests\RotateTest.php	/^class RotateTest extends TestCase$/;"	c
Route	.\thinkphp\library\think\Route.php	/^class Route$/;"	c
Route	.\thinkphp\library\think\console\command\optimize\Route.php	/^class Route extends Command$/;"	c
RouteNotFoundException	.\thinkphp\library\think\exception\RouteNotFoundException.php	/^class RouteNotFoundException extends HttpException$/;"	c
Run	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^class Run extends Migrate$/;"	c
Run	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^class Run extends Seed$/;"	c
SQLiteAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^class SQLiteAdapter extends PdoAdapter implements AdapterInterface$/;"	c
Schema	.\thinkphp\library\think\console\command\optimize\Schema.php	/^class Schema extends Command$/;"	c
Seed	.\vendor\topthink\think-migration\src\command\Seed.php	/^abstract class Seed extends Command$/;"	c
SeedInterface	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^interface SeedInterface$/;"	i
Seeder	.\vendor\topthink\think-migration\src\Seeder.php	/^class Seeder extends AbstractSeed$/;"	c
Session	.\thinkphp\library\think\Session.php	/^class Session$/;"	c
ShouldQueue	.\vendor\topthink\think-queue\src\queue\ShouldQueue.php	/^interface ShouldQueue$/;"	i
SignatureInvalidException	.\extend\php-jwt-master\src\SignatureInvalidException.php	/^class SignatureInvalidException extends \\UnexpectedValueException$/;"	c
SignatureInvalidException	.\vendor\firebase\php-jwt\src\SignatureInvalidException.php	/^class SignatureInvalidException extends \\UnexpectedValueException$/;"	c
Socket	.\thinkphp\library\think\log\driver\Socket.php	/^class Socket$/;"	c
SqlServerAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^class SqlServerAdapter extends PdoAdapter implements AdapterInterface$/;"	c
Sqlite	.\thinkphp\library\think\cache\driver\Sqlite.php	/^class Sqlite extends Driver$/;"	c
Sqlite	.\thinkphp\library\think\db\builder\Sqlite.php	/^class Sqlite extends Builder$/;"	c
Sqlite	.\thinkphp\library\think\db\connector\Sqlite.php	/^class Sqlite extends Connection$/;"	c
Sqlsrv	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^class Sqlsrv extends Builder$/;"	c
Sqlsrv	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^class Sqlsrv extends Connection$/;"	c
Stack	.\thinkphp\library\think\console\output\formatter\Stack.php	/^class Stack$/;"	c
Status	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^class Status extends Migrate$/;"	c
Str	.\vendor\topthink\think-helper\src\Str.php	/^class Str$/;"	c
Style	.\thinkphp\library\think\console\output\formatter\Style.php	/^class Style$/;"	c
Subscribe	.\vendor\topthink\think-queue\src\queue\command\Subscribe.php	/^class Subscribe extends Command$/;"	c
Sync	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^class Sync extends Connector$/;"	c
Sync	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^class Sync extends Job$/;"	c
T	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $T   = mt_rand($this->imageH, $this->imageW * 2); \/\/ 周期$/;"	v
T	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $T = mt_rand($this->imageH, $this->imageW * 2); \/\/ 周期$/;"	v
TEMP_PATH	.\thinkphp\base.php	/^defined('TEMP_PATH') or define('TEMP_PATH', RUNTIME_PATH . 'temp' . DS);$/;"	d
TEST_PATH	.\vendor\topthink\think-image\tests\autoload.php	/^define('TEST_PATH', __DIR__ . '\/');$/;"	d
THINK_PATH	.\thinkphp\base.php	/^defined('THINK_PATH') or define('THINK_PATH', __DIR__ . DS);$/;"	d
THINK_START_MEM	.\thinkphp\base.php	/^define('THINK_START_MEM', memory_get_usage());$/;"	d
THINK_START_TIME	.\thinkphp\base.php	/^define('THINK_START_TIME', microtime(true));$/;"	d
THINK_VERSION	.\thinkphp\base.php	/^define('THINK_VERSION', '5.0.20');$/;"	d
TRAIT_PATH	.\thinkphp\base.php	/^define('TRAIT_PATH', LIB_PATH . 'traits' . DS);$/;"	d
Table	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^class Table$/;"	c
Table	.\vendor\topthink\think-migration\src\db\Table.php	/^class Table extends \\Phinx\\Db\\Table$/;"	c
TablePrefixAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^class TablePrefixAdapter extends AdapterWrapper$/;"	c
TagLib	.\thinkphp\library\think\template\TagLib.php	/^class TagLib$/;"	c
Template	.\thinkphp\library\think\Template.php	/^class Template$/;"	c
TemplateNotFoundException	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^class TemplateNotFoundException extends \\RuntimeException$/;"	c
Test	.\thinkphp\library\think\log\driver\Test.php	/^class Test$/;"	c
TestCase	.\vendor\topthink\think-image\tests\TestCase.php	/^abstract class TestCase extends \\PHPUnit_Framework_TestCase$/;"	c
TextTest	.\vendor\topthink\think-image\tests\TextTest.php	/^class TextTest extends TestCase$/;"	c
Think	.\thinkphp\library\think\view\driver\Think.php	/^class Think$/;"	c
ThinkExtend	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^class ThinkExtend extends LibraryInstaller$/;"	c
ThinkFramework	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^class ThinkFramework extends LibraryInstaller$/;"	c
ThinkTesting	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^class ThinkTesting extends LibraryInstaller$/;"	c
ThrowableError	.\thinkphp\library\think\exception\ThrowableError.php	/^class ThrowableError extends \\ErrorException$/;"	c
ThumbTest	.\vendor\topthink\think-image\tests\ThumbTest.php	/^class ThumbTest extends TestCase$/;"	c
Time	.\vendor\topthink\think-helper\src\Time.php	/^class Time$/;"	c
Timeout	.\thinkphp\library\think\process\exception\Timeout.php	/^class Timeout extends \\RuntimeException$/;"	c
Topthink	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^class Topthink extends Connector$/;"	c
Topthink	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^class Topthink extends Job$/;"	c
Unix	.\thinkphp\library\think\process\pipes\Unix.php	/^class Unix extends Pipes$/;"	c
Url	.\thinkphp\library\think\Url.php	/^class Url$/;"	c
Util	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^class Util$/;"	c
Utils	.\thinkphp\library\think\process\Utils.php	/^class Utils$/;"	c
VENDOR_PATH	.\thinkphp\base.php	/^defined('VENDOR_PATH') or define('VENDOR_PATH', ROOT_PATH . 'vendor' . DS);$/;"	d
VER	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public $VER = "GIFEncoder V2.05"; \/* Encoder version        *\/$/;"	v
Validate	.\thinkphp\library\think\Validate.php	/^class Validate$/;"	c
ValidateException	.\thinkphp\library\think\exception\ValidateException.php	/^class ValidateException extends \\RuntimeException$/;"	c
View	.\thinkphp\library\think\View.php	/^class View$/;"	c
View	.\thinkphp\library\think\response\View.php	/^class View extends Response$/;"	c
WaterTest	.\vendor\topthink\think-image\tests\WaterTest.php	/^class WaterTest extends TestCase$/;"	c
Wincache	.\thinkphp\library\think\cache\driver\Wincache.php	/^class Wincache extends Driver$/;"	c
Windows	.\thinkphp\library\think\process\pipes\Windows.php	/^class Windows extends Pipes$/;"	c
Work	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^class Work extends Command$/;"	c
Worker	.\vendor\topthink\think-queue\src\queue\Worker.php	/^class Worker$/;"	c
WrapperInterface	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\WrapperInterface.php	/^interface WrapperInterface$/;"	i
Xcache	.\thinkphp\library\think\cache\driver\Xcache.php	/^class Xcache extends Driver$/;"	c
Xml	.\thinkphp\library\think\config\driver\Xml.php	/^class Xml$/;"	c
Xml	.\thinkphp\library\think\response\Xml.php	/^class Xml extends Response$/;"	c
Yar	.\thinkphp\library\think\controller\Yar.php	/^abstract class Yar$/;"	c
_GET	.\thinkphp\library\think\Route.php	/^                        $_GET = array_merge($_GET, $params);$/;"	v
_SESSION	.\thinkphp\library\think\Session.php	/^            $_SESSION = [];$/;"	v
__LIST__	.\thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr .= ' $__LIST__ = ' . $name . ';';$/;"	v
__call	.\thinkphp\library\think\File.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\Model.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\Paginator.php	/^    public function __call($name, $arguments)$/;"	f
__call	.\thinkphp\library\think\Request.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\console\Output.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\controller\Yar.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\db\Connection.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\db\Query.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\model\Relation.php	/^    public function __call($method, $args)$/;"	f
__call	.\thinkphp\library\think\view\driver\Think.php	/^    public function __call($method, $params)$/;"	f
__call	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function __call($method, $args)$/;"	f
__call	.\vendor\topthink\think-mongo\src\Query.php	/^    public function __call($method, $args)$/;"	f
__callStatic	.\thinkphp\library\think\Db.php	/^    public static function __callStatic($method, $params)$/;"	f
__callStatic	.\thinkphp\library\think\Log.php	/^    public static function __callStatic($method, $args)$/;"	f
__callStatic	.\thinkphp\library\think\Model.php	/^    public static function __callStatic($method, $args)$/;"	f
__callStatic	.\thinkphp\library\think\Validate.php	/^    public static function __callStatic($method, $params)$/;"	f
__callStatic	.\thinkphp\library\traits\think\Instance.php	/^    public static function __callStatic($method, array $params)$/;"	f
__callStatic	.\vendor\topthink\think-queue\src\Queue.php	/^    public static function __callStatic($name, $arguments)$/;"	f
__clone	.\thinkphp\library\think\Process.php	/^    public function __clone()$/;"	f
__construct	.\thinkphp\library\think\Collection.php	/^    public function __construct($items = [])$/;"	f
__construct	.\thinkphp\library\think\Console.php	/^    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN', $user = null)$/;"	f
__construct	.\thinkphp\library\think\Controller.php	/^    public function __construct(Request $request = null)$/;"	f
__construct	.\thinkphp\library\think\File.php	/^    public function __construct($filename, $mode = 'r')$/;"	f
__construct	.\thinkphp\library\think\Model.php	/^    public function __construct($data = [])$/;"	f
__construct	.\thinkphp\library\think\Paginator.php	/^    public function __construct($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	f
__construct	.\thinkphp\library\think\Process.php	/^    public function __construct($commandline, $cwd = null, array $env = null, $input = null, $timeout = 60, array $options = [])$/;"	f
__construct	.\thinkphp\library\think\Request.php	/^    protected function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\Response.php	/^    public function __construct($data = '', $code = 200, array $header = [], $options = [])$/;"	f
__construct	.\thinkphp\library\think\Template.php	/^    public function __construct(array $config = [])$/;"	f
__construct	.\thinkphp\library\think\Validate.php	/^    public function __construct(array $rules = [], $message = [], $field = [])$/;"	f
__construct	.\thinkphp\library\think\View.php	/^    public function __construct($engine = [], $replace = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\File.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function __construct($options = [])$/;"	f
__construct	.\thinkphp\library\think\console\Command.php	/^    public function __construct($name = null)$/;"	f
__construct	.\thinkphp\library\think\console\Input.php	/^    public function __construct($argv = null)$/;"	f
__construct	.\thinkphp\library\think\console\Output.php	/^    public function __construct($driver = 'console')$/;"	f
__construct	.\thinkphp\library\think\console\input\Argument.php	/^    public function __construct($name, $mode = null, $description = '', $default = null)$/;"	f
__construct	.\thinkphp\library\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	f
__construct	.\thinkphp\library\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
__construct	.\thinkphp\library\think\console\output\Ask.php	/^    public function __construct(Input $input, Output $output, Question $question)$/;"	f
__construct	.\thinkphp\library\think\console\output\Formatter.php	/^    public function __construct()$/;"	f
__construct	.\thinkphp\library\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	f
__construct	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	f
__construct	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    public function __construct(Output $output)$/;"	f
__construct	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function __construct(Output $output)$/;"	f
__construct	.\thinkphp\library\think\console\output\driver\Nothing.php	/^    public function __construct(Output $output)$/;"	f
__construct	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	f
__construct	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	f
__construct	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	f
__construct	.\thinkphp\library\think\console\output\question\Confirmation.php	/^    public function __construct($question, $default = true, $trueAnswerRegex = '\/^y\/i')$/;"	f
__construct	.\thinkphp\library\think\controller\Rest.php	/^    public function __construct()$/;"	f
__construct	.\thinkphp\library\think\controller\Yar.php	/^    public function __construct()$/;"	f
__construct	.\thinkphp\library\think\db\Builder.php	/^    public function __construct(Connection $connection, Query $query)$/;"	f
__construct	.\thinkphp\library\think\db\Connection.php	/^    public function __construct(array $config = [])$/;"	f
__construct	.\thinkphp\library\think\db\Expression.php	/^    public function __construct($value)$/;"	f
__construct	.\thinkphp\library\think\db\Query.php	/^    public function __construct(Connection $connection = null, $model = null)$/;"	f
__construct	.\thinkphp\library\think\db\exception\BindParamException.php	/^    public function __construct($message, $config, $sql, $bind, $code = 10502)$/;"	f
__construct	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function __construct($message, $table = '', array $config = [])$/;"	f
__construct	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function __construct($message, $model = '', array $config = [])$/;"	f
__construct	.\thinkphp\library\think\debug\Console.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\debug\Html.php	/^    public function __construct(array $config = [])$/;"	f
__construct	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function __construct($message, $class = '')$/;"	f
__construct	.\thinkphp\library\think\exception\DbException.php	/^    public function __construct($message, array $config, $sql, $code = 10500)$/;"	f
__construct	.\thinkphp\library\think\exception\ErrorException.php	/^    public function __construct($severity, $message, $file, $line, array $context = [])$/;"	f
__construct	.\thinkphp\library\think\exception\HttpException.php	/^    public function __construct($statusCode, $message = null, \\Exception $previous = null, array $headers = [], $code = 0)$/;"	f
__construct	.\thinkphp\library\think\exception\HttpResponseException.php	/^    public function __construct(Response $response)$/;"	f
__construct	.\thinkphp\library\think\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config, $sql, $code = 10501)$/;"	f
__construct	.\thinkphp\library\think\exception\RouteNotFoundException.php	/^    public function __construct()$/;"	f
__construct	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function __construct($message, $template = '')$/;"	f
__construct	.\thinkphp\library\think\exception\ThrowableError.php	/^    public function __construct(\\Throwable $e)$/;"	f
__construct	.\thinkphp\library\think\exception\ValidateException.php	/^    public function __construct($error)$/;"	f
__construct	.\thinkphp\library\think\log\driver\File.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	f
__construct	.\thinkphp\library\think\model\Merge.php	/^    public function __construct($data = [])$/;"	f
__construct	.\thinkphp\library\think\model\Pivot.php	/^    public function __construct($data = [], Model $parent = null, $table = '')$/;"	f
__construct	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $joinType = 'INNER', $relation = null)$/;"	f
__construct	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function __construct(Model $parent, $model, $table, $foreignKey, $localKey)$/;"	f
__construct	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey)$/;"	f
__construct	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function __construct(Model $parent, $model, $through, $foreignKey, $throughKey, $localKey)$/;"	f
__construct	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $joinType = 'INNER')$/;"	f
__construct	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function __construct(Model $parent, $model, $morphKey, $morphType, $type)$/;"	f
__construct	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function __construct(Model $parent, $model, $morphKey, $morphType, $type)$/;"	f
__construct	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function __construct(Model $parent, $morphType, $morphKey, $alias = [], $relation = null)$/;"	f
__construct	.\thinkphp\library\think\process\Builder.php	/^    public function __construct(array $arguments = [])$/;"	f
__construct	.\thinkphp\library\think\process\exception\Failed.php	/^    public function __construct(Process $process)$/;"	f
__construct	.\thinkphp\library\think\process\exception\Timeout.php	/^    public function __construct(Process $process, $timeoutType)$/;"	f
__construct	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function __construct($ttyMode, $ptyMode, $input, $disableOutput)$/;"	f
__construct	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function __construct($disableOutput, $input)$/;"	f
__construct	.\thinkphp\library\think\response\Redirect.php	/^    public function __construct($data = '', $code = 302, array $header = [], array $options = [])$/;"	f
__construct	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\session\driver\Redis.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\template\TagLib.php	/^    public function __construct($template)$/;"	f
__construct	.\thinkphp\library\think\view\driver\Php.php	/^    public function __construct($config = [])$/;"	f
__construct	.\thinkphp\library\think\view\driver\Think.php	/^    public function __construct($config = [])$/;"	f
__construct	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function __construct($config = [])$/;"	f
__construct	.\vendor\topthink\think-image\src\Image.php	/^    protected function __construct(\\SplFileInfo $file)$/;"	f
__construct	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function __construct($GIF_pointer)$/;"	f
__construct	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function __construct($/;"	f
__construct	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    public function __construct($src = null, $mod = 'url')$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function __construct(AdapterInterface $adapter)$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function __construct(array $options, InputInterface $input = null, OutputInterface $output = null)$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\WrapperInterface.php	/^    public function __construct(AdapterInterface $adapter);$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function __construct($name, $options = array(), AdapterInterface $adapter = null)$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    final public function __construct($version, InputInterface $input = null, OutputInterface $output = null)$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function __construct(InputInterface $input = null, OutputInterface $output = null)$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function __construct(InputInterface $input = null, OutputInterface $output = null);$/;"	f
__construct	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    final public function __construct(InputInterface $input = null, OutputInterface $output = null)$/;"	f
__construct	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    public function __construct($name = null)$/;"	f
__construct	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function __construct(Connection $connection, Query $query)$/;"	f
__construct	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function __construct(array $config = [])$/;"	f
__construct	.\vendor\topthink\think-mongo\src\Query.php	/^    public function __construct(Connection $connection = null, $model = '')$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function __construct($commandPath)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function __construct($options)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function __construct($options)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function __construct($options)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function __construct(DatabaseQueue $database, $job, $queue)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function __construct(RedisQueue $redis, $job, $queue)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^    public function __construct($payload)$/;"	f
__construct	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function __construct(TopthinkQueue $topthink, $job, $queue)$/;"	f
__destruct	.\thinkphp\library\think\Process.php	/^    public function __destruct()$/;"	f
__destruct	.\thinkphp\library\think\db\Connection.php	/^    public function __destruct()$/;"	f
__destruct	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function __destruct()$/;"	f
__destruct	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function __destruct()$/;"	f
__destruct	.\vendor\topthink\think-image\src\Image.php	/^    public function __destruct()$/;"	f
__destruct	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function __destruct()$/;"	f
__destruct	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function __destruct()$/;"	f
__get	.\thinkphp\library\think\Model.php	/^    public function __get($name)$/;"	f
__get	.\thinkphp\library\think\Request.php	/^    public function __get($name)$/;"	f
__get	.\thinkphp\library\think\View.php	/^    public function __get($name)$/;"	f
__get	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function __get($name)$/;"	f
__include_file	.\thinkphp\library\think\Loader.php	/^function __include_file($file)$/;"	f
__isset	.\thinkphp\library\think\Model.php	/^    public function __isset($name)$/;"	f
__isset	.\thinkphp\library\think\Request.php	/^    public function __isset($name)$/;"	f
__isset	.\thinkphp\library\think\View.php	/^    public function __isset($name)$/;"	f
__isset	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function __isset($name)$/;"	f
__require_file	.\thinkphp\library\think\Loader.php	/^function __require_file($file)$/;"	f
__set	.\thinkphp\library\think\Model.php	/^    public function __set($name, $value)$/;"	f
__set	.\thinkphp\library\think\Request.php	/^    public function __set($name, $value)$/;"	f
__set	.\thinkphp\library\think\Template.php	/^    public function __set($name, $value)$/;"	f
__set	.\thinkphp\library\think\View.php	/^    public function __set($name, $value)$/;"	f
__set	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function __set($name, $value)$/;"	f
__toString	.\thinkphp\library\think\Collection.php	/^    public function __toString()$/;"	f
__toString	.\thinkphp\library\think\Model.php	/^    public function __toString()$/;"	f
__toString	.\thinkphp\library\think\Paginator.php	/^    public function __toString()$/;"	f
__toString	.\thinkphp\library\think\console\Input.php	/^    public function __toString()$/;"	f
__toString	.\thinkphp\library\think\db\Expression.php	/^    public function __toString()$/;"	f
__unset	.\thinkphp\library\think\Model.php	/^    public function __unset($name)$/;"	f
__wakeup	.\thinkphp\library\think\Model.php	/^    public function __wakeup()$/;"	f
_background	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private function _background()$/;"	f
_color	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->_color = imagecolorallocate($this->_image, mt_rand(1, 150), mt_rand(1, 150), mt_rand(1, 150));$/;"	v
_color	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private $_color = null; \/\/ 验证码字体颜色$/;"	v
_config	.\thinkphp\library\think\db\Connection.php	/^        $_config = [];$/;"	v
_config	.\vendor\topthink\think-mongo\src\Connection.php	/^        $_config = [];$/;"	v
_empty	.\thinkphp\library\think\controller\Rest.php	/^    public function _empty($method)$/;"	f
_file	.\thinkphp\library\think\Loader.php	/^        static $_file = [];$/;"	v
_image	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->_image = imagecreate($this->imageW, $this->imageH);$/;"	v
_image	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private $_image = null; \/\/ 验证码图片实例$/;"	v
_initialize	.\thinkphp\library\think\Controller.php	/^    protected function _initialize()$/;"	f
_key	.\thinkphp\library\think\Template.php	/^        $_key                    = md5($varStr);$/;"	v
_lang	.\thinkphp\library\think\Lang.php	/^                $_lang = include $_file;$/;"	v
_taglibs	.\thinkphp\library\think\template\TagLib.php	/^                static $_taglibs;$/;"	v
_varFunctionList	.\thinkphp\library\think\Template.php	/^        static $_varFunctionList = [];$/;"	v
_varParseList	.\thinkphp\library\think\Template.php	/^            static $_varParseList = [];$/;"	v
_writeCurve	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private function _writeCurve()$/;"	f
_writeNoise	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private function _writeNoise()$/;"	f
a	.\thinkphp\library\think\Collection.php	/^            return $a == $b ? 0 : (($a < $b) ? -1 : 1);$/;"	v
a	.\thinkphp\library\think\Debug.php	/^        $a    = ['B', 'KB', 'MB', 'GB', 'TB'];$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $a = array_diff($columns, $key['columns']);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $a = array_diff($columns, $key['columns']);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $a = array_diff($columns, $index['columns']);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $a = array_diff($columns, $index['columns']);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $a = array_diff($columns, $foreignKeys);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $a = array_diff($columns, $key['columns']);$/;"	v
a	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $a = array_diff($columns, $index['columns']);$/;"	v
abbrev	.\thinkphp\library\think\Console.php	/^                $abbrev             = substr($name, 0, $len);$/;"	v
abbrevs	.\thinkphp\library\think\Console.php	/^        $abbrevs = [];$/;"	v
abort	.\thinkphp\helper.php	/^    function abort($code, $message = null, $header = [])$/;"	f
absolute	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $absolute = true;$/;"	v
absolute	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $absolute = false;$/;"	v
accept	.\thinkphp\library\think\Request.php	/^        $accept = $this->server('HTTP_ACCEPT');$/;"	v
accept	.\thinkphp\library\think\debug\Console.php	/^        $accept      = $request->header('accept');$/;"	v
accept	.\thinkphp\library\think\debug\Html.php	/^        $accept      = $request->header('accept');$/;"	v
acceptLangs	.\thinkphp\library\think\Lang.php	/^            $acceptLangs = Config::get('header_accept_lang');$/;"	v
acceptLanguage	.\thinkphp\library\think\Lang.php	/^    protected static $acceptLanguage = ['zh-hans-cn' => 'zh-cn'];$/;"	v
acceptValue	.\thinkphp\library\think\console\input\Option.php	/^    public function acceptValue()$/;"	f
action	.\thinkphp\helper.php	/^    function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	f
action	.\thinkphp\library\think\App.php	/^        $action = $actionName . $config['action_suffix'];$/;"	v
action	.\thinkphp\library\think\Loader.php	/^        $action = $info['basename'];$/;"	v
action	.\thinkphp\library\think\Loader.php	/^    public static function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	f
action	.\thinkphp\library\think\Request.php	/^            $this->action = $action;$/;"	v
action	.\thinkphp\library\think\Request.php	/^    protected $action;$/;"	v
action	.\thinkphp\library\think\Request.php	/^    public function action($action = null)$/;"	f
action	.\thinkphp\library\think\Route.php	/^            $action              = $array[0];$/;"	v
action	.\thinkphp\library\think\Route.php	/^            $action = !empty($path) ? array_shift($path) : null;$/;"	v
action	.\thinkphp\library\think\Route.php	/^            $action = 0 !== strpos($action, self::$methodPrefix[$method]) ? self::$methodPrefix[$method] . $action : $action;$/;"	v
action	.\thinkphp\library\think\Route.php	/^        $action           = array_pop($path);$/;"	v
action	.\thinkphp\library\think\Route.php	/^        $action = !empty($array[0]) ? $array[0] : Config::get('default_action');$/;"	v
action	.\thinkphp\library\think\Url.php	/^                $action     = array_pop($path);$/;"	v
action	.\thinkphp\library\think\Url.php	/^                $action     = strtolower($action);$/;"	v
action	.\thinkphp\library\think\Url.php	/^                $action = $request->action();$/;"	v
actionName	.\thinkphp\library\think\App.php	/^            $actionName = $convert ? strtolower($actionName) : $actionName;$/;"	v
actionName	.\thinkphp\library\think\App.php	/^            $actionName = $suffix ? substr($methodName, 0, -strlen($suffix)) : $methodName;$/;"	v
actionName	.\thinkphp\library\think\App.php	/^            $actionName = Loader::parseName($actionName, 1);$/;"	v
actionName	.\thinkphp\library\think\App.php	/^        $actionName = strip_tags($result[2] ?: $config['default_action']);$/;"	v
activate	.\vendor\topthink\think-installer\src\Plugin.php	/^    public function activate(Composer $composer, IOInterface $io)$/;"	f
activeUrl	.\thinkphp\library\think\Validate.php	/^    protected function activeUrl($value, $rule)$/;"	f
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^        $this->adapter = $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    protected $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->adapter = $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^        $this->adapter = $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    protected $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^        $this->adapter = $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    protected $adapter;$/;"	v
adapter	.\vendor\topthink\think-migration\src\Command.php	/^            $adapter = AdapterFactory::instance()->getWrapper('prefix', $adapter);$/;"	v
adapter	.\vendor\topthink\think-migration\src\Command.php	/^        $adapter = AdapterFactory::instance()->getAdapter($options['adapter'], $options);$/;"	v
adapter	.\vendor\topthink\think-migration\src\Command.php	/^        $this->adapter = $adapter;$/;"	v
adapterNewTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^        $adapterNewTableName = $this->getAdapterTableName($newTableName);$/;"	v
adapterReferenceTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^            $adapterReferenceTable = $fk->getReferencedTable();$/;"	v
adapterReferenceTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^            $adapterReferenceTableName = $this->getAdapterTableName($adapterReferenceTable->getName());$/;"	v
adapterTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^        $adapterTable = clone $table;$/;"	v
adapterTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^        $adapterTableName = $this->getAdapterTableName($table->getName());$/;"	v
adapterTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^        $adapterTableName = $this->getAdapterTableName($tableName);$/;"	v
adapters	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    protected $adapters = array($/;"	v
add	.\thinkphp\library\think\Console.php	/^    public function add(Command $command)$/;"	f
add	.\thinkphp\library\think\Hook.php	/^    public static function add($tag, $behavior, $first = false)$/;"	f
add	.\thinkphp\library\think\process\Builder.php	/^    public function add($argument)$/;"	f
add	.\vendor\composer\ClassLoader.php	/^    public function add($prefix, $paths, $prepend = false)$/;"	f
addArgument	.\thinkphp\library\think\console\Command.php	/^    public function addArgument($name, $mode = null, $description = '', $default = null)$/;"	f
addArgument	.\thinkphp\library\think\console\input\Definition.php	/^    public function addArgument(Argument $argument)$/;"	f
addArguments	.\thinkphp\library\think\console\input\Definition.php	/^    public function addArguments($arguments = [])$/;"	f
addClassMap	.\thinkphp\library\think\Loader.php	/^    public static function addClassMap($class, $map = '')$/;"	f
addClassMap	.\vendor\composer\ClassLoader.php	/^    public function addClassMap(array $classMap)$/;"	f
addClassMapCode	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function addClassMapCode($dir, $namespace, $classMap)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function addColumn(Table $table, Column $column);$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function addColumn(Table $table, Column $column)$/;"	f
addColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addColumn($columnName, $type = null, $options = array())$/;"	f
addColumn	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addColumn($columnName, $type = null, $options = [])$/;"	f
addCommands	.\thinkphp\library\think\Console.php	/^    public function addCommands(array $commands)$/;"	f
addDefaultCommands	.\thinkphp\library\think\Console.php	/^    public static function addDefaultCommands(array $classes)$/;"	f
addEnvironmentVariables	.\thinkphp\library\think\process\Builder.php	/^    public function addEnvironmentVariables(array $variables)$/;"	f
addErrorOutput	.\thinkphp\library\think\Process.php	/^    public function addErrorOutput($line)$/;"	f
addFooter	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function addFooter()$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey);$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function addForeignKey(Table $table, ForeignKey $foreignKey)$/;"	f
addForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addForeignKey($columns, $referencedTable, $referencedColumns = array('id'), $options = array())$/;"	f
addFrames	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function addFrames($i, $d)$/;"	f
addHeader	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function addHeader()$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function addIndex(Table $table, Index $index);$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function addIndex(Table $table, Index $index)$/;"	f
addIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addIndex($columns, $options = array())$/;"	f
addLongOption	.\thinkphp\library\think\console\Input.php	/^    private function addLongOption($name, $value)$/;"	f
addMorphs	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addMorphs($name, $indexName = null)$/;"	f
addNamespace	.\thinkphp\library\think\Loader.php	/^    public static function addNamespace($namespace, $path = '')$/;"	f
addNamespaceAlias	.\thinkphp\library\think\Loader.php	/^    public static function addNamespaceAlias($namespace, $original = '')$/;"	f
addNullableMorphs	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addNullableMorphs($name, $indexName = null)$/;"	f
addOption	.\thinkphp\library\think\console\Command.php	/^    public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
addOption	.\thinkphp\library\think\console\input\Definition.php	/^    public function addOption(Option $option)$/;"	f
addOptions	.\thinkphp\library\think\console\input\Definition.php	/^    public function addOptions($options = [])$/;"	f
addOutput	.\thinkphp\library\think\Process.php	/^    public function addOutput($line)$/;"	f
addPsr0	.\thinkphp\library\think\Loader.php	/^    private static function addPsr0($prefix, $paths, $prepend = false)$/;"	f
addPsr4	.\thinkphp\library\think\Loader.php	/^    private static function addPsr4($prefix, $paths, $prepend = false)$/;"	f
addPsr4	.\vendor\composer\ClassLoader.php	/^    public function addPsr4($prefix, $paths, $prepend = false)$/;"	f
addShortOption	.\thinkphp\library\think\console\Input.php	/^    private function addShortOption($shortcut, $value)$/;"	f
addSoftDelete	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addSoftDelete()$/;"	f
addTimestamps	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addTimestamps($createdAtColumnName = 'created_at', $updatedAtColumnName = 'updated_at')$/;"	f
addTimestamps	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addTimestamps($createdAtColumnName = 'create_time', $updatedAtColumnName = 'update_time')$/;"	f
addUsage	.\thinkphp\library\think\console\Command.php	/^    public function addUsage($usage)$/;"	f
address	.\thinkphp\library\think\log\driver\Socket.php	/^        $address = '\/' . $client_id; \/\/将client_id作为地址， server端通过地址判断将日志发布给谁$/;"	v
adv	.\thinkphp\library\think\Request.php	/^    public function ip($type = 0, $adv = true)$/;"	v
after	.\thinkphp\library\think\Validate.php	/^    protected function after($value, $rule)$/;"	f
after	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $after = $newColumn->getAfter() ? ' AFTER ' . $this->quoteColumnName($newColumn->getAfter()) : '';$/;"	v
after	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->after = $after;$/;"	v
after	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $after;$/;"	v
afterDelete	.\thinkphp\library\think\Model.php	/^    protected static function afterDelete($callback, $override = false)$/;"	f
afterInsert	.\thinkphp\library\think\Model.php	/^    protected static function afterInsert($callback, $override = false)$/;"	f
afterUpdate	.\thinkphp\library\think\Model.php	/^    protected static function afterUpdate($callback, $override = false)$/;"	f
afterWrite	.\thinkphp\library\think\Model.php	/^    protected static function afterWrite($callback, $override = false)$/;"	f
aggregate	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function aggregate($options, $extra)$/;"	f
aggregate	.\vendor\topthink\think-mongo\src\Query.php	/^    public function aggregate($aggregate, $field)$/;"	f
alg	.\extend\php-jwt-master\src\JWT.php	/^    public static function encode($payload, $key, $alg = 'HS256', $keyId = null, $head = null)$/;"	v
alg	.\extend\php-jwt-master\src\JWT.php	/^    public static function sign($msg, $key, $alg = 'HS256')$/;"	v
alg	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function encode($payload, $key, $alg = 'HS256', $keyId = null, $head = null)$/;"	v
alg	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function sign($msg, $key, $alg = 'HS256')$/;"	v
alias	.\thinkphp\library\think\Model.php	/^    public function morphTo($morph = null, $alias = [])$/;"	v
alias	.\thinkphp\library\think\Route.php	/^        $alias = array_shift($array);$/;"	v
alias	.\thinkphp\library\think\Route.php	/^    public static function alias($rule = null, $route = '', $option = [])$/;"	f
alias	.\thinkphp\library\think\Url.php	/^            $alias      = Route::rules('alias');$/;"	v
alias	.\thinkphp\library\think\Validate.php	/^    protected $alias = [$/;"	v
alias	.\thinkphp\library\think\db\Query.php	/^                        $alias = $join;$/;"	v
alias	.\thinkphp\library\think\db\Query.php	/^            $alias = $options['alias'][$table];$/;"	v
alias	.\thinkphp\library\think\db\Query.php	/^            $alias = array_shift($join);$/;"	v
alias	.\thinkphp\library\think\db\Query.php	/^    public function alias($alias)$/;"	f
alias	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $alias        = Loader::parseName(basename(str_replace('\\\\', '\/', $this->model)));$/;"	v
alias	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->alias     = $alias;$/;"	v
alias	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->alias = $alias;$/;"	v
alias	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected $alias;$/;"	v
alias	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function __construct(Model $parent, $morphType, $morphKey, $alias = [], $relation = null)$/;"	v
alias	.\thinkphp\library\think\template\TagLib.php	/^                    $alias = $lib . $name != $node['name'] ? ($lib ? strstr($node['name'], $lib) : $node['name']) : '';$/;"	v
alias	.\thinkphp\library\think\template\TagLib.php	/^                $alias = $lib . $name != $matches[1] ? ($lib ? strstr($matches[1], $lib) : $matches[1]) : '';$/;"	v
alias	.\thinkphp\library\think\template\TagLib.php	/^    public function parseAttr($str, $name, $alias = '')$/;"	v
aliasOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $aliasOptions = $this->getAliasedOptions();$/;"	v
aliasedClassName	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $aliasedClassName = null;$/;"	v
aliases	.\thinkphp\library\think\console\Command.php	/^        $this->aliases = $aliases;$/;"	v
aliases	.\thinkphp\library\think\console\Command.php	/^    private $aliases = [];$/;"	v
aliases	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private $aliases;$/;"	v
all	.\thinkphp\library\think\Collection.php	/^    public function all()$/;"	f
all	.\thinkphp\library\think\Console.php	/^    public function all($namespace = null)$/;"	f
all	.\thinkphp\library\think\Db.php	/^ * @method Query union(mixed $union, boolean $all = false) static UNION查询$/;"	v
all	.\thinkphp\library\think\Model.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	f
all	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $all = $this->console->all($this->namespace ? $this->console->findNamespace($this->namespace) : null);$/;"	v
all	.\thinkphp\library\think\db\Query.php	/^    public function union($union, $all = false)$/;"	v
all	.\thinkphp\library\think\model\Merge.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	f
allCommands	.\thinkphp\library\think\Console.php	/^        $allCommands = array_keys($this->commands);$/;"	v
allNamespaces	.\thinkphp\library\think\Console.php	/^        $allNamespaces = $this->getNamespaces();$/;"	v
allowField	.\thinkphp\library\think\Model.php	/^    public function allowField($field)$/;"	f
allowFields	.\thinkphp\library\think\Model.php	/^            $allowFields = $this->checkAllowField(array_merge($this->auto, $this->insert));$/;"	v
allowFields	.\thinkphp\library\think\Model.php	/^            $allowFields = $this->checkAllowField(array_merge($this->auto, $this->update));$/;"	v
allowForceClientIds	.\thinkphp\library\think\log\driver\Socket.php	/^            $this->allowForceClientIds = $this->config['force_client_ids'];$/;"	v
allowForceClientIds	.\thinkphp\library\think\log\driver\Socket.php	/^            $this->allowForceClientIds = array_intersect($allow_client_ids, $this->config['force_client_ids']);$/;"	v
allowForceClientIds	.\thinkphp\library\think\log\driver\Socket.php	/^    protected $allowForceClientIds = []; \/\/配置强制推送且被授权的client_id$/;"	v
allowIp	.\thinkphp\library\think\Validate.php	/^    protected function allowIp($value, $rule)$/;"	f
allowLangList	.\thinkphp\library\think\Lang.php	/^    protected static $allowLangList = [];$/;"	v
allow_client_ids	.\thinkphp\library\think\log\driver\Socket.php	/^        $allow_client_ids = $this->config['allow_client_ids'];$/;"	v
allowed_algs	.\extend\php-jwt-master\src\JWT.php	/^    public static function decode($jwt, $key, array $allowed_algs = array())$/;"	v
allowed_algs	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function decode($jwt, $key, array $allowed_algs = array())$/;"	v
alternatives	.\thinkphp\library\think\Console.php	/^        $alternatives    = [];$/;"	v
alternatives	.\thinkphp\library\think\Console.php	/^        $alternatives = array_filter($alternatives, function ($lev) use ($threshold) {$/;"	v
anchor	.\thinkphp\library\think\Url.php	/^                $anchor = $info['fragment'];$/;"	v
anchor	.\thinkphp\library\think\Url.php	/^        $anchor = !empty($anchor) ? '#' . $anchor : '';$/;"	v
and	.\vendor\topthink\think-queue\src\queue\Job.php	/^     * Parse the job declaration into class and method.$/;"	c
answer	.\thinkphp\library\think\console\Output.php	/^        $answer = $ask->run();$/;"	v
answerIsTrue	.\thinkphp\library\think\console\output\question\Confirmation.php	/^            $answerIsTrue = (bool) preg_match($regex, $answer);$/;"	v
any	.\thinkphp\library\think\Route.php	/^    public static function any($rule, $route = '', $option = [], $pattern = [])$/;"	f
apart	.\thinkphp\library\think\log\driver\File.php	/^    protected function write($message, $destination, $apart = false)$/;"	v
apcuPrefix	.\vendor\composer\ClassLoader.php	/^        $this->apcuPrefix = function_exists('apcu_fetch') && ini_get('apc.enabled') ? $apcuPrefix : null;$/;"	v
apcuPrefix	.\vendor\composer\ClassLoader.php	/^    private $apcuPrefix;$/;"	v
apiCall	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected function apiCall($type, $url, $params = [])$/;"	f
app	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $app  = App::$namespace;$/;"	v
appDir	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                $appDir = !empty($composerExtra['app-path']) ? $composerExtra['app-path'] : 'application';$/;"	v
appDir	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^        $appDir = dirname($this->vendorDir);$/;"	v
appError	.\thinkphp\library\think\Error.php	/^    public static function appError($errno, $errstr, $errfile = '', $errline = 0)$/;"	f
appException	.\thinkphp\library\think\Error.php	/^    public static function appException($e)$/;"	f
appNamespace	.\thinkphp\library\think\console\command\Make.php	/^        $appNamespace = App::$namespace;$/;"	v
appPath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $appPath    = $this->normalizePath(realpath(APP_PATH));$/;"	v
appShutdown	.\thinkphp\library\think\Error.php	/^    public static function appShutdown()$/;"	f
append	.\thinkphp\library\think\Model.php	/^            $append = explode(',', $append);$/;"	v
append	.\thinkphp\library\think\Model.php	/^        $this->append = $override ? $append : array_merge($this->append, $append);$/;"	v
append	.\thinkphp\library\think\Model.php	/^    protected $append = [];$/;"	v
append	.\thinkphp\library\think\Model.php	/^    public function append($append = [], $override = false)$/;"	f
append	.\thinkphp\library\think\model\Collection.php	/^    public function append($append = [], $override = false)$/;"	f
appendRelationAttr	.\thinkphp\library\think\Model.php	/^    public function appendRelationAttr($relation, $append)$/;"	f
appendSuffix	.\thinkphp\library\think\Loader.php	/^    public static function parseClass($module, $layer, $name, $appendSuffix = false)$/;"	v
appends	.\thinkphp\library\think\Paginator.php	/^    public function appends($key, $value = null)$/;"	f
apply	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function apply($text)$/;"	f
applyCurrentStyle	.\thinkphp\library\think\console\output\Formatter.php	/^    private function applyCurrentStyle($text)$/;"	f
areOpen	.\thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function areOpen();$/;"	f
areOpen	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function areOpen()$/;"	f
areOpen	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function areOpen()$/;"	f
arg	.\thinkphp\library\think\console\Input.php	/^            $arg = $this->definition->getArgument($c - 1);$/;"	v
arg	.\thinkphp\library\think\console\Input.php	/^            $arg = $this->definition->getArgument($c);$/;"	v
arg	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^                        $arg = array_map(function ($value) {$/;"	v
args	.\thinkphp\library\think\App.php	/^        $args        = $constructor ? self::bindParams($constructor, $vars) : [];$/;"	v
args	.\thinkphp\library\think\App.php	/^        $args    = self::bindParams($reflect, $vars);$/;"	v
args	.\thinkphp\library\think\App.php	/^        $args = [];$/;"	v
args	.\thinkphp\library\think\App.php	/^        $args = self::bindParams($reflect, $vars);$/;"	v
args	.\thinkphp\library\think\Template.php	/^                $args = explode('=', $varArray[$i], 2);$/;"	v
args	.\thinkphp\library\think\log\driver\Socket.php	/^                $args = ['tabid' => null];$/;"	v
args	.\thinkphp\library\think\log\driver\Socket.php	/^        static $args = [];$/;"	v
args	.\vendor\topthink\think-helper\src\helper.php	/^        $args    = func_get_args();$/;"	v
args	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function writeCommand($command, $args = array())$/;"	v
arguments	.\thinkphp\library\think\console\Input.php	/^        $this->arguments  = [];$/;"	v
arguments	.\thinkphp\library\think\console\Input.php	/^    protected $arguments = [];$/;"	v
arguments	.\thinkphp\library\think\console\input\Definition.php	/^        $arguments = [];$/;"	v
arguments	.\thinkphp\library\think\console\input\Definition.php	/^        $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;$/;"	v
arguments	.\thinkphp\library\think\console\input\Definition.php	/^        $this->arguments          = [];$/;"	v
arguments	.\thinkphp\library\think\console\input\Definition.php	/^    private $arguments;$/;"	v
arguments	.\thinkphp\library\think\process\Builder.php	/^        $arguments = array_merge($this->prefix, $this->arguments);$/;"	v
arguments	.\thinkphp\library\think\process\Builder.php	/^        $this->arguments = $arguments;$/;"	v
arguments	.\thinkphp\library\think\process\Builder.php	/^    private $arguments;$/;"	v
arguments	.\thinkphp\library\think\process\Builder.php	/^    public function __construct(array $arguments = [])$/;"	v
arguments	.\thinkphp\library\think\process\Builder.php	/^    public static function create(array $arguments = [])$/;"	v
argv	.\thinkphp\library\think\console\Input.php	/^            $argv = $_SERVER['argv'];$/;"	v
arr	.\thinkphp\library\think\Model.php	/^                $arr = [];$/;"	v
arr	.\thinkphp\library\think\Request.php	/^                $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);$/;"	v
arr	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $arr = preg_split('\/(?=[A-Z])\/', $className);$/;"	v
array	.\thinkphp\library\think\Loader.php	/^        $array = explode('\\\\', str_replace(['\/', '.'], '\\\\', $name));$/;"	v
array	.\thinkphp\library\think\Model.php	/^            $array = $this->parseAttr($this->hidden, $hidden, false);$/;"	v
array	.\thinkphp\library\think\Model.php	/^            $array = $this->parseAttr($this->visible, $visible);$/;"	v
array	.\thinkphp\library\think\Model.php	/^            $array = [];$/;"	v
array	.\thinkphp\library\think\Model.php	/^        $array = [];$/;"	v
array	.\thinkphp\library\think\Request.php	/^            $array = [];$/;"	v
array	.\thinkphp\library\think\Request.php	/^            $array = explode(',', $val);$/;"	v
array	.\thinkphp\library\think\Route.php	/^                        $array  = parse_url($rule);$/;"	v
array	.\thinkphp\library\think\Route.php	/^                $array = explode('.', $rule);$/;"	v
array	.\thinkphp\library\think\Route.php	/^        $array  = explode('|', $url, 2);$/;"	v
array	.\thinkphp\library\think\Route.php	/^        $array  = explode('|', $url, 3);$/;"	v
array	.\thinkphp\library\think\Route.php	/^        $array = explode('|', $url);$/;"	v
array	.\thinkphp\library\think\Session.php	/^            $array = [];$/;"	v
array	.\thinkphp\library\think\Session.php	/^        $array = self::get($key);$/;"	v
array	.\thinkphp\library\think\Template.php	/^                            $array = preg_split('\/([!=]={1,2}|(?<!-)[><]={0,1})\/', substr($str, 0, $pos), 2, PREG_SPLIT_DELIM_CAPTURE);$/;"	v
array	.\thinkphp\library\think\Template.php	/^                    $array = $this->parseAttr($match[0]);$/;"	v
array	.\thinkphp\library\think\Template.php	/^            $array = $this->parseAttr($matches[0]);$/;"	v
array	.\thinkphp\library\think\Template.php	/^        $array    = explode(',', $templateName);$/;"	v
array	.\thinkphp\library\think\Template.php	/^        $array  = $blocks  = $baseBlocks  = [];$/;"	v
array	.\thinkphp\library\think\Template.php	/^        $array = [];$/;"	v
array	.\thinkphp\library\think\Validate.php	/^                $array = array_pad([], 3, '');$/;"	v
array	.\thinkphp\library\think\Validate.php	/^                $array = array_pad(explode(',', $rule), 3, '');$/;"	v
array	.\thinkphp\library\think\Validate.php	/^            $array  = [];$/;"	v
array	.\thinkphp\library\think\db\Builder.php	/^                    $array = [];$/;"	v
array	.\thinkphp\library\think\db\Builder.php	/^                    $array = explode('&', $field);$/;"	v
array	.\thinkphp\library\think\db\Builder.php	/^                    $array = explode('|', $field);$/;"	v
array	.\thinkphp\library\think\db\Builder.php	/^            $array = [];$/;"	v
array	.\thinkphp\library\think\db\Builder.php	/^        $array = [];$/;"	v
array	.\thinkphp\library\think\db\Query.php	/^            $array = array_chunk($dataSet, $limit, true);$/;"	v
array	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^        $array = [];$/;"	v
array	.\thinkphp\library\think\model\Merge.php	/^        $array  = [];$/;"	v
array	.\thinkphp\library\think\response\Xml.php	/^            $array = [];$/;"	v
array	.\thinkphp\library\think\template\TagLib.php	/^                        $array = (array) $val['alias'];$/;"	v
array	.\thinkphp\library\think\template\TagLib.php	/^                $array = (array) $val['alias'];$/;"	v
array	.\thinkphp\library\think\template\taglib\Cx.php	/^        $array = explode(',', $file);$/;"	v
array	.\thinkphp\library\traits\model\SoftDelete.php	/^            $array = explode('.', $field);$/;"	v
array	.\vendor\topthink\think-mongo\src\Builder.php	/^                        $array = explode('&', $field);$/;"	v
array	.\vendor\topthink\think-mongo\src\Builder.php	/^                        $array = explode('|', $field);$/;"	v
ask	.\thinkphp\library\think\console\Output.php	/^        $ask    = new Ask($input, $this, $question);$/;"	v
ask	.\thinkphp\library\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	f
askHidden	.\thinkphp\library\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	f
askQuestion	.\thinkphp\library\think\console\Output.php	/^    protected function askQuestion(Input $input, Question $question)$/;"	f
assign	.\thinkphp\library\think\Controller.php	/^    protected function assign($name, $value = '')$/;"	f
assign	.\thinkphp\library\think\Template.php	/^    public function assign($name, $value = '')$/;"	f
assign	.\thinkphp\library\think\View.php	/^    public function assign($name, $value = '')$/;"	f
assign	.\thinkphp\library\think\response\View.php	/^    public function assign($name, $value = '')$/;"	f
associate	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function associate($model)$/;"	f
associate	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function associate($model, $type = '')$/;"	f
attach	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function attach($data, $pivot = [])$/;"	f
attachQuery	.\thinkphp\library\think\model\Merge.php	/^    protected static function attachQuery($query)$/;"	f
attempt	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function pushExpiredJobsOntoNewQueue($to, $jobs, $attempt = true)$/;"	v
attempt	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function migrateExpiredJobs($from, $to, $attempt = true)$/;"	v
attempts	.\thinkphp\library\think\console\output\Ask.php	/^        $attempts = $this->question->getMaxAttempts();$/;"	v
attempts	.\thinkphp\library\think\console\output\Question.php	/^        $this->attempts = $attempts;$/;"	v
attempts	.\thinkphp\library\think\console\output\Question.php	/^    private $attempts;$/;"	v
attempts	.\vendor\topthink\think-queue\src\queue\Job.php	/^    abstract public function attempts();$/;"	f
attempts	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function pushToDatabase($delay, $queue, $payload, $attempts = 0)$/;"	v
attempts	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^                $attempts = json_decode($job, true)['attempts'];$/;"	v
attempts	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function pushRaw($delay, $queue, $payload, $attempts = 0)$/;"	v
attempts	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function attempts()$/;"	f
attempts	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function attempts()$/;"	f
attempts	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^    public function attempts()$/;"	f
attempts	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function attempts()$/;"	f
attr	.\thinkphp\library\think\db\Query.php	/^                    $attr         = isset($alias) ? $alias . '.' . $key : $key;$/;"	v
attr	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\HasMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\HasOne.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\MorphTo.php	/^            $attr = Loader::parseName($relation);$/;"	v
attr	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $attr = explode(',', $attr);$/;"	v
attr	.\thinkphp\library\think\response\Xml.php	/^                $id && $attr = " {$id}=\\"{$key}\\"";$/;"	v
attr	.\thinkphp\library\think\response\Xml.php	/^            $attr = implode(' ', $array);$/;"	v
attr	.\thinkphp\library\think\response\Xml.php	/^        $attr = empty($attr) ? '' : " {$attr}";$/;"	v
attr	.\thinkphp\library\think\response\Xml.php	/^        $attr = trim($attr);$/;"	v
attrCase	.\thinkphp\library\think\db\Connection.php	/^            $this->attrCase = $params[PDO::ATTR_CASE];$/;"	v
attrCase	.\thinkphp\library\think\db\Connection.php	/^    protected $attrCase = PDO::CASE_LOWER;$/;"	v
attrs	.\thinkphp\library\think\template\TagLib.php	/^                    $attrs  = $this->parseAttr($node['begin'][0], $name, $alias);$/;"	v
attrs	.\thinkphp\library\think\template\TagLib.php	/^                $attrs  = $this->parseAttr($matches[0], $name, $alias);$/;"	v
authcode	.\vendor\topthink\think-captcha\src\Captcha.php	/^    private function authcode($str)$/;"	f
auto	.\thinkphp\library\think\Model.php	/^                $auto = true;$/;"	v
auto	.\thinkphp\library\think\Model.php	/^        $this->auto = $fields;$/;"	v
auto	.\thinkphp\library\think\Model.php	/^    protected $auto = [];$/;"	v
auto	.\thinkphp\library\think\Model.php	/^    public function auto($fields)$/;"	f
auto	.\thinkphp\library\think\Route.php	/^    public static function auto($route)$/;"	f
auto	.\thinkphp\library\think\cache\driver\File.php	/^    protected function getCacheKey($name, $auto = false)$/;"	v
autoBuildVar	.\thinkphp\library\think\template\TagLib.php	/^    public function autoBuildVar(&$name)$/;"	f
autoCompleteData	.\thinkphp\library\think\Model.php	/^    protected function autoCompleteData($auto = [])$/;"	f
autoExit	.\thinkphp\library\think\Console.php	/^        $this->autoExit = (bool) $boolean;$/;"	v
autoExit	.\thinkphp\library\think\Console.php	/^    private $autoExit = true;$/;"	v
autoRelationUpdate	.\thinkphp\library\think\Model.php	/^    protected function autoRelationUpdate($relation)$/;"	f
autoWriteTimestamp	.\thinkphp\library\think\Model.php	/^            $this->autoWriteTimestamp = $this->getQuery()->getConfig('auto_timestamp');$/;"	v
autoWriteTimestamp	.\thinkphp\library\think\Model.php	/^        $this->autoWriteTimestamp = $auto;$/;"	v
autoWriteTimestamp	.\thinkphp\library\think\Model.php	/^    protected $autoWriteTimestamp;$/;"	v
autoWriteTimestamp	.\thinkphp\library\think\Model.php	/^    protected function autoWriteTimestamp($name)$/;"	f
autoWriteTimestamp	.\thinkphp\library\think\model\Pivot.php	/^    protected $autoWriteTimestamp = false;$/;"	v
autocomplete	.\thinkphp\library\think\console\output\Ask.php	/^        $autocomplete = $this->question->getAutocompleterValues();$/;"	v
autocomplete	.\thinkphp\library\think\console\output\Ask.php	/^    private function autocomplete($inputStream)$/;"	f
autocompleterValues	.\thinkphp\library\think\console\output\Question.php	/^        $this->autocompleterValues = $values;$/;"	v
autocompleterValues	.\thinkphp\library\think\console\output\Question.php	/^    private $autocompleterValues;$/;"	v
autoload	.\thinkphp\library\think\Loader.php	/^    public static function autoload($class)$/;"	f
available	.\thinkphp\library\think\App.php	/^                    $available = true;$/;"	v
available	.\thinkphp\library\think\App.php	/^                $available = true;$/;"	v
available	.\thinkphp\library\think\App.php	/^            $available = false;$/;"	v
availableBackgroundColors	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableBackgroundColors = [$/;"	v
availableForegroundColors	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableForegroundColors = [$/;"	v
availableMigrations	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $availableMigrations = array_filter($versions, function ($version) use ($dateString, &$earlierVersion) {$/;"	v
availableOptions	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableOptions = [$/;"	v
avg	.\thinkphp\library\think\db\Query.php	/^    public function avg($field)$/;"	f
avg	.\vendor\topthink\think-mongo\src\Query.php	/^    public function avg($field)$/;"	f
awaitData	.\vendor\topthink\think-mongo\src\Query.php	/^    public function awaitData($awaitData)$/;"	f
b	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $b   = $py - $A * sin($w * $px + $f) - $this->imageH \/ 2;$/;"	v
b	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $b = mt_rand(-$this->imageH \/ 4, $this->imageH \/ 4); \/\/ Y轴方向偏移量$/;"	v
background	.\thinkphp\library\think\console\output\formatter\Style.php	/^            $this->background = null;$/;"	v
background	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $this->background = static::$availableBackgroundColors[$color];$/;"	v
background	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private $background;$/;"	v
background	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	v
base	.\thinkphp\library\think\View.php	/^        $base    = $request->root();$/;"	v
base	.\thinkphp\library\think\debug\Console.php	/^        $base = [$/;"	v
base	.\thinkphp\library\think\debug\Html.php	/^        $base = [$/;"	v
base	.\thinkphp\library\traits\model\SoftDelete.php	/^    protected function base($query)$/;"	f
baseBlocks	.\thinkphp\library\think\Template.php	/^                $baseBlocks = $this->parseBlock($template, true);$/;"	v
baseDir	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = 'APP_PATH';$/;"	v
baseDir	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = 'EXTEND_PATH';$/;"	v
baseDir	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = 'LIB_PATH';$/;"	v
baseDir	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = 'ROOT_PATH';$/;"	v
baseDir	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $baseDir    = '';$/;"	v
baseDir	.\vendor\composer\autoload_classmap.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	.\vendor\composer\autoload_files.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	.\vendor\composer\autoload_namespaces.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	.\vendor\composer\autoload_psr4.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseFile	.\thinkphp\library\think\Request.php	/^            $this->baseFile = $file;$/;"	v
baseFile	.\thinkphp\library\think\Request.php	/^            $this->baseFile = $url;$/;"	v
baseFile	.\thinkphp\library\think\Request.php	/^    protected $baseFile;$/;"	v
baseFile	.\thinkphp\library\think\Request.php	/^    public function baseFile($file = null)$/;"	f
baseQuery	.\thinkphp\library\think\model\Relation.php	/^                $this->baseQuery = false;$/;"	v
baseQuery	.\thinkphp\library\think\model\Relation.php	/^    protected $baseQuery;$/;"	v
baseQuery	.\thinkphp\library\think\model\Relation.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\HasMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\HasMany.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\HasOne.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\HasOne.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected function baseQuery()$/;"	f
baseQuery	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $this->baseQuery = true;$/;"	v
baseReplace	.\thinkphp\library\think\View.php	/^        $baseReplace = [$/;"	v
baseType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $baseType = $matches[1];$/;"	v
baseUrl	.\thinkphp\helper.php	/^    function import($class, $baseUrl = '', $ext = EXT)$/;"	v
baseUrl	.\thinkphp\library\think\Loader.php	/^                $baseUrl = APP_PATH . $name . DS;$/;"	v
baseUrl	.\thinkphp\library\think\Loader.php	/^                $baseUrl = App::$modulePath;$/;"	v
baseUrl	.\thinkphp\library\think\Loader.php	/^                $baseUrl = EXTEND_PATH . $name . DS;$/;"	v
baseUrl	.\thinkphp\library\think\Loader.php	/^                $baseUrl = self::$prefixDirsPsr4[$name . '\\\\'];$/;"	v
baseUrl	.\thinkphp\library\think\Loader.php	/^    public static function import($class, $baseUrl = '', $ext = EXT)$/;"	v
baseUrl	.\thinkphp\library\think\Request.php	/^            $this->baseUrl = $url;$/;"	v
baseUrl	.\thinkphp\library\think\Request.php	/^            $this->baseUrl = strpos($str, '?') ? strstr($str, '?', true) : $str;$/;"	v
baseUrl	.\thinkphp\library\think\Request.php	/^    protected $baseUrl;$/;"	v
baseUrl	.\thinkphp\library\think\Request.php	/^    public function baseUrl($url = null)$/;"	f
batch	.\thinkphp\library\think\Model.php	/^            $batch = is_null($batch) ? $this->batchValidate : $batch;$/;"	v
batch	.\thinkphp\library\think\Validate.php	/^        $this->batch = $batch;$/;"	v
batch	.\thinkphp\library\think\Validate.php	/^    protected $batch = false;$/;"	v
batch	.\thinkphp\library\think\Validate.php	/^    public function batch($batch = true)$/;"	f
batchQuery	.\thinkphp\library\think\db\Connection.php	/^    public function batchQuery($sqlArray = [], $bind = [], Query $query = null)$/;"	f
batchQuery	.\thinkphp\library\think\db\Query.php	/^    public function batchQuery($sql = [], $bind = [])$/;"	f
batchSize	.\vendor\topthink\think-mongo\src\Query.php	/^    public function batchSize($batchSize)$/;"	f
batchValidate	.\thinkphp\library\think\Controller.php	/^    protected $batchValidate = false;$/;"	v
batchValidate	.\thinkphp\library\think\Model.php	/^        $this->batchValidate = $batch;$/;"	v
batchValidate	.\thinkphp\library\think\Model.php	/^    protected $batchValidate = false;$/;"	v
before	.\thinkphp\library\think\Validate.php	/^    protected function before($value, $rule)$/;"	f
beforeAction	.\thinkphp\library\think\Controller.php	/^    protected function beforeAction($method, $options = [])$/;"	f
beforeActionList	.\thinkphp\library\think\Controller.php	/^    protected $beforeActionList = [];$/;"	v
beforeDelete	.\thinkphp\library\think\Model.php	/^    protected static function beforeDelete($callback, $override = false)$/;"	f
beforeInsert	.\thinkphp\library\think\Model.php	/^    protected static function beforeInsert($callback, $override = false)$/;"	f
beforeUpdate	.\thinkphp\library\think\Model.php	/^    protected static function beforeUpdate($callback, $override = false)$/;"	f
beforeWrite	.\thinkphp\library\think\Model.php	/^    protected static function beforeWrite($callback, $override = false)$/;"	f
begin	.\thinkphp\library\think\Template.php	/^            $begin  = $this->config['taglib_begin'];$/;"	v
begin	.\thinkphp\library\think\Template.php	/^            $begin = $this->config['tpl_begin'];$/;"	v
begin	.\thinkphp\library\think\template\TagLib.php	/^                                $begin = array_pop($beginArray);$/;"	v
begin	.\thinkphp\library\think\template\TagLib.php	/^                            $begin = end($beginArray);$/;"	v
begin	.\thinkphp\library\think\template\TagLib.php	/^                    $begin = array_pop($beginArray);$/;"	v
begin	.\thinkphp\library\think\template\TagLib.php	/^        $begin   = $this->tpl->config('taglib_begin');$/;"	v
begin	.\vendor\topthink\think-helper\src\Time.php	/^        $begin = mktime(0, 0, 0, date('m') - 1, 1, date('Y'));$/;"	v
beginArray	.\thinkphp\library\think\template\TagLib.php	/^                $beginArray = [];$/;"	v
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function beginTransaction();$/;"	f
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function beginTransaction()$/;"	f
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function beginTransaction()$/;"	f
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function beginTransaction()$/;"	f
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function beginTransaction()$/;"	f
beginTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function beginTransaction()$/;"	f
behavior	.\thinkphp\library\think\Validate.php	/^    protected function behavior($value, $rule, $data)$/;"	f
belongsTo	.\thinkphp\library\think\Model.php	/^    public function belongsTo($model, $foreignKey = '', $localKey = '', $alias = [], $joinType = 'INNER')$/;"	f
belongsToMany	.\thinkphp\library\think\Model.php	/^    public function belongsToMany($model, $table = '', $foreignKey = '', $localKey = '')$/;"	f
belongsToManyQuery	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery($foreignKey, $localKey, $condition = [])$/;"	f
between	.\thinkphp\library\think\Validate.php	/^    protected function between($value, $rule)$/;"	f
between	.\thinkphp\library\think\db\Builder.php	/^                $between = $this->parseValue($data[0], $field) . ' AND ' . $this->parseValue($data[1], $field);$/;"	v
between	.\thinkphp\library\think\db\Builder.php	/^                $between = ':' . $bindKey1 . ' AND :' . $bindKey2;$/;"	v
bgImage	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $bgImage = @imagecreatefromjpeg($gb);$/;"	v
bgs	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $bgs = [];$/;"	v
bigInteger	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function bigInteger($name)$/;"	f
binary	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function binary($name)$/;"	f
bind	.\thinkphp\library\think\App.php	/^            $bind      = Request::instance()->$name;$/;"	v
bind	.\thinkphp\library\think\App.php	/^            $bind      = Route::getBind('module');$/;"	v
bind	.\thinkphp\library\think\Db.php	/^ * @method integer execute(string $sql, array $bind = [], boolean $fetch = false, boolean $getLastInsID = false, string $sequence = null) static SQL执行$/;"	v
bind	.\thinkphp\library\think\Db.php	/^ * @method mixed query(string $sql, array $bind = [], boolean $master = false, bool $pdo = false) static SQL查询$/;"	v
bind	.\thinkphp\library\think\Request.php	/^            $this->bind = array_merge($this->bind, $name);$/;"	v
bind	.\thinkphp\library\think\Request.php	/^    protected $bind = [];$/;"	v
bind	.\thinkphp\library\think\Request.php	/^    public function bind($name, $obj = null)$/;"	f
bind	.\thinkphp\library\think\Route.php	/^            $bind = [];$/;"	v
bind	.\thinkphp\library\think\Route.php	/^            $bind = self::$bind[$type];$/;"	v
bind	.\thinkphp\library\think\Route.php	/^            $bind = str_replace('\/', $depr, self::$bind['module']);$/;"	v
bind	.\thinkphp\library\think\Route.php	/^        $bind = implode('|', $array);$/;"	v
bind	.\thinkphp\library\think\Route.php	/^    private static $bind = [];$/;"	v
bind	.\thinkphp\library\think\Route.php	/^    public static function bind($bind, $type = 'module')$/;"	f
bind	.\thinkphp\library\think\Url.php	/^                $bind = Route::getBind($type);$/;"	v
bind	.\thinkphp\library\think\console\Input.php	/^    public function bind(Definition $definition)$/;"	f
bind	.\thinkphp\library\think\db\Builder.php	/^                    $bind  = [];$/;"	v
bind	.\thinkphp\library\think\db\Builder.php	/^                $bind = [$/;"	v
bind	.\thinkphp\library\think\db\Builder.php	/^        $bind = $this->query->getFieldsBind($options['table']);$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^            $this->bind = $bind;$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    protected $bind = [];$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    protected function bindValue(array $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    public function batchQuery($sqlArray = [], $bind = [], Query $query = null)$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    public function execute($sql, $bind = [], Query $query = null)$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    public function getRealSql($sql, array $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Connection.php	/^    public function query($sql, $bind = [], $master = false, $pdo = false)$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind    = $this->bind;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind   = $type   = [];$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind = $this->getBind();$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind = PDO::PARAM_BOOL;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind = PDO::PARAM_INT;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $bind = PDO::PARAM_STR;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^            $this->bind = array_merge($this->bind, $key);$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^        $bind       = $this->bind;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^        $bind  = [];$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^        $bind = $this->bind;$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^        $bind = $this->getBind();$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^        $this->bind = [];$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    protected $bind = [];$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    protected function getCacheKey($value, $options, $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function batchQuery($sql = [], $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function bind($key, $value = false, $type = PDO::PARAM_STR)$/;"	f
bind	.\thinkphp\library\think\db\Query.php	/^    public function execute($sql, $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function fieldRaw($field, array $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function orderRaw($field, array $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function query($sql, $bind = [], $master = false, $class = false)$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function whereOrRaw($where, $bind = [])$/;"	v
bind	.\thinkphp\library\think\db\Query.php	/^    public function whereRaw($where, $bind = [], $logic = 'AND')$/;"	v
bind	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function bind($attr)$/;"	f
bindAttr	.\thinkphp\library\think\Model.php	/^                            $bindAttr = $modelRelation->getBindAttr();$/;"	v
bindAttr	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $this->bindAttr = $attr;$/;"	v
bindAttr	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected $bindAttr = [];$/;"	v
bindAttr	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected function bindAttr($model, &$result, $bindAttr)$/;"	f
bindCheck	.\thinkphp\library\think\Url.php	/^    protected static $bindCheck;$/;"	v
bindKey	.\thinkphp\library\think\db\Builder.php	/^                            $bindKey = $bindName . '_in_' . $i;$/;"	v
bindKey	.\thinkphp\library\think\db\Builder.php	/^                            $bindKey = $bindName . '_in_' . uniqid() . '_' . $i;$/;"	v
bindKey1	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey1 = $bindName . '_between_1' . uniqid();$/;"	v
bindKey1	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey1 = $bindName . '_between_1';$/;"	v
bindKey1	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey1 => [$data[0], $bindType],$/;"	v
bindKey2	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey2 = $bindName . '_between_2' . uniqid();$/;"	v
bindKey2	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey2 = $bindName . '_between_2';$/;"	v
bindKey2	.\thinkphp\library\think\db\Builder.php	/^                    $bindKey2 => [$data[1], $bindType],$/;"	v
bindModule	.\thinkphp\library\think\Url.php	/^                    $bindModule = $domains[$domain]['[bind]'][0];$/;"	v
bindName	.\thinkphp\library\think\db\Builder.php	/^                $bindName = 'where_' . str_replace('.', '_', $field) . '_' . $k;$/;"	v
bindName	.\thinkphp\library\think\db\Builder.php	/^            $bindName = md5($bindName);$/;"	v
bindName	.\thinkphp\library\think\db\Builder.php	/^        $bindName = $bindName ?: $key;$/;"	v
bindName	.\thinkphp\library\think\db\Builder.php	/^        $bindName = $bindName ?: 'where_' . $rule . '_' . str_replace(['.', '-'], '_', $field);$/;"	v
bindParam	.\thinkphp\library\think\db\Connection.php	/^    protected function bindParam($bind)$/;"	f
bindParams	.\thinkphp\library\think\App.php	/^    private static function bindParams($reflect, $vars = [])$/;"	f
bindToClass	.\thinkphp\library\think\Route.php	/^    public static function bindToClass($url, $class, $depr = '\/')$/;"	f
bindToController	.\thinkphp\library\think\Route.php	/^    public static function bindToController($url, $controller, $depr = '\/')$/;"	f
bindToModule	.\thinkphp\library\think\Route.php	/^    public static function bindToModule($url, $controller, $depr = '\/')$/;"	f
bindToNamespace	.\thinkphp\library\think\Route.php	/^    public static function bindToNamespace($url, $namespace, $depr = '\/')$/;"	f
bindType	.\thinkphp\library\think\db\Builder.php	/^        $bindType = isset($binds[$field]) ? $binds[$field] : PDO::PARAM_STR;$/;"	v
bindValue	.\thinkphp\library\think\db\Connection.php	/^    protected function bindValue(array $bind = [])$/;"	f
binds	.\thinkphp\library\think\db\Builder.php	/^            $binds    = $this->query->getFieldsBind($options['table']);$/;"	v
binds	.\thinkphp\library\think\db\Builder.php	/^        $binds    = $this->query->getFieldsBind($options['table']);$/;"	v
block	.\thinkphp\library\think\console\Output.php	/^    protected function block($style, $message)$/;"	f
block	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $block = [$/;"	v
blockCompare	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function blockCompare($GlobalBlock, $LocalBlock, $Len)$/;"	f
blocked	.\thinkphp\library\think\process\pipes\Pipes.php	/^        $this->blocked = false;$/;"	v
blocked	.\thinkphp\library\think\process\pipes\Pipes.php	/^    private $blocked = true;$/;"	v
blocks	.\thinkphp\library\think\Template.php	/^                    $blocks = array_merge($blocks, $this->parseBlock($template));$/;"	v
boolean	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function boolean($name)$/;"	f
boot	.\thinkphp\library\think\Session.php	/^    public static function boot()$/;"	f
break	.\thinkphp\library\think\template\TagLib.php	/^            $break = '<!--###break###--!>';$/;"	v
buffer	.\thinkphp\library\think\console\output\driver\Buffer.php	/^        $this->buffer = '';$/;"	v
buffer	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    private $buffer = '';$/;"	v
buffer	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $buffer = array();$/;"	v
buffer	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $buffer = array();$/;"	v
build	.\thinkphp\library\think\Build.php	/^    public static function run(array $build = [], $namespace = 'app', $suffix = false)$/;"	v
build	.\thinkphp\library\think\Url.php	/^    public static function build($url = '', $vars = '', $suffix = true, $domain = false)$/;"	f
build	.\thinkphp\library\think\console\command\Build.php	/^            $build = include $input->getOption('config');$/;"	v
build	.\thinkphp\library\think\console\command\Build.php	/^            $build = include APP_PATH . 'build.php';$/;"	v
buildCacheContent	.\thinkphp\library\think\console\command\optimize\Config.php	/^    protected function buildCacheContent($module)$/;"	f
buildCallback	.\thinkphp\library\think\Process.php	/^    protected function buildCallback($callback)$/;"	f
buildClass	.\thinkphp\library\think\console\command\Make.php	/^    protected function buildClass($name)$/;"	f
buildClosure	.\thinkphp\library\think\console\command\optimize\Route.php	/^    protected function buildClosure(&$value)$/;"	f
buildCommon	.\thinkphp\library\think\Build.php	/^    protected static function buildCommon($module)$/;"	f
buildConnector	.\vendor\topthink\think-queue\src\Queue.php	/^    private static function buildConnector()$/;"	f
buildDataBaseSchema	.\thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function buildDataBaseSchema($tables, $db, $config)$/;"	f
buildDir	.\thinkphp\library\think\Build.php	/^    protected static function buildDir($list)$/;"	f
buildFile	.\thinkphp\library\think\Build.php	/^    protected static function buildFile($list)$/;"	f
buildFragment	.\thinkphp\library\think\Paginator.php	/^    protected function buildFragment()$/;"	f
buildHello	.\thinkphp\library\think\Build.php	/^    protected static function buildHello($module, $namespace, $suffix = false)$/;"	f
buildModelSchema	.\thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function buildModelSchema($class)$/;"	f
buildNewQuery	.\thinkphp\library\think\Model.php	/^    public function db($useBaseQuery = true, $buildNewQuery = true)$/;"	v
buildQuery	.\thinkphp\library\think\Model.php	/^    protected function buildQuery()$/;"	f
buildQuery	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function buildQuery()$/;"	f
buildRouteCache	.\thinkphp\library\think\console\command\optimize\Route.php	/^    protected function buildRouteCache()$/;"	f
buildSaveName	.\thinkphp\library\think\File.php	/^    protected function buildSaveName($savename)$/;"	f
buildSql	.\thinkphp\library\think\db\Query.php	/^    public function buildSql($sub = true)$/;"	f
buildUrl	.\vendor\topthink\think-mongo\src\Connection.php	/^    private function buildUrl()$/;"	f
buildWhere	.\thinkphp\library\think\db\Builder.php	/^    public function buildWhere($where, $options)$/;"	f
builder	.\thinkphp\library\think\db\Connection.php	/^    protected $builder;$/;"	v
builder	.\thinkphp\library\think\db\Query.php	/^        $this->builder = new $class($this->connection, $this);$/;"	v
builder	.\thinkphp\library\think\db\Query.php	/^    protected $builder;$/;"	v
builder	.\thinkphp\library\think\db\connector\Mysql.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Mysql';$/;"	v
builder	.\thinkphp\library\think\db\connector\Pgsql.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Pgsql';$/;"	v
builder	.\thinkphp\library\think\db\connector\Sqlite.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Sqlite';$/;"	v
builder	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Sqlsrv';$/;"	v
builder	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->builder = new Builder($this->connection, $this);$/;"	v
builder	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $builder;$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Builder.php	/^        $bulk  = new BulkWrite;$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Builder.php	/^        $bulk = new BulkWrite;$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Query.php	/^        $bulk         = $this->builder->delete($options);$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Query.php	/^        $bulk         = $this->builder->insert($data, $options);$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Query.php	/^        $bulk         = $this->builder->insertAll($dataSet, $options);$/;"	v
bulk	.\vendor\topthink\think-mongo\src\Query.php	/^        $bulk         = $this->builder->update($data, $options);$/;"	v
by	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^     * Get a wrapper class by name.$/;"	c
by	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^     * Get an adapter class by name.$/;"	c
byte	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                    $byte = ord($Locals_img{9});$/;"	v
byte	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                $byte = ord($Locals_img{9});$/;"	v
c	.\thinkphp\library\think\console\Input.php	/^        $c = count($this->arguments);$/;"	v
c	.\thinkphp\library\think\console\output\Ask.php	/^            $c = fread($inputStream, 1);$/;"	v
cache	.\thinkphp\helper.php	/^            $cache = Cache::connect($options);$/;"	v
cache	.\thinkphp\helper.php	/^            $cache = Cache::init();$/;"	v
cache	.\thinkphp\helper.php	/^    function cache($name, $value = '', $options = null, $tag = null)$/;"	f
cache	.\thinkphp\library\think\Model.php	/^            $cache = $with;$/;"	v
cache	.\thinkphp\library\think\Request.php	/^                $this->cache = [$key, $expire, $tag];$/;"	v
cache	.\thinkphp\library\think\Request.php	/^    protected $cache;$/;"	v
cache	.\thinkphp\library\think\Request.php	/^    public function cache($key, $expire = null, $except = [], $tag = null)$/;"	f
cache	.\thinkphp\library\think\Response.php	/^            $cache = Request::instance()->getCache();$/;"	v
cache	.\thinkphp\library\think\Route.php	/^            $cache = $option['cache'];$/;"	v
cache	.\thinkphp\library\think\db\Query.php	/^            $cache = $options['cache'];$/;"	v
cache	.\thinkphp\library\think\db\Query.php	/^            $cache = $this->options['cache'];$/;"	v
cache	.\thinkphp\library\think\db\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	f
cache	.\vendor\topthink\think-mongo\src\Query.php	/^            $cache     = $options['cache'];$/;"	v
cache	.\vendor\topthink\think-mongo\src\Query.php	/^            $cache = $options['cache'];$/;"	v
cache	.\vendor\topthink\think-mongo\src\Query.php	/^            $cache = $this->options['cache'];$/;"	v
cache	.\vendor\topthink\think-mongo\src\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	f
cacheContent	.\thinkphp\library\think\Template.php	/^            $cacheContent = Cache::get($this->config['cache_id']);$/;"	v
cacheControl	.\thinkphp\library\think\Response.php	/^    public function cacheControl($cache)$/;"	f
cacheData	.\thinkphp\library\think\db\Query.php	/^    protected function cacheData($key, $data, $config = [])$/;"	f
cacheData	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function cacheData($key, $data, $config = [])$/;"	f
cacheFile	.\thinkphp\library\think\Template.php	/^            $cacheFile = $this->config['cache_path'] . $this->config['cache_prefix'] . md5($this->config['layout_name'] . $template) . '.' . ltrim($this->config['cache_suffix'], '.');$/;"	v
cacheFile	.\thinkphp\library\think\Template.php	/^        $cacheFile = $this->config['cache_path'] . $this->config['cache_prefix'] . md5($content) . '.' . ltrim($this->config['cache_suffix'], '.');$/;"	v
cacheFile	.\thinkphp\library\think\template\driver\File.php	/^        $this->cacheFile = $cacheFile;$/;"	v
cacheFile	.\thinkphp\library\think\template\driver\File.php	/^    protected $cacheFile;$/;"	v
calculateTotalWidthForOptions	.\thinkphp\library\think\console\output\Descriptor.php	/^    private function calculateTotalWidthForOptions($options)$/;"	f
call	.\thinkphp\library\think\App.php	/^            $call = [$instance, $action];$/;"	v
call	.\thinkphp\library\think\App.php	/^            $call = [$instance, '_empty'];$/;"	v
call	.\thinkphp\library\think\Console.php	/^    public static function call($command, array $parameters = [], $driver = 'buffer')$/;"	f
call	.\thinkphp\library\think\template\taglib\Cx.php	/^        $call = !empty($tag['call']) ? $tag['call'] : '';$/;"	v
call	.\thinkphp\library\traits\think\Instance.php	/^        $call = substr($method, 1);$/;"	v
call	.\vendor\topthink\think-queue\src\queue\CallQueuedHandler.php	/^    public function call(Job $job, array $data)$/;"	f
callWithRetries	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected function callWithRetries()$/;"	f
callback	.\thinkphp\library\think\Collection.php	/^        $callback = $callback ?: function ($a, $b) {$/;"	v
callback	.\thinkphp\library\think\Collection.php	/^    public function filter(callable $callback = null)$/;"	v
callback	.\thinkphp\library\think\Collection.php	/^    public function sort(callable $callback = null)$/;"	v
callback	.\thinkphp\library\think\Process.php	/^            $this->callback = $this->buildCallback($callback);$/;"	v
callback	.\thinkphp\library\think\Process.php	/^        $callback = $this->callback;$/;"	v
callback	.\thinkphp\library\think\Process.php	/^        $callback = function ($type, $data) use ($callback, $out) {$/;"	v
callback	.\thinkphp\library\think\Process.php	/^        $this->callback                     = null;$/;"	v
callback	.\thinkphp\library\think\Process.php	/^        $this->callback  = $this->buildCallback($callback);$/;"	v
callback	.\thinkphp\library\think\Process.php	/^    private $callback;$/;"	v
callback	.\thinkphp\library\think\Request.php	/^    public static function hook($method, $callback = null)$/;"	v
callback	.\thinkphp\library\think\Validate.php	/^                    $callback = isset(self::$type[$type]) ? self::$type[$type] : [$this, $type];$/;"	v
callback	.\thinkphp\library\think\Validate.php	/^                $callback = isset(self::$type[$type]) ? self::$type[$type] : [$this, $type];$/;"	v
callback	.\thinkphp\library\think\Validate.php	/^    public static function extend($type, $callback = null)$/;"	v
callback	.\thinkphp\library\think\db\Query.php	/^            $callback = self::$event[$event];$/;"	v
callback	.\vendor\topthink\think-mongo\src\Query.php	/^            $callback = self::$event[$event];$/;"	v
camel	.\vendor\topthink\think-helper\src\Str.php	/^    public static function camel($value)$/;"	f
camelCache	.\vendor\topthink\think-helper\src\Str.php	/^    protected static $camelCache = [];$/;"	v
captcha	.\vendor\topthink\think-captcha\src\CaptchaController.php	/^        $captcha = new Captcha((array)Config::get('captcha'));$/;"	v
captcha	.\vendor\topthink\think-captcha\src\helper.php	/^    $captcha = new \\think\\captcha\\Captcha($config);$/;"	v
captcha	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha($id = "", $config = [])$/;"	f
captcha_check	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha_check($value, $id = "", $config = [])$/;"	f
captcha_img	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha_img($id = "")$/;"	f
captcha_src	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha_src($id = "")$/;"	f
captureExitCode	.\thinkphp\library\think\Process.php	/^    private function captureExitCode()$/;"	f
castToBool	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function castToBool($value)$/;"	f
castToBool	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function castToBool($value)$/;"	f
castToBool	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function castToBool($value)$/;"	f
catchExceptions	.\thinkphp\library\think\Console.php	/^        $this->catchExceptions = (bool) $boolean;$/;"	v
catchExceptions	.\thinkphp\library\think\Console.php	/^    private $catchExceptions = true;$/;"	v
ch	.\thinkphp\library\think\log\driver\Socket.php	/^        $ch  = curl_init();$/;"	v
change	.\thinkphp\library\think\Validate.php	/^            $change = [];$/;"	v
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn);$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function changeColumn($tableName, $columnName, Column $newColumn)$/;"	f
changeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function changeColumn($columnName, $newColumnType, $options = array())$/;"	f
changeColumn	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function changeColumn($columnName, $newColumnType = null, $options = [])$/;"	f
changeDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $changeDefault = $newColumn->getDefault() !== $columns[$columnName]->getDefault() || $newColumn->getType() !== $columns[$columnName]->getType();$/;"	v
changeDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function changeDefault($tableName, Column $newColumn)$/;"	f
changes	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $changes = [$/;"	v
char	.\thinkphp\library\think\process\Utils.php	/^        return 2 < strlen($arg) && $char === $arg[0] && $char === $arg[strlen($arg) - 1];$/;"	v
char	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function char($name, $length = 255)$/;"	f
charset	.\thinkphp\library\think\Response.php	/^    protected $charset = 'utf-8';$/;"	v
charset	.\thinkphp\library\think\Response.php	/^    public function contentType($contentType, $charset = 'utf-8')$/;"	v
charset	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $charset = explode('_', $options['collation']);$/;"	v
charset	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $charset = isset($options['charset']) ? $options['charset'] : 'utf8';$/;"	v
charset	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $charset = isset($options['charset']) ? $options['charset'] : 'utf8';$/;"	v
check	.\thinkphp\library\think\App.php	/^        $check = !is_null(self::$routeCheck) ? self::$routeCheck : $config['url_route_on'];$/;"	v
check	.\thinkphp\library\think\File.php	/^    public function check($rule = [])$/;"	f
check	.\thinkphp\library\think\Log.php	/^    public static function check($config)$/;"	f
check	.\thinkphp\library\think\Route.php	/^    public static function check($request, $url, $depr = '\/', $checkDomain = false)$/;"	f
check	.\thinkphp\library\think\Validate.php	/^    public function check($data, $rules = [], $scene = '')$/;"	f
check	.\thinkphp\library\think\log\driver\Socket.php	/^    protected function check()$/;"	f
check	.\thinkphp\library\think\template\driver\File.php	/^    public function check($cacheFile, $cacheTime)$/;"	f
check	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function check($code, $id = '')$/;"	f
check	.\vendor\topthink\think-helper\src\Hash.php	/^    public static function check($value, $hashedValue, $type = null, array $options = [])$/;"	f
check	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    public function check($value, $hashedValue, array $options = [])$/;"	f
check	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    public function check($value, $hashedValue, array $options = [])$/;"	f
checkAllowField	.\thinkphp\library\think\Model.php	/^    protected function checkAllowField($auto = [])$/;"	f
checkCache	.\thinkphp\library\think\Template.php	/^    private function checkCache($cacheFile)$/;"	f
checkDirBuild	.\thinkphp\library\think\Build.php	/^    protected static function checkDirBuild($dirname)$/;"	f
checkDomain	.\thinkphp\library\think\Route.php	/^    public static function checkDomain($request, &$currentRules, $method = 'get')$/;"	f
checkExt	.\thinkphp\library\think\File.php	/^    public function checkExt($ext)$/;"	f
checkImg	.\thinkphp\library\think\File.php	/^    public function checkImg()$/;"	f
checkItem	.\thinkphp\library\think\Validate.php	/^    protected function checkItem($field, $value, $rules, $data, $title = '', $msg = [])$/;"	f
checkMime	.\thinkphp\library\think\File.php	/^    public function checkMime($mime)$/;"	f
checkMultiField	.\thinkphp\library\think\db\Query.php	/^    private function checkMultiField($field, $logic)$/;"	f
checkOption	.\thinkphp\library\think\Route.php	/^    private static function checkOption($option, $request)$/;"	f
checkPath	.\thinkphp\library\think\File.php	/^    protected function checkPath($path)$/;"	f
checkRoute	.\thinkphp\library\think\Route.php	/^    private static function checkRoute($request, $rules, $url, $depr = '\/', $group = '', $options = [])$/;"	f
checkRouteAlias	.\thinkphp\library\think\Route.php	/^    private static function checkRouteAlias($request, $url, $depr)$/;"	f
checkRule	.\thinkphp\library\think\Route.php	/^    private static function checkRule($rule, $route, $url, $pattern, $option, $depr)$/;"	f
checkRule	.\thinkphp\library\think\Validate.php	/^    protected function checkRule($value, $rules)$/;"	f
checkSize	.\thinkphp\library\think\File.php	/^    public function checkSize($size)$/;"	f
checkTimeout	.\thinkphp\library\think\Process.php	/^    public function checkTimeout()$/;"	f
checkUrlBind	.\thinkphp\library\think\Route.php	/^    private static function checkUrlBind(&$url, &$rules, $depr = '\/')$/;"	f
checks	.\thinkphp\library\think\console\output\driver\Console.php	/^        $checks = [$/;"	v
children	.\thinkphp\library\think\Template.php	/^                $children = [];$/;"	v
choice	.\thinkphp\library\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	f
choices	.\thinkphp\library\think\console\output\Ask.php	/^                $choices = $this->question->getChoices();$/;"	v
choices	.\thinkphp\library\think\console\output\question\Choice.php	/^        $choices      = $this->choices;$/;"	v
choices	.\thinkphp\library\think\console\output\question\Choice.php	/^        $this->choices = $choices;$/;"	v
choices	.\thinkphp\library\think\console\output\question\Choice.php	/^    private $choices;$/;"	v
chunk	.\thinkphp\library\think\Collection.php	/^    public function chunk($size, $preserveKeys = false)$/;"	f
chunk	.\thinkphp\library\think\db\Query.php	/^    public function chunk($count, $callback, $column = null, $order = 'asc')$/;"	f
chunk	.\vendor\topthink\think-mongo\src\Query.php	/^    public function chunk($count, $callback, $column = null)$/;"	f
chunks	.\thinkphp\library\think\Collection.php	/^        $chunks = [];$/;"	v
class	.\thinkphp\library\think\App.php	/^            $class   = is_object($method[0]) ? $method[0] : self::invokeClass($method[0]);$/;"	v
class	.\thinkphp\library\think\App.php	/^        $class = $param->getClass();$/;"	v
class	.\thinkphp\library\think\Build.php	/^                    $class    = $val . ($suffix ? ucfirst($path) : '');$/;"	v
class	.\thinkphp\library\think\Cache.php	/^            $class = false === strpos($type, '\\\\') ?$/;"	v
class	.\thinkphp\library\think\Config.php	/^        $class = false !== strpos($type, '\\\\') ?$/;"	v
class	.\thinkphp\library\think\Db.php	/^            $class = false !== strpos($options['type'], '\\\\') ?$/;"	v
class	.\thinkphp\library\think\Debug.php	/^        $class  = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\debug\\\\' . ucwords($type);$/;"	v
class	.\thinkphp\library\think\Error.php	/^            $class = Config::get('exception_handle');$/;"	v
class	.\thinkphp\library\think\Hook.php	/^            $class  = $class . '->' . $method;$/;"	v
class	.\thinkphp\library\think\Hook.php	/^            $class  = 'Closure';$/;"	v
class	.\thinkphp\library\think\Hook.php	/^            $class  = get_class($class);$/;"	v
class	.\thinkphp\library\think\Loader.php	/^            $class  = $name;$/;"	v
class	.\thinkphp\library\think\Loader.php	/^            $class = self::parseClass($module, $layer, $name, $appendSuffix);$/;"	v
class	.\thinkphp\library\think\Loader.php	/^            $class = str_replace('\\\\' . $module . '\\\\', '\\\\' . $common . '\\\\', $class);$/;"	v
class	.\thinkphp\library\think\Loader.php	/^        $class        = str_replace(['.', '#'], [DS, '.'], $class);$/;"	v
class	.\thinkphp\library\think\Loader.php	/^        $class  = self::controller($module, $layer, $appendSuffix);$/;"	v
class	.\thinkphp\library\think\Loader.php	/^        $class = $class . (App::$suffix || $appendSuffix ? ucfirst($layer) : '');$/;"	v
class	.\thinkphp\library\think\Loader.php	/^        $class = self::parseName(array_pop($array), 1);$/;"	v
class	.\thinkphp\library\think\Log.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\log\\\\driver\\\\' . ucwords($type);$/;"	v
class	.\thinkphp\library\think\Model.php	/^                $class      = $this->resultSetType;$/;"	v
class	.\thinkphp\library\think\Model.php	/^        $class = get_called_class();$/;"	v
class	.\thinkphp\library\think\Model.php	/^        $class = get_class($this);$/;"	v
class	.\thinkphp\library\think\Model.php	/^        $this->class = get_called_class();$/;"	v
class	.\thinkphp\library\think\Model.php	/^    protected $class;$/;"	v
class	.\thinkphp\library\think\Response.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\response\\\\' . ucfirst(strtolower($type));$/;"	v
class	.\thinkphp\library\think\Route.php	/^        $class  = !empty($array[0]) ? $array[0] : Config::get('default_controller');$/;"	v
class	.\thinkphp\library\think\Session.php	/^            $class = false !== strpos($config['type'], '\\\\') ? $config['type'] : '\\\\think\\\\session\\\\driver\\\\' . ucwords($config['type']);$/;"	v
class	.\thinkphp\library\think\Template.php	/^        $class         = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\template\\\\driver\\\\' . ucwords($type);$/;"	v
class	.\thinkphp\library\think\Validate.php	/^        $class = self::make();$/;"	v
class	.\thinkphp\library\think\View.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\view\\\\driver\\\\' . ucfirst($type);$/;"	v
class	.\thinkphp\library\think\console\Output.php	/^        $class = '\\\\think\\\\console\\\\output\\\\driver\\\\' . ucwords($driver);$/;"	v
class	.\thinkphp\library\think\console\command\Make.php	/^        $class = str_replace($namespace . '\\\\', '', $name);$/;"	v
class	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($classMap as $class => $code) {$/;"	v
class	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($this->createMap($dir, $namespace) as $class => $path) {$/;"	v
class	.\thinkphp\library\think\console\command\optimize\Schema.php	/^                $class = '\\\\' . $app . '\\\\' . $module . '\\\\model\\\\' . pathinfo($file, PATHINFO_FILENAME);$/;"	v
class	.\thinkphp\library\think\console\command\optimize\Schema.php	/^                $class = '\\\\' . $app . '\\\\model\\\\' . pathinfo($file, PATHINFO_FILENAME);$/;"	v
class	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $class    = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';$/;"	v
class	.\thinkphp\library\think\db\Connection.php	/^        $class = $this->config['query'];$/;"	v
class	.\thinkphp\library\think\db\Query.php	/^            $class = get_class($this->model);$/;"	v
class	.\thinkphp\library\think\db\Query.php	/^        $class         = $this->connection->getBuilder();$/;"	v
class	.\thinkphp\library\think\db\Query.php	/^        $class = $this->model;$/;"	v
class	.\thinkphp\library\think\db\Query.php	/^        $class = false !== strpos($config['type'], '\\\\') ? $config['type'] : '\\\\think\\\\paginator\\\\driver\\\\' . ucwords($config['type']);$/;"	v
class	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^        $this->class   = $class;$/;"	v
class	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^    protected $class;$/;"	v
class	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function __construct($message, $class = '')$/;"	v
class	.\thinkphp\library\think\model\Merge.php	/^        $class  = new static();$/;"	v
class	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $class = $this->pivotName ?: '\\\\think\\\\model\\\\Pivot';$/;"	v
class	.\vendor\topthink\think-helper\src\Hash.php	/^            $class = "\\\\think\\\\helper\\\\hash\\\\" . ucfirst($type);$/;"	v
class	.\vendor\topthink\think-helper\src\helper.php	/^            $class = get_class($class);$/;"	v
class	.\vendor\topthink\think-helper\src\helper.php	/^        $class = is_object($class) ? get_class($class) : $class;$/;"	v
class	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^        $class = $this->getClass($name);$/;"	v
class	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^        $class = $this->getWrapperClass($name);$/;"	v
class	.\vendor\topthink\think-migration\src\command\Migrate.php	/^                    $class = Util::mapFileNameToClassName(basename($filePath));$/;"	v
class	.\vendor\topthink\think-migration\src\command\Seed.php	/^                    $class             = pathinfo($filePath, PATHINFO_FILENAME);$/;"	v
class	.\vendor\topthink\think-mongo\src\Connection.php	/^            $class               = $queryClass ?: $this->config['query'];$/;"	v
class	.\vendor\topthink\think-mongo\src\Query.php	/^        $class    = strpos($config['type'], '\\\\') ? $config['type'] : '\\\\think\\\\paginator\\\\driver\\\\' . ucwords($config['type']);$/;"	v
class	.\vendor\topthink\think-queue\src\Queue.php	/^            $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\queue\\\\connector\\\\' . Str::studly($type);$/;"	v
classMap	.\thinkphp\library\think\Loader.php	/^            $classMap = require VENDOR_PATH . 'composer\/autoload_classmap.php';$/;"	v
classMap	.\thinkphp\library\think\Loader.php	/^    protected static $classMap = [];$/;"	v
classMap	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $classMap        = $this->addClassMapCode($dir, $namespaceFilter, $classMap);$/;"	v
classMap	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classMap = [];$/;"	v
classMap	.\vendor\composer\ClassLoader.php	/^            $this->classMap = $classMap;$/;"	v
classMap	.\vendor\composer\ClassLoader.php	/^            $this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	.\vendor\composer\ClassLoader.php	/^    private $classMap = array();$/;"	v
classMap	.\vendor\composer\autoload_real.php	/^            $classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
classMapAuthoritative	.\vendor\composer\ClassLoader.php	/^        $this->classMapAuthoritative = $classMapAuthoritative;$/;"	v
classMapAuthoritative	.\vendor\composer\ClassLoader.php	/^    private $classMapAuthoritative = false;$/;"	v
className	.\thinkphp\library\think\App.php	/^            $className = $class->getName();$/;"	v
className	.\thinkphp\library\think\Template.php	/^            $className = $tagLib;$/;"	v
className	.\thinkphp\library\think\Template.php	/^            $className = '\\\\think\\\\template\\\\taglib\\\\' . ucwords($tagLib);$/;"	v
className	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $className = $input->getArgument('name');$/;"	v
className	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $className = $input->getArgument('name');$/;"	v
classNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $classNames = array();$/;"	v
class_basename	.\vendor\topthink\think-helper\src\helper.php	/^    function class_basename($class)$/;"	f
class_uses_recursive	.\vendor\topthink\think-helper\src\helper.php	/^    function class_uses_recursive($class)$/;"	f
classes	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $classes = $this->findClasses($filePath);$/;"	v
classes	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classes   = [];$/;"	v
classes	.\vendor\topthink\think-helper\src\helper.php	/^        $classes = array_map(function ($arg) {$/;"	v
classes	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $classes  = [$/;"	v
classmapFile	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classmapFile = <<<EOF$/;"	v
classname	.\thinkphp\library\think\console\command\Make.php	/^        $classname = $this->getClassName($name);$/;"	v
classnames	.\vendor\topthink\think-helper\src\helper.php	/^    function classnames()$/;"	f
clear	.\thinkphp\library\think\Cache.php	/^    public static function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\Cookie.php	/^    public static function clear($prefix = null)$/;"	f
clear	.\thinkphp\library\think\Db.php	/^    public static function clear()$/;"	f
clear	.\thinkphp\library\think\Log.php	/^    public static function clear()$/;"	f
clear	.\thinkphp\library\think\Session.php	/^    public static function clear($prefix = null)$/;"	f
clear	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function clear($tag = null);$/;"	f
clear	.\thinkphp\library\think\cache\driver\File.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function clear($tag = null)$/;"	f
clear	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function clear($tag = null)$/;"	f
clearErrorOutput	.\thinkphp\library\think\Process.php	/^    public function clearErrorOutput()$/;"	f
clearInstance	.\thinkphp\library\think\Loader.php	/^    public static function clearInstance()$/;"	f
clearOutput	.\thinkphp\library\think\Process.php	/^    public function clearOutput()$/;"	f
clearPath	.\thinkphp\library\think\console\command\Clear.php	/^    protected function clearPath($path)$/;"	f
cli	.\thinkphp\library\think\log\driver\File.php	/^            $cli = IS_CLI ? '_cli' : '';$/;"	v
client_id	.\thinkphp\library\think\log\driver\Socket.php	/^                $client_id = $force_client_id;$/;"	v
client_id	.\thinkphp\library\think\log\driver\Socket.php	/^            $client_id = $this->getClientArg('client_id');$/;"	v
client_id	.\thinkphp\library\think\log\driver\Socket.php	/^            $client_id = '';$/;"	v
close	.\thinkphp\library\think\Process.php	/^            $close   = '\\\\' !== DS || !$running;$/;"	v
close	.\thinkphp\library\think\Process.php	/^    private function close()$/;"	f
close	.\thinkphp\library\think\db\Connection.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function readAndWrite($blocking, $close = false);$/;"	v
close	.\thinkphp\library\think\process\pipes\Pipes.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function readAndWrite($blocking, $close = false)$/;"	v
close	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function readAndWrite($blocking, $close = false)$/;"	v
close	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\session\driver\Redis.php	/^    public function close()$/;"	f
close	.\thinkphp\library\think\template\TagLib.php	/^            $close                      = !isset($val['close']) || $val['close'] ? 1 : 0;$/;"	v
close	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function close()$/;"	f
closure	.\thinkphp\library\think\Model.php	/^                $closure  = $relation;$/;"	v
closure	.\thinkphp\library\think\Model.php	/^            $closure     = false;$/;"	v
closure	.\thinkphp\library\think\Model.php	/^            $closure     = null;$/;"	v
closure	.\thinkphp\library\think\Model.php	/^            $closure = false;$/;"	v
closure	.\thinkphp\library\think\db\Query.php	/^                    $closure  = $relation;$/;"	v
closure	.\thinkphp\library\think\db\Query.php	/^                $closure    = $relation;$/;"	v
closure	.\thinkphp\library\think\db\Query.php	/^                $closure = false;$/;"	v
closure	.\thinkphp\library\think\db\Query.php	/^            $closure     = false;$/;"	v
closure	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
closure	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
cmap	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^            $cmap = 3 * (2 << (ord($this->BUF[0]{10}) & 0x07));$/;"	v
cmd	.\vendor\topthink\think-mongo\src\Builder.php	/^        $cmd     = ['collStats' => $options['table']];$/;"	v
cmd	.\vendor\topthink\think-mongo\src\Builder.php	/^        $cmd     = ['listCollections' => 1];$/;"	v
cmd	.\vendor\topthink\think-mongo\src\Builder.php	/^        $cmd = [$/;"	v
cmd	.\vendor\topthink\think-mongo\src\Query.php	/^    public function cmd($command, $extra = null, $db = null)$/;"	f
code	.\thinkphp\helper.php	/^            $code   = $params;$/;"	v
code	.\thinkphp\helper.php	/^    function exception($msg, $code = 0, $exception = '')$/;"	v
code	.\thinkphp\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = [])$/;"	v
code	.\thinkphp\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = [])$/;"	v
code	.\thinkphp\helper.php	/^    function response($data = [], $code = 200, $header = [], $type = 'html')$/;"	v
code	.\thinkphp\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = [])$/;"	v
code	.\thinkphp\library\think\Response.php	/^        $this->code   = $code;$/;"	v
code	.\thinkphp\library\think\Response.php	/^        $this->code = $code;$/;"	v
code	.\thinkphp\library\think\Response.php	/^    protected $code = 200;$/;"	v
code	.\thinkphp\library\think\Response.php	/^    public function __construct($data = '', $code = 200, array $header = [], $options = [])$/;"	v
code	.\thinkphp\library\think\Response.php	/^    public function code($code)$/;"	f
code	.\thinkphp\library\think\console\Command.php	/^                $code = \\Closure::bind($code, $this);$/;"	v
code	.\thinkphp\library\think\console\Command.php	/^        $this->code = $code;$/;"	v
code	.\thinkphp\library\think\console\Command.php	/^    private $code;$/;"	v
code	.\thinkphp\library\think\db\exception\BindParamException.php	/^    public function __construct($message, $config, $sql, $bind, $code = 10502)$/;"	v
code	.\thinkphp\library\think\exception\DbException.php	/^        $this->code    = $code;$/;"	v
code	.\thinkphp\library\think\exception\DbException.php	/^    public function __construct($message, array $config, $sql, $code = 10500)$/;"	v
code	.\thinkphp\library\think\exception\ErrorException.php	/^        $this->code     = 0;$/;"	v
code	.\thinkphp\library\think\exception\Handle.php	/^            $code = $exception->getSeverity();$/;"	v
code	.\thinkphp\library\think\exception\Handle.php	/^        $code = $exception->getCode();$/;"	v
code	.\thinkphp\library\think\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config, $sql, $code = 10501)$/;"	v
code	.\thinkphp\library\think\response\Redirect.php	/^    public function __construct($data = '', $code = 302, array $header = [], array $options = [])$/;"	v
code	.\thinkphp\library\traits\controller\Jump.php	/^            $code   = $params;$/;"	v
code	.\thinkphp\library\traits\controller\Jump.php	/^    protected function result($data, $code = 0, $msg = '', $type = '', array $header = [])$/;"	v
code	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $code                  = $this->authcode(strtoupper(implode('', $code)));$/;"	v
code	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $code   = []; \/\/ 验证码$/;"	v
codeNX	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $codeNX = 0; \/\/ 验证码第N个字符的左边距$/;"	v
codeSet	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $codeSet = '2345678abcdefhijkmnpqrstuvwxyz';$/;"	v
col	.\vendor\topthink\think-image\src\Image.php	/^            $col = imagecolorallocatealpha($this->im, $color[0], $color[1], $color[2], $color[3]);$/;"	v
collStats	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function collStats($options)$/;"	f
collation	.\vendor\topthink\think-mongo\src\Query.php	/^    public function collation($collation)$/;"	f
collection	.\thinkphp\helper.php	/^    function collection($resultSet)$/;"	f
collection	.\thinkphp\library\think\Model.php	/^                $collection = new $class($collection);$/;"	v
collection	.\thinkphp\library\think\Model.php	/^                $collection = new ModelCollection($collection);$/;"	v
collection	.\thinkphp\library\think\Paginator.php	/^        $collection = $this->getCollection();$/;"	v
collection	.\vendor\topthink\think-mongo\src\Query.php	/^    public function collection($collection)$/;"	f
collectionName	.\thinkphp\library\think\Console.php	/^            foreach ($collectionParts as $collectionName => $parts) {$/;"	v
collectionParts	.\thinkphp\library\think\Console.php	/^        $collectionParts = [];$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^                    $color = imagecolorallocate($img, 255, 255, 255);$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^            $color = array_map('hexdec', $color);$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^            $color = imagecolorallocate($img, 255, 255, 255);$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^            $color = imagecolorallocate($src, 255, 255, 255);$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^            $color = str_split(substr($color, 1), 2);$/;"	v
color	.\vendor\topthink\think-image\src\Image.php	/^    public function text($text, $font, $size, $color = '#00000000',$/;"	v
column	.\thinkphp\library\think\Collection.php	/^    public function column($columnKey, $indexKey = null)$/;"	f
column	.\thinkphp\library\think\Db.php	/^ * @method boolean chunk(integer $count, callable $callback, string $column = null) static 分块获取数据$/;"	v
column	.\thinkphp\library\think\db\Query.php	/^        $column = $column ?: $this->getPk($options);$/;"	v
column	.\thinkphp\library\think\db\Query.php	/^    public function chunk($count, $callback, $column = null, $order = 'asc')$/;"	v
column	.\thinkphp\library\think\db\Query.php	/^    public function column($field, $key = '')$/;"	f
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $column = new Column();$/;"	v
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $column = new Column();$/;"	v
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $column = new Column();$/;"	v
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $column = new Column();$/;"	v
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $column = $columnName;$/;"	v
column	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $column = new Column();$/;"	v
column	.\vendor\topthink\think-migration\src\db\Column.php	/^        $column = new self();$/;"	v
column	.\vendor\topthink\think-mongo\src\Query.php	/^        $column    = $column ?: $this->getPk();$/;"	v
column	.\vendor\topthink\think-mongo\src\Query.php	/^    public function chunk($count, $callback, $column = null)$/;"	v
column	.\vendor\topthink\think-mongo\src\Query.php	/^    public function column($field, $key = '')$/;"	f
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $columnNames = array();$/;"	v
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $columnNames = array($columnNames);$/;"	v
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $columnNames = $index->getColumns();$/;"	v
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $columnNames = array();$/;"	v
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $columnNames = array($columnNames);$/;"	v
columnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $columnNames = $index->getColumns();$/;"	v
columnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $columnType = $row['type'];$/;"	v
columnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columnType = null;$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $columns = array($columns); \/\/ str to array$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $columns = $table->getPendingColumns();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $columns = array_map('strtolower', $columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $columns = array_keys($row);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $columns = array($columns); \/\/ str to array$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $columns = array($columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $columns = $table->getPendingColumns();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $columns = array_map('strtolower', $columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $columns = array($columns); \/\/ str to array$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columns = $table->getPendingColumns();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columns = $this->fetchAll(sprintf('pragma table_info(%s)', $this->quoteTableName($tableName)));$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columns = array_keys($row);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $columns = array_map('strtolower', $columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $columns = $this->getIndexColums($row['table_id'], $row['index_id']);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $columns = array($columns); \/\/ str to array$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $columns = $table->getPendingColumns();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $columns = $this->getColumns($tableName);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $columns = array_map('strtolower', $columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^                $columns = array($columns); \/\/ str to array$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $columns = array($columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->columns = $columns;$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^            $columns = array($columns);$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->columns = $columns;$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $columns = array();$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        $this->columns = $columns;$/;"	v
columns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    protected $columns;$/;"	v
columnsInfo	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $columnsInfo = $this->fetchAll($sql);$/;"	v
columnsWithComments	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $this->columnsWithComments = array();$/;"	v
columnsWithComments	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected $columnsWithComments = array();$/;"	v
columnsWithComments	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $columnsWithComments = array();$/;"	v
command	.\thinkphp\library\think\Console.php	/^        $command = $this->commands[$name];$/;"	v
command	.\thinkphp\library\think\console\command\Help.php	/^            $this->command = $this->getConsole()->find($input->getArgument('command_name'));$/;"	v
command	.\thinkphp\library\think\console\command\Help.php	/^        $this->command = $command;$/;"	v
command	.\thinkphp\library\think\console\command\Help.php	/^        $this->command = null;$/;"	v
command	.\thinkphp\library\think\console\command\Help.php	/^    private $command;$/;"	v
command	.\thinkphp\library\think\console\output\Ask.php	/^            $command = sprintf("\/usr\/bin\/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'", $shell, $readCmd);$/;"	v
command	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $command = $currentComment === false ? 'sp_addextendedproperty' : 'sp_updateextendedproperty';$/;"	v
command	.\vendor\topthink\think-mongo\src\Builder.php	/^        $command = new Command($cmd);$/;"	v
command	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function command(Command $command, $dbName = '', ReadPreference $readPreference = null, $class = false, $typeMap)$/;"	f
command	.\vendor\topthink\think-mongo\src\Query.php	/^            $command = $this->builder->$command($options, $extra);$/;"	v
command	.\vendor\topthink\think-mongo\src\Query.php	/^            $command = new Command($command);$/;"	v
command	.\vendor\topthink\think-mongo\src\Query.php	/^    public function command(Command $command, $dbName = '', ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	f
command	.\vendor\topthink\think-queue\src\queue\CallQueuedHandler.php	/^        $command = unserialize($data['command']);$/;"	v
command	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $command = sprintf($string, $queue, $delay, $memory, $this->sleep, $this->maxTries);$/;"	v
commandList	.\thinkphp\library\think\Console.php	/^            $commandList = $this->commands;$/;"	v
commandName	.\thinkphp\library\think\Console.php	/^                $commandName = $commandList[$nameOrAlias]->getName();$/;"	v
commandName	.\thinkphp\library\think\Console.php	/^                return $commandName === $nameOrAlias || !in_array($commandName, $commands);$/;"	v
commandPath	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $this->commandPath   = $commandPath;$/;"	v
commandPath	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected $commandPath;$/;"	v
commandStartTime	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->commandStartTime = $time;$/;"	v
commandStartTime	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $commandStartTime;$/;"	v
commandline	.\thinkphp\library\think\Process.php	/^            $commandline = 'cmd \/V:ON \/E:ON \/C "(' . $commandline . ')';$/;"	v
commandline	.\thinkphp\library\think\Process.php	/^            $this->commandline = '(' . $this->commandline . ') 3>\/dev\/null; code=$?; echo $code >&3; exit $code';$/;"	v
commandline	.\thinkphp\library\think\Process.php	/^        $commandline = $this->commandline;$/;"	v
commandline	.\thinkphp\library\think\Process.php	/^        $this->commandline = $commandline;$/;"	v
commandline	.\thinkphp\library\think\Process.php	/^    private $commandline;$/;"	v
commands	.\thinkphp\library\think\Console.php	/^                $commands = include CONF_PATH . 'command' . EXT;$/;"	v
commands	.\thinkphp\library\think\Console.php	/^            $commands    = array_filter($commands, function ($nameOrAlias) use ($commandList, $commands) {$/;"	v
commands	.\thinkphp\library\think\Console.php	/^        $commands    = preg_grep('{^' . $expr . '}', $allCommands);$/;"	v
commands	.\thinkphp\library\think\Console.php	/^        $commands = [];$/;"	v
commands	.\thinkphp\library\think\Console.php	/^    private $commands = [];$/;"	v
commands	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->commands   = [];$/;"	v
commands	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private $commands;$/;"	v
commands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^        $commands = $this->getCommands();$/;"	v
commands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^        $commands = $this->getInvertedCommands();$/;"	v
commands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^        $this->commands = $commands;$/;"	v
commands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    protected $commands;$/;"	v
comment	.\thinkphp\library\think\db\Builder.php	/^            $comment = strstr($coment, '*\/', true);$/;"	v
comment	.\thinkphp\library\think\db\Query.php	/^    public function comment($comment)$/;"	f
comment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $comment = (strcasecmp($column->getComment(), 'NULL') !== 0)$/;"	v
comment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $comment = (strcasecmp($column->getComment(), 'NULL') !== 0) ? $this->getConnection()->quote($column->getComment()) : '\\'\\'';$/;"	v
comment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->comment = $comment;$/;"	v
comment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $comment;$/;"	v
comment	.\vendor\topthink\think-mongo\src\Query.php	/^    public function comment($comment)$/;"	f
commit	.\thinkphp\library\think\db\Connection.php	/^    public function commit()$/;"	f
commit	.\thinkphp\library\think\db\Query.php	/^    public function commit()$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function commitTransaction();$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function commitTransaction()$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function commitTransaction()$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function commitTransaction()$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function commitTransaction()$/;"	f
commitTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function commitTransaction()$/;"	f
common	.\thinkphp\library\think\Build.php	/^        $common = APP_PATH . ($module ? $module . DS : '') . 'common.php';$/;"	v
comparison	.\thinkphp\library\think\template\TagLib.php	/^    protected $comparison = [' nheq ' => ' !== ', ' heq ' => ' === ', ' neq ' => ' != ', ' eq ' => ' == ', ' egt ' => ' >= ', ' gt ' => ' > ', ' elt ' => ' <= ', ' lt ' => ' < '];$/;"	v
comparison	.\thinkphp\library\think\template\taglib\Cx.php	/^                    $comparison = $value;$/;"	v
comparison	.\thinkphp\library\think\template\taglib\Cx.php	/^        $comparison = 'lt';$/;"	v
compiler	.\thinkphp\library\think\Template.php	/^    private function compiler(&$content, $cacheFile)$/;"	f
completeMatch	.\thinkphp\library\think\Route.php	/^                $completeMatch = Config::get('route_complete_match');$/;"	v
composerClass	.\thinkphp\library\think\Loader.php	/^                $composerClass = array_pop($declaredClass);$/;"	v
composerExtra	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                $composerExtra = $this->composer->getPackage()->getExtra();$/;"	v
composerRequire34a41e2841af1a67f3ddef099fc7b348	.\vendor\composer\autoload_real.php	/^function composerRequire34a41e2841af1a67f3ddef099fc7b348($fileIdentifier, $file)$/;"	f
con	.\thinkphp\library\think\Model.php	/^        $con = Db::connect($connection);$/;"	v
condition	.\thinkphp\library\think\Db.php	/^ * @method Query join(mixed $join, mixed $condition = null, string $type = 'INNER') static JOIN查询$/;"	v
condition	.\thinkphp\library\think\db\Builder.php	/^                $condition               = [];$/;"	v
condition	.\thinkphp\library\think\db\Query.php	/^        $condition = !empty($this->options['where']) ? $this->options['where'] : [];$/;"	v
condition	.\thinkphp\library\think\db\Query.php	/^    public function join($join, $condition = null, $type = 'INNER')$/;"	v
condition	.\thinkphp\library\think\db\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	v
condition	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery($foreignKey, $localKey, $condition = [])$/;"	v
condition	.\thinkphp\library\think\template\TagLib.php	/^            $condition = ' ' . substr(strstr($condition, ':'), 1);$/;"	v
condition	.\thinkphp\library\think\template\TagLib.php	/^        $condition = str_ireplace(array_keys($this->comparison), array_values($this->comparison), $condition);$/;"	v
condition	.\thinkphp\library\think\template\taglib\Cx.php	/^        $condition = !empty($tag['expression']) ? $tag['expression'] : $tag['condition'];$/;"	v
condition	.\thinkphp\library\think\template\taglib\Cx.php	/^        $condition = $this->parseCondition($condition);$/;"	v
condition	.\vendor\topthink\think-mongo\src\Query.php	/^        $condition = !empty($this->options['where']) ? $this->options['where'] : [];$/;"	v
condition	.\vendor\topthink\think-mongo\src\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	v
config	.\thinkphp\helper.php	/^    function config($name = '', $value = null, $range = '')$/;"	f
config	.\thinkphp\helper.php	/^    function db($name = '', $config = [], $force = false)$/;"	v
config	.\thinkphp\library\think\App.php	/^                $config = self::init($module);$/;"	v
config	.\thinkphp\library\think\App.php	/^            $config       = self::init();$/;"	v
config	.\thinkphp\library\think\App.php	/^            $config = Config::load(CONF_PATH . $module . 'config' . CONF_EXT);$/;"	v
config	.\thinkphp\library\think\App.php	/^            $config = self::initCommon();$/;"	v
config	.\thinkphp\library\think\Build.php	/^        $config = CONF_PATH . ($module ? $module . DS : '') . 'config.php';$/;"	v
config	.\thinkphp\library\think\Config.php	/^    private static $config = [];$/;"	v
config	.\thinkphp\library\think\Console.php	/^            $config = Config::get('console');$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^            $config = Config::get('cookie');$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^            $config = array_merge(self::$config, array_change_key_case($option));$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^            $config = self::$config;$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^        $config = self::$config;$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^    protected static $config = [$/;"	v
config	.\thinkphp\library\think\Cookie.php	/^    public static function init(array $config = [])$/;"	v
config	.\thinkphp\library\think\Db.php	/^            $config = Config::get($config); \/\/ 支持读取配置参数$/;"	v
config	.\thinkphp\library\think\Db.php	/^            $config = Config::get('database');$/;"	v
config	.\thinkphp\library\think\Debug.php	/^        $config = Config::get('trace');$/;"	v
config	.\thinkphp\library\think\Log.php	/^    protected static $config = [];$/;"	v
config	.\thinkphp\library\think\Session.php	/^            $config = Config::get('session');$/;"	v
config	.\thinkphp\library\think\Session.php	/^    public static function init(array $config = [])$/;"	v
config	.\thinkphp\library\think\Template.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\Template.php	/^        $this->config               = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\Template.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\Template.php	/^    public function __construct(array $config = [])$/;"	v
config	.\thinkphp\library\think\Template.php	/^    public function config($config)$/;"	f
config	.\thinkphp\library\think\View.php	/^    public function config($name, $value = null)$/;"	f
config	.\thinkphp\library\think\config\driver\Json.php	/^            $config = file_get_contents($config);$/;"	v
config	.\thinkphp\library\think\console\command\optimize\Config.php	/^                $config = ThinkConfig::load(CONF_PATH . $module . $config['app_status'] . CONF_EXT);$/;"	v
config	.\thinkphp\library\think\console\command\optimize\Config.php	/^            $config = ThinkConfig::load(CONF_PATH . $module . 'config' . CONF_EXT);$/;"	v
config	.\thinkphp\library\think\console\command\optimize\Route.php	/^                $config = include CONF_PATH . $file . CONF_EXT;$/;"	v
config	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $config = $input->getOption('config');$/;"	v
config	.\thinkphp\library\think\console\command\optimize\Schema.php	/^        $config = [];$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^                $config = $this->config;$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^                $config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^    public function __construct(array $config = [])$/;"	v
config	.\thinkphp\library\think\db\Connection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false)$/;"	v
config	.\thinkphp\library\think\db\Query.php	/^            $config   = array_merge(Config::get('paginate'), $config);$/;"	v
config	.\thinkphp\library\think\db\Query.php	/^            $config   = array_merge(Config::get('paginate'), $listRows);$/;"	v
config	.\thinkphp\library\think\db\Query.php	/^    protected function cacheData($key, $data, $config = [])$/;"	v
config	.\thinkphp\library\think\debug\Console.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\debug\Console.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\debug\Html.php	/^        $this->config               = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\debug\Html.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\debug\Html.php	/^    public function __construct(array $config = [])$/;"	v
config	.\thinkphp\library\think\log\driver\File.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\log\driver\File.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\log\driver\Socket.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\log\driver\Socket.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	v
config	.\thinkphp\library\think\session\driver\Memcache.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\session\driver\Memcache.php	/^    protected $config  = [$/;"	v
config	.\thinkphp\library\think\session\driver\Memcached.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\session\driver\Memcached.php	/^    protected $config  = [$/;"	v
config	.\thinkphp\library\think\session\driver\Redis.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\session\driver\Redis.php	/^    protected $config  = [$/;"	v
config	.\thinkphp\library\think\view\driver\Php.php	/^            $this->config = array_merge($this->config, $name);$/;"	v
config	.\thinkphp\library\think\view\driver\Php.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\view\driver\Php.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\view\driver\Php.php	/^    public function config($name, $value = null)$/;"	f
config	.\thinkphp\library\think\view\driver\Think.php	/^            $this->config = array_merge($this->config, $name);$/;"	v
config	.\thinkphp\library\think\view\driver\Think.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\thinkphp\library\think\view\driver\Think.php	/^    protected $config = [$/;"	v
config	.\thinkphp\library\think\view\driver\Think.php	/^    public function config($name, $value = null)$/;"	f
config	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	.\vendor\topthink\think-captcha\src\Captcha.php	/^    protected $config = [$/;"	v
config	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha($id = "", $config = [])$/;"	v
config	.\vendor\topthink\think-migration\src\Command.php	/^        $config = Config::get('migration');$/;"	v
config	.\vendor\topthink\think-migration\src\Command.php	/^        $config = Db::connect($this->config)->getConfig();$/;"	v
config	.\vendor\topthink\think-migration\src\Command.php	/^    protected $config = 'database';$/;"	v
config	.\vendor\topthink\think-migration\src\command\Migrate.php	/^        $this->config = $input->getOption('config');$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^                $config = $this->config;$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^                $config = array_merge($this->config, $config);$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $config = [$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function __construct(array $config = [])$/;"	v
config	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function connect(array $config = [], $linkNum = 0)$/;"	v
config	.\vendor\topthink\think-mongo\src\Query.php	/^        $config   = array_merge(Config::get('paginate'), $config);$/;"	v
config	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function cacheData($key, $data, $config = [])$/;"	v
configure	.\thinkphp\library\think\console\Command.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\Build.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\Clear.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\Help.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\Lists.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\Make.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\make\Controller.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\make\Model.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\optimize\Config.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\optimize\Route.php	/^    protected function configure()$/;"	f
configure	.\thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^    protected function configure()$/;"	f
configure	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^    public function configure()$/;"	f
configure	.\vendor\topthink\think-queue\src\queue\command\Restart.php	/^    public function configure()$/;"	f
configure	.\vendor\topthink\think-queue\src\queue\command\Subscribe.php	/^    public function configure()$/;"	f
configure	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function configure()$/;"	f
configureIO	.\thinkphp\library\think\Console.php	/^    protected function configureIO(Input $input, Output $output)$/;"	f
confirm	.\thinkphp\library\think\Validate.php	/^    protected function confirm($value, $rule, $data, $field = '')$/;"	f
confirm	.\thinkphp\library\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	f
connect	.\thinkphp\library\think\Cache.php	/^    public static function connect(array $options = [], $name = false)$/;"	f
connect	.\thinkphp\library\think\Db.php	/^    public static function connect($config = [], $name = false)$/;"	f
connect	.\thinkphp\library\think\db\Connection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false)$/;"	f
connect	.\thinkphp\library\think\db\Query.php	/^    public function connect($config)$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function connect();$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function connect()$/;"	f
connect	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function connect(array $config = [], $linkNum = 0)$/;"	f
connect	.\vendor\topthink\think-mongo\src\Query.php	/^    public function connect($config)$/;"	f
connectDblib	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function connectDblib()$/;"	f
connection	.\thinkphp\library\think\Model.php	/^                $connection = $this->connection;$/;"	v
connection	.\thinkphp\library\think\Model.php	/^                $connection = array_merge(Config::get('database'), $this->connection);$/;"	v
connection	.\thinkphp\library\think\Model.php	/^            $connection = [];$/;"	v
connection	.\thinkphp\library\think\Model.php	/^    protected $connection = [];$/;"	v
connection	.\thinkphp\library\think\db\Builder.php	/^        $this->connection = $connection;$/;"	v
connection	.\thinkphp\library\think\db\Builder.php	/^    protected $connection;$/;"	v
connection	.\thinkphp\library\think\db\Query.php	/^        $this->connection = $connection ?: Db::connect([], true);$/;"	v
connection	.\thinkphp\library\think\db\Query.php	/^        $this->connection = Db::connect($config);$/;"	v
connection	.\thinkphp\library\think\db\Query.php	/^    protected $connection;$/;"	v
connection	.\thinkphp\library\think\db\Query.php	/^    public function __construct(Connection $connection = null, $model = null)$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $this->connection = null;$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->connection = $connection;$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $connection;$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $this->connection = null;$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $this->connection = null;$/;"	v
connection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $this->connection = null;$/;"	v
connection	.\vendor\topthink\think-mongo\src\Builder.php	/^        $this->connection = $connection;$/;"	v
connection	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected $connection;$/;"	v
connection	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->connection = $connection ?: Db::connect([], true);$/;"	v
connection	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->connection = Db::connect($config);$/;"	v
connection	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $connection;$/;"	v
connection	.\vendor\topthink\think-mongo\src\Query.php	/^    public function __construct(Connection $connection = null, $model = '')$/;"	v
connector	.\vendor\topthink\think-queue\src\Queue.php	/^    protected static $connector;$/;"	v
console	.\thinkphp\library\think\Console.php	/^            $console = new self($config['name'], $config['version'], $config['user']);$/;"	v
console	.\thinkphp\library\think\Console.php	/^        $console = self::init(false);$/;"	v
console	.\thinkphp\library\think\Console.php	/^        static $console;$/;"	v
console	.\thinkphp\library\think\console\Command.php	/^        $this->console = $console;$/;"	v
console	.\thinkphp\library\think\console\Command.php	/^    private $console;$/;"	v
console	.\thinkphp\library\think\console\Command.php	/^    public function setConsole(Console $console = null)$/;"	v
console	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->console   = $console;$/;"	v
console	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private $console;$/;"	v
console	.\thinkphp\library\think\debug\Console.php	/^    protected function console($type, $msg)$/;"	f
consoleDefinitionMerged	.\thinkphp\library\think\console\Command.php	/^        $this->consoleDefinitionMerged = false;$/;"	v
consoleDefinitionMerged	.\thinkphp\library\think\console\Command.php	/^        $this->consoleDefinitionMerged = true;$/;"	v
consoleDefinitionMerged	.\thinkphp\library\think\console\Command.php	/^    private $consoleDefinitionMerged         = false;$/;"	v
consoleDefinitionMergedWithArgs	.\thinkphp\library\think\console\Command.php	/^            $this->consoleDefinitionMergedWithArgs = true;$/;"	v
consoleDefinitionMergedWithArgs	.\thinkphp\library\think\console\Command.php	/^    private $consoleDefinitionMergedWithArgs = false;$/;"	v
constantName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $constantName = 'static::' . str_replace(' ', '_', strtoupper(trim($action)));$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null);$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null);$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function dropForeignKey($columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasForeignKey($columns, $constraint = null)$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->constraint = $constraint;$/;"	v
constraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $constraint;$/;"	v
constraintName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $constraintName = $foreignKey->getConstraint() ?: $tableName . '_' . implode('_', $foreignKey->getColumns());$/;"	v
constraintName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $constraintName = "DF_{$tableName}_{$newColumn->getName()}";$/;"	v
constructor	.\thinkphp\library\think\App.php	/^        $constructor = $reflect->getConstructor();$/;"	v
contains	.\vendor\topthink\think-helper\src\Str.php	/^    public static function contains($haystack, $needles)$/;"	f
content	.\thinkphp\library\think\Build.php	/^                            $content = "<?php\\nnamespace {$space};\\n\\nclass {$class}\\n{\\n\\n}";$/;"	v
content	.\thinkphp\library\think\Build.php	/^                            $content = "<?php\\nnamespace {$space};\\n\\nuse think\\Model;\\n\\nclass {$class} extends Model\\n{\\n\\n}";$/;"	v
content	.\thinkphp\library\think\Build.php	/^                            $content = '';$/;"	v
content	.\thinkphp\library\think\Build.php	/^            $content = str_replace($/;"	v
content	.\thinkphp\library\think\Debug.php	/^                    $content = $content . $output;$/;"	v
content	.\thinkphp\library\think\Debug.php	/^                    $content = substr($content, 0, $pos) . $output . substr($content, $pos);$/;"	v
content	.\thinkphp\library\think\Request.php	/^            $content = $this->input;$/;"	v
content	.\thinkphp\library\think\Request.php	/^            $this->content = $this->input;$/;"	v
content	.\thinkphp\library\think\Request.php	/^    protected $content;$/;"	v
content	.\thinkphp\library\think\Response.php	/^            $content = $this->output($this->data);$/;"	v
content	.\thinkphp\library\think\Response.php	/^            $this->content = (string) $content;$/;"	v
content	.\thinkphp\library\think\Response.php	/^        $this->content = (string) $content;$/;"	v
content	.\thinkphp\library\think\Response.php	/^    protected $content = null;$/;"	v
content	.\thinkphp\library\think\Response.php	/^    public function content($content)$/;"	f
content	.\thinkphp\library\think\Template.php	/^                    $content         = str_replace($match[0], "<!--###literal{$count}###-->", $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^                    $content = str_replace($match[0], $parseStr, $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^                    $content = str_replace($match[0], $this->literal[$match[1]], $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^                    $content = str_replace($replace, $content, file_get_contents($layoutFile));$/;"	v
content	.\thinkphp\library\think\Template.php	/^                    $content = str_replace($this->config['layout_item'], $content, file_get_contents($layoutFile));$/;"	v
content	.\thinkphp\library\think\Template.php	/^                $content = file_get_contents($template);$/;"	v
content	.\thinkphp\library\think\Template.php	/^                $content = str_replace($match[0], $str, $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^                $content = str_replace('{__NOLAYOUT__}', '', $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^            $content = $extend;$/;"	v
content	.\thinkphp\library\think\Template.php	/^            $content = ob_get_clean();$/;"	v
content	.\thinkphp\library\think\Template.php	/^            $content = preg_replace($find, $replace, $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^            $content = str_replace($matches[0], '', $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^            $content = str_replace('{__NOLAYOUT__}', '', $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^        $content = '<?php if (!defined(\\'THINK_PATH\\')) exit(); \/*' . serialize($this->includeFile) . '*\/ ?>' . "\\n" . $content;$/;"	v
content	.\thinkphp\library\think\Template.php	/^        $content = preg_replace('\/(<\\?(?!php|=|$))\/i', '<?php echo \\'\\\\1\\'; ?>' . "\\n", $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^        $content = preg_replace('\/\\?>\\s*<\\?php\\s(?!echo\\b)\/s', '', $content);$/;"	v
content	.\thinkphp\library\think\Template.php	/^        $content = str_replace(array_keys($replace), array_values($replace), $content);$/;"	v
content	.\thinkphp\library\think\View.php	/^        $content = ob_get_clean();$/;"	v
content	.\thinkphp\library\think\cache\driver\File.php	/^                $content = gzuncompress($content);$/;"	v
content	.\thinkphp\library\think\cache\driver\File.php	/^            $content      = substr($content, 32);$/;"	v
content	.\thinkphp\library\think\cache\driver\File.php	/^            $content = unserialize($content);$/;"	v
content	.\thinkphp\library\think\cache\driver\File.php	/^        $content      = file_get_contents($filename);$/;"	v
content	.\thinkphp\library\think\cache\driver\Sqlite.php	/^                $content = gzuncompress($content);$/;"	v
content	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $content = sqlite_fetch_single($result);$/;"	v
content	.\thinkphp\library\think\config\driver\Xml.php	/^            $content = simplexml_load_file($config);$/;"	v
content	.\thinkphp\library\think\config\driver\Xml.php	/^            $content = simplexml_load_string($config);$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Config.php	/^        $content = '';$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Config.php	/^        $content = '<?php ' . PHP_EOL . $this->buildCacheContent($module);$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $content    = '';$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Route.php	/^        $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Route.php	/^        $content = str_replace(['\\'[__start__', '__end__]\\''], '', stripcslashes($content));$/;"	v
content	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
content	.\thinkphp\library\think\console\output\driver\Buffer.php	/^        $content      = $this->buffer;$/;"	v
content	.\thinkphp\library\think\exception\Handle.php	/^        $content  = ob_get_clean();$/;"	v
content	.\thinkphp\library\think\template\TagLib.php	/^                                $content = substr_replace($content, $begin['str'], $begin['pos'], $begin['len']);$/;"	v
content	.\thinkphp\library\think\template\TagLib.php	/^                        $content = substr_replace($content, $replace[1], $node['end'][1], strlen($node['end'][0]));$/;"	v
content	.\thinkphp\library\think\template\TagLib.php	/^                    $content = substr_replace($content, $begin['str'], $begin['pos'], $begin['len']);$/;"	v
content	.\thinkphp\library\think\template\TagLib.php	/^            $content = preg_replace_callback($regex, function ($matches) use (&$tags, &$lib) {$/;"	v
content	.\thinkphp\library\think\view\driver\Php.php	/^        $this->content = $content;$/;"	v
content	.\thinkphp\library\think\view\driver\Php.php	/^    protected $content;$/;"	v
content	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $content = ob_get_clean();$/;"	v
contentType	.\thinkphp\library\think\Request.php	/^        $contentType = $this->server('CONTENT_TYPE');$/;"	v
contentType	.\thinkphp\library\think\Request.php	/^    public function contentType()$/;"	f
contentType	.\thinkphp\library\think\Response.php	/^    protected $contentType = 'text\/html';$/;"	v
contentType	.\thinkphp\library\think\Response.php	/^    public function contentType($contentType, $charset = 'utf-8')$/;"	f
contentType	.\thinkphp\library\think\debug\Console.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
contentType	.\thinkphp\library\think\debug\Html.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
contentType	.\thinkphp\library\think\response\Json.php	/^    protected $contentType = 'application\/json';$/;"	v
contentType	.\thinkphp\library\think\response\Jsonp.php	/^    protected $contentType = 'application\/javascript';$/;"	v
contentType	.\thinkphp\library\think\response\View.php	/^    protected $contentType = 'text\/html';$/;"	v
contentType	.\thinkphp\library\think\response\Xml.php	/^    protected $contentType = 'text\/xml';$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $contents = preg_replace('{^.+?<\\?}s', '<?', $contents, 1, $replacements);$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $contents = substr($contents, 0, $pos);$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = @php_strip_whitespace($path);$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{"[^"\\\\\\\\]*+(\\\\\\\\.[^"\\\\\\\\]*+)*+"|\\'[^\\'\\\\\\\\]*+(\\\\\\\\.[^\\'\\\\\\\\]*+)*+\\'}s', 'null', $contents);$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{<<<\\s*(\\'?)(\\w+)\\\\1(?:\\r\\n|\\n|\\r)(?:.*?)(?:\\r\\n|\\n|\\r)\\\\2(?=\\r\\n|\\n|\\r|;)}s', 'null', $contents);$/;"	v
contents	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{\\?>.+<\\?}s', '?><?', $contents);$/;"	v
contents	.\thinkphp\library\think\exception\Handle.php	/^            $contents = file($exception->getFile());$/;"	v
contents	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $contents = file_get_contents($this->getTemplate());$/;"	v
contents	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $contents = strtr($contents, [$/;"	v
contents	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $contents = file_get_contents($this->getTemplate());$/;"	v
contents	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $contents = strtr($contents, $classes);$/;"	v
context	.\thinkphp\library\think\exception\ErrorException.php	/^    public function __construct($severity, $message, $file, $line, array $context = [])$/;"	v
controller	.\thinkphp\helper.php	/^    function controller($name, $layer = 'controller', $appendSuffix = false)$/;"	f
controller	.\thinkphp\library\think\App.php	/^        $controller = $convert ? strtolower($controller) : $controller;$/;"	v
controller	.\thinkphp\library\think\App.php	/^        $controller = strip_tags($result[1] ?: $config['default_controller']);$/;"	v
controller	.\thinkphp\library\think\Loader.php	/^    public static function controller($name, $layer = 'controller', $appendSuffix = false, $empty = '')$/;"	f
controller	.\thinkphp\library\think\Request.php	/^            $this->controller = $controller;$/;"	v
controller	.\thinkphp\library\think\Request.php	/^    protected $controller;$/;"	v
controller	.\thinkphp\library\think\Request.php	/^    public function controller($controller = null)$/;"	f
controller	.\thinkphp\library\think\Route.php	/^                    $controller = array_shift($path);$/;"	v
controller	.\thinkphp\library\think\Route.php	/^                    $controller = implode('.', $item);$/;"	v
controller	.\thinkphp\library\think\Route.php	/^                $controller = !empty($path) ? array_shift($path) : null;$/;"	v
controller	.\thinkphp\library\think\Route.php	/^        $controller       = !empty($path) ? array_pop($path) : null;$/;"	v
controller	.\thinkphp\library\think\Route.php	/^     * @param string    $type 绑定类型 默认为module 支持 namespace class controller$/;"	c
controller	.\thinkphp\library\think\Route.php	/^    public static function controller($rule, $route = '', $option = [], $pattern = [])$/;"	f
controller	.\thinkphp\library\think\Url.php	/^                $controller = Loader::parseName($controller);$/;"	v
controller	.\thinkphp\library\think\Url.php	/^                $controller = empty($path) ? $controller : array_pop($path);$/;"	v
controller	.\thinkphp\library\think\Url.php	/^            $controller = $request->controller();$/;"	v
controller	.\thinkphp\library\think\view\driver\Php.php	/^            $controller = Loader::parseName($request->controller());$/;"	v
controller	.\thinkphp\library\think\view\driver\Think.php	/^            $controller = Loader::parseName($request->controller());$/;"	v
convert	.\thinkphp\library\think\App.php	/^        $convert = is_bool($convert) ? $convert : $config['url_convert'];$/;"	v
convert	.\thinkphp\library\think\App.php	/^    public static function module($result, $config, $convert = null)$/;"	v
convert	.\thinkphp\library\think\Route.php	/^    private static function parseModule($url, $convert = false)$/;"	v
convertExceptionToResponse	.\thinkphp\library\think\exception\Handle.php	/^    protected function convertExceptionToResponse(Exception $exception)$/;"	f
convertObjectID	.\vendor\topthink\think-mongo\src\Connection.php	/^    private function convertObjectID(&$data)$/;"	f
convertToArray	.\thinkphp\library\think\Collection.php	/^    protected function convertToArray($items)$/;"	f
cookie	.\thinkphp\helper.php	/^    function cookie($name, $value = '', $option = null)$/;"	f
cookie	.\thinkphp\library\think\Request.php	/^            $this->cookie = Cookie::get();$/;"	v
cookie	.\thinkphp\library\think\Request.php	/^            return $this->cookie = array_merge($this->cookie, $name);$/;"	v
cookie	.\thinkphp\library\think\Request.php	/^    protected $cookie  = [];$/;"	v
cookie	.\thinkphp\library\think\Request.php	/^    public function cookie($name = '', $default = null, $filter = '')$/;"	f
copyExtraFiles	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^    protected function copyExtraFiles(PackageInterface $package)$/;"	f
copyTestDir	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^    private function copyTestDir(PackageInterface $package)$/;"	f
cost	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^        $cost = isset($options['rounds']) ? $options['rounds'] : $this->rounds;$/;"	v
count	.\thinkphp\library\think\Collection.php	/^    public function count()$/;"	f
count	.\thinkphp\library\think\Model.php	/^            $count    = $this->$relation()->relationCount($result, $closure);$/;"	v
count	.\thinkphp\library\think\Model.php	/^        $count     = 0;$/;"	v
count	.\thinkphp\library\think\Paginator.php	/^    public function count()$/;"	f
count	.\thinkphp\library\think\Request.php	/^                    $count = count($file['name']);$/;"	v
count	.\thinkphp\library\think\Template.php	/^                $count = count($this->literal);$/;"	v
count	.\thinkphp\library\think\console\output\driver\Console.php	/^                for ($i = 0, $count = count($trace); $i < $count; ++$i) {$/;"	v
count	.\thinkphp\library\think\db\Query.php	/^                    $count  = count($fields);$/;"	v
count	.\thinkphp\library\think\db\Query.php	/^                $count    = '(' . $this->model->$relation()->getRelationCountQuery($closure) . ')';$/;"	v
count	.\thinkphp\library\think\db\Query.php	/^    public function count($field = '*')$/;"	f
count	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*')$/;"	v
count	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $count = $this->belongsToManyQuery($this->foreignKey, $this->localKey, ['pivot.' . $this->localKey => $pk])->count();$/;"	v
count	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $count = 0;$/;"	v
count	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\think\model\relation\HasMany.php	/^            $count = $this->query->where($this->foreignKey, $result->$localKey)->count();$/;"	v
count	.\thinkphp\library\think\model\relation\HasMany.php	/^        $count    = 0;$/;"	v
count	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $count = $this->query->where([$this->morphKey => $result->$pk, $this->morphType => $this->type])->count();$/;"	v
count	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $count = 0;$/;"	v
count	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
count	.\thinkphp\library\traits\model\SoftDelete.php	/^        $count = 0;$/;"	v
count	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function count($options)$/;"	f
count	.\vendor\topthink\think-mongo\src\Query.php	/^                $count  = count($fields);$/;"	v
count	.\vendor\topthink\think-mongo\src\Query.php	/^    public function count()$/;"	f
create	.\thinkphp\library\think\Model.php	/^    public static function create($data = [], $field = null)$/;"	f
create	.\thinkphp\library\think\Request.php	/^    public static function create($uri, $method = 'GET', $params = [], $cookie = [], $files = [], $server = [], $content = null)$/;"	f
create	.\thinkphp\library\think\Response.php	/^    public static function create($data = '', $type = '', $code = 200, array $header = [], $options = [])$/;"	f
create	.\thinkphp\library\think\process\Builder.php	/^    public static function create(array $arguments = [])$/;"	f
create	.\thinkphp\library\think\process\pipes\Unix.php	/^    public static function create(Process $process, $input)$/;"	f
create	.\thinkphp\library\think\process\pipes\Windows.php	/^    public static function create(Process $process, $input)$/;"	f
create	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getColumnSqlDefinition(Column $column, $create = true)$/;"	v
create	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function create()$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function createDatabase($name, $options = array());$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function createDatabase($name, $options)$/;"	f
createDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function createDatabase($name, $options);$/;"	f
createDefinition	.\thinkphp\library\think\console\command\Lists.php	/^    private function createDefinition()$/;"	f
createMap	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function createMap($path, $namespace = null)$/;"	f
createPayload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    protected function createPayload($job, $data = '', $queue = null)$/;"	f
createPayload	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function createPayload($job, $data = '', $queue = null)$/;"	f
createPlainPayload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    protected function createPlainPayload($job, $data)$/;"	f
createSchema	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function createSchema($schemaName = 'public')$/;"	f
createSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function createSchemaTable();$/;"	f
createSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function createSchemaTable()$/;"	f
createSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function createSchemaTable()$/;"	f
createSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function createSchemaTable()$/;"	f
createStyleFromString	.\thinkphp\library\think\console\output\Formatter.php	/^    private function createStyleFromString($string)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function createTable(Table $table);$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function createTable(Table $table)$/;"	f
createTime	.\thinkphp\library\think\Model.php	/^    protected $createTime = 'create_time';$/;"	v
createdAtColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $createdAtColumnName = is_null($createdAtColumnName) ? 'created_at' : $createdAtColumnName;$/;"	v
crop	.\vendor\topthink\think-image\src\Image.php	/^    public function crop($w, $h, $x = 0, $y = 0, $width = null, $height = null)$/;"	f
css	.\thinkphp\library\think\log\driver\Socket.php	/^    protected $css = [$/;"	v
curl	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^            $this->curl = curl_init();$/;"	v
curl	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^            $this->curl = null;$/;"	v
curl	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $curl = null;$/;"	v
current	.\thinkphp\library\think\Url.php	/^                $current = $request->host();$/;"	v
current	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $current = $this->pivot->where($this->localKey, $this->parent->$pk)$/;"	v
current	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^            $current = current($this->frames);$/;"	v
current	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $current    = $this->getCurrentVersion();$/;"	v
currentArguments	.\thinkphp\library\think\console\Command.php	/^            $currentArguments = $this->definition->getArguments();$/;"	v
currentComment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $currentComment = $this->getColumnComment($tableName, $column->getName());$/;"	v
currentGroup	.\thinkphp\library\think\Route.php	/^        $currentGroup = self::getGroup('name');$/;"	v
currentOption	.\thinkphp\library\think\Route.php	/^                $currentOption  = self::getGroup('option');$/;"	v
currentOption	.\thinkphp\library\think\Route.php	/^            $currentOption  = self::getGroup('option');$/;"	v
currentPage	.\thinkphp\library\think\Paginator.php	/^            $this->currentPage = $this->setCurrentPage($currentPage);$/;"	v
currentPage	.\thinkphp\library\think\Paginator.php	/^    protected $currentPage;$/;"	v
currentPage	.\thinkphp\library\think\Paginator.php	/^    public function __construct($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	v
currentPage	.\thinkphp\library\think\Paginator.php	/^    public function currentPage()$/;"	f
currentPage	.\thinkphp\library\think\Paginator.php	/^    public static function make($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	v
currentPattern	.\thinkphp\library\think\Route.php	/^                $currentPattern = self::getGroup('pattern');$/;"	v
currentPattern	.\thinkphp\library\think\Route.php	/^            $currentPattern = self::getGroup('pattern');$/;"	v
currentRules	.\thinkphp\library\think\Route.php	/^                    $currentRules     = isset($item[$method]) ? $item[$method] : $item['*'];$/;"	v
currentScene	.\thinkphp\library\think\Validate.php	/^            $this->currentScene = $name;$/;"	v
currentScene	.\thinkphp\library\think\Validate.php	/^    protected $currentScene = null;$/;"	v
current_uri	.\thinkphp\library\think\log\driver\File.php	/^                    $current_uri = "cmd:" . implode(' ', $_SERVER['argv']);$/;"	v
current_uri	.\thinkphp\library\think\log\driver\File.php	/^                    $current_uri = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
current_uri	.\thinkphp\library\think\log\driver\Socket.php	/^                $current_uri = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
current_uri	.\thinkphp\library\think\log\driver\Socket.php	/^                $current_uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->cursor    = null;$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->cursor = $this->mongo->executeCommand($dbName, $command, $readPreference);$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->cursor = $this->mongo->executeQuery($namespace, $query, $readPreference);$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->cursor = null;$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $cursor; \/\/ MongoCursor Object$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Query.php	/^            $cursor = $this->field($field)->fetchCursor(true)->find();$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Query.php	/^            $cursor = $this->field($field)->fetchCursor(true)->select();$/;"	v
cursor	.\vendor\topthink\think-mongo\src\Query.php	/^        $cursor = $this->cmd('listCollections', null, $db);$/;"	v
cwd	.\thinkphp\library\think\Process.php	/^            $this->cwd = getcwd();$/;"	v
cwd	.\thinkphp\library\think\Process.php	/^        $this->cwd         = $cwd;$/;"	v
cwd	.\thinkphp\library\think\Process.php	/^        $this->cwd = $cwd;$/;"	v
cwd	.\thinkphp\library\think\Process.php	/^    private $cwd;$/;"	v
cwd	.\thinkphp\library\think\Process.php	/^    public function __construct($commandline, $cwd = null, array $env = null, $input = null, $timeout = 60, array $options = [])$/;"	v
cwd	.\thinkphp\library\think\process\Builder.php	/^        $this->cwd = $cwd;$/;"	v
cwd	.\thinkphp\library\think\process\Builder.php	/^    private $cwd;$/;"	v
cycle	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^                        $cycle = 0;$/;"	v
cycle	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^                $cycle = 0;$/;"	v
daemon	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function daemon($queue = null, $delay = 0, $memory = 128, $sleep = 3, $maxTries = 0)$/;"	f
data	.\thinkphp\helper.php	/^    function widget($name, $data = [])$/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = $dispatch['response'];$/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = Loader::action($/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = Response::create($dispatch['url'], 'redirect')$/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = self::invokeFunction($dispatch['function']);$/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = self::invokeMethod($dispatch['method'], $vars);$/;"	v
data	.\thinkphp\library\think\App.php	/^                $data = self::module($/;"	v
data	.\thinkphp\library\think\App.php	/^            $data = $exception->getResponse();$/;"	v
data	.\thinkphp\library\think\App.php	/^            $data = self::exec($dispatch, $config);$/;"	v
data	.\thinkphp\library\think\Db.php	/^ * @method integer delete(mixed $data = null) static 删除记录$/;"	v
data	.\thinkphp\library\think\Db.php	/^ * @method mixed find(mixed $data = null) static 查询单个记录$/;"	v
data	.\thinkphp\library\think\Db.php	/^ * @method mixed select(mixed $data = null) static 查询多个记录$/;"	v
data	.\thinkphp\library\think\Exception.php	/^    protected $data = [];$/;"	v
data	.\thinkphp\library\think\Model.php	/^                $data = get_object_vars($data);$/;"	v
data	.\thinkphp\library\think\Model.php	/^                $this->data = $data;$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data     = [];$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data   = null;$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data  = array_diff_key($data, array_flip($array));$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data  = array_intersect_key($data, array_flip($array));$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data = $this->data;$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data = $this->getChangedData();$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data = array_udiff_assoc($this->data, $this->origin, function ($a, $b) {$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $data = null;$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $this->data = $data;$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $this->data = [];$/;"	v
data	.\thinkphp\library\think\Model.php	/^            $this->data = get_object_vars($data);$/;"	v
data	.\thinkphp\library\think\Model.php	/^        $data = array_merge($this->data, $this->relation);$/;"	v
data	.\thinkphp\library\think\Model.php	/^    protected $data = [];$/;"	v
data	.\thinkphp\library\think\Model.php	/^    public function data($data, $value = null)$/;"	f
data	.\thinkphp\library\think\Model.php	/^    public function setAttr($name, $value, $data = [])$/;"	v
data	.\thinkphp\library\think\Process.php	/^        $data = $this->getErrorOutput();$/;"	v
data	.\thinkphp\library\think\Process.php	/^        $data = $this->getOutput();$/;"	v
data	.\thinkphp\library\think\Request.php	/^                    $data = $data[$val];$/;"	v
data	.\thinkphp\library\think\Request.php	/^                    $data = (string) $data;$/;"	v
data	.\thinkphp\library\think\Request.php	/^                $data = (array) $data;$/;"	v
data	.\thinkphp\library\think\Request.php	/^                $data = (boolean) $data;$/;"	v
data	.\thinkphp\library\think\Request.php	/^                $data = (float) $data;$/;"	v
data	.\thinkphp\library\think\Request.php	/^                $data = (int) $data;$/;"	v
data	.\thinkphp\library\think\Request.php	/^            $data = $this->cookie;$/;"	v
data	.\thinkphp\library\think\Request.php	/^            $data = Cookie::has($name) ? Cookie::get($name) : $default;$/;"	v
data	.\thinkphp\library\think\Request.php	/^            $data = is_array($file) ? array_merge($this->param, $file) : $this->param;$/;"	v
data	.\thinkphp\library\think\Response.php	/^        $data = $this->getContent();$/;"	v
data	.\thinkphp\library\think\Response.php	/^        $this->data = $data;$/;"	v
data	.\thinkphp\library\think\Response.php	/^    protected $data;$/;"	v
data	.\thinkphp\library\think\Response.php	/^    public function data($data)$/;"	f
data	.\thinkphp\library\think\Template.php	/^                    $data = $data[$val];$/;"	v
data	.\thinkphp\library\think\Template.php	/^                    $data = null;$/;"	v
data	.\thinkphp\library\think\Template.php	/^            $data = $this->data;$/;"	v
data	.\thinkphp\library\think\Template.php	/^            $this->data = $vars;$/;"	v
data	.\thinkphp\library\think\Template.php	/^            $this->data = array_merge($this->data, $name);$/;"	v
data	.\thinkphp\library\think\Template.php	/^    protected $data = [];$/;"	v
data	.\thinkphp\library\think\Validate.php	/^    protected function is($value, $rule, $data = [])$/;"	v
data	.\thinkphp\library\think\View.php	/^            $this->data = array_merge($this->data, $name);$/;"	v
data	.\thinkphp\library\think\View.php	/^    protected $data = [];$/;"	v
data	.\thinkphp\library\think\cache\driver\File.php	/^            $data = gzcompress($data, 3);$/;"	v
data	.\thinkphp\library\think\cache\driver\File.php	/^        $data   = "<?php\\n\/\/" . sprintf('%012d', $expire) . "\\n exit();?>\\n" . $data;$/;"	v
data	.\thinkphp\library\think\cache\driver\File.php	/^        $data = serialize($value);$/;"	v
data	.\thinkphp\library\think\db\Builder.php	/^            $data = is_array($value) ? $value : explode(',', $value);$/;"	v
data	.\thinkphp\library\think\db\Builder.php	/^        $data  = $this->parseData($data, $options);$/;"	v
data	.\thinkphp\library\think\db\Builder.php	/^        $data = $this->parseData($data, $options);$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^                    $data = $item;$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^                $data          = $item;$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^            $data = $field;$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^            $data = $value;$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^            $data = $value[1];$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^            $data = null;$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^        $data    = array_merge($options['data'], $data);$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^    public function data($field, $value = null)$/;"	f
data	.\thinkphp\library\think\db\Query.php	/^    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)$/;"	v
data	.\thinkphp\library\think\db\Query.php	/^    public function update(array $data = [])$/;"	v
data	.\thinkphp\library\think\exception\Handle.php	/^                $data = [$/;"	v
data	.\thinkphp\library\think\exception\Handle.php	/^            $data = $exception->getData();$/;"	v
data	.\thinkphp\library\think\exception\Handle.php	/^            $data = [$/;"	v
data	.\thinkphp\library\think\exception\Handle.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\model\Merge.php	/^                        $data = $this->parseData($name, $source);$/;"	v
data	.\thinkphp\library\think\model\Merge.php	/^                    $data = $this->parseData($name, $data);$/;"	v
data	.\thinkphp\library\think\model\Merge.php	/^                $data = $this->getChangedData();$/;"	v
data	.\thinkphp\library\think\model\Merge.php	/^                $data = $this->parseData($this->name, $data);$/;"	v
data	.\thinkphp\library\think\model\Merge.php	/^                $data = $this->parseData($this->name, $this->data);$/;"	v
data	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            $data = $this->eagerlyWhere($this->query, [$/;"	v
data	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $data = $this->eagerlyWhere($this->query, [$localKey => $result->$foreignKey], $localKey, $relation, $subRelation, $closure);$/;"	v
data	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $data = $this->eagerlyManyToMany([$/;"	v
data	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $data = $this->eagerlyManyToMany(['pivot.' . $this->localKey => $pk], $relation, $subRelation);$/;"	v
data	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\model\relation\HasMany.php	/^            $data = $data->getData();$/;"	v
data	.\thinkphp\library\think\model\relation\HasMany.php	/^            $data = $this->eagerlyOneToMany($this->query, [$/;"	v
data	.\thinkphp\library\think\model\relation\HasMany.php	/^            $data = $this->eagerlyOneToMany($this->query, [$this->foreignKey => $result->$localKey], $relation, $subRelation, $closure);$/;"	v
data	.\thinkphp\library\think\model\relation\HasMany.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\model\relation\HasOne.php	/^            $data = $this->eagerlyWhere($this->query, [$/;"	v
data	.\thinkphp\library\think\model\relation\HasOne.php	/^        $data = $this->eagerlyWhere($this->query, [$foreignKey => $result->$localKey], $foreignKey, $relation, $subRelation, $closure);$/;"	v
data	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $data = $data->getData();$/;"	v
data	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $data = $this->eagerlyMorphToMany([$/;"	v
data	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $data = $data->getData();$/;"	v
data	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $data = $this->eagerlyMorphToOne([$/;"	v
data	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\model\relation\MorphTo.php	/^                $data  = [];$/;"	v
data	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $data = (new $model)->with($subRelation)->find($pk);$/;"	v
data	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $data = $data->getData();$/;"	v
data	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $data = [];$/;"	v
data	.\thinkphp\library\think\process\pipes\Unix.php	/^            $data = '';$/;"	v
data	.\thinkphp\library\think\process\pipes\Windows.php	/^            $data     = '';$/;"	v
data	.\thinkphp\library\think\process\pipes\Windows.php	/^            $data = '';$/;"	v
data	.\thinkphp\library\think\response\Json.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
data	.\thinkphp\library\think\response\Jsonp.php	/^            $data = $handler . '(' . $data . ');';$/;"	v
data	.\thinkphp\library\think\response\Jsonp.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
data	.\thinkphp\library\think\response\Redirect.php	/^            $this->data = Session::get('redirect_url');$/;"	v
data	.\thinkphp\library\think\response\Xml.php	/^            $data = $data->toArray();$/;"	v
data	.\thinkphp\library\think\view\driver\Php.php	/^    public function display($content, $data = [])$/;"	v
data	.\thinkphp\library\think\view\driver\Php.php	/^    public function fetch($template, $data = [])$/;"	v
data	.\thinkphp\library\think\view\driver\Think.php	/^    public function display($template, $data = [], $config = [])$/;"	v
data	.\thinkphp\library\think\view\driver\Think.php	/^    public function fetch($template, $data = [], $config = [])$/;"	v
data	.\thinkphp\library\traits\model\SoftDelete.php	/^            $data = null;$/;"	v
data	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->data = $data;$/;"	v
data	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $data = array();$/;"	v
data	.\vendor\topthink\think-mongo\src\Builder.php	/^            $data = $this->parseData($data, $options);$/;"	v
data	.\vendor\topthink\think-mongo\src\Builder.php	/^            $data = [];$/;"	v
data	.\vendor\topthink\think-mongo\src\Builder.php	/^        $data  = $this->parseSet($data, $options);$/;"	v
data	.\vendor\topthink\think-mongo\src\Builder.php	/^        $data = $this->parseData($data, $options);$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^                    $data = $item;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^                $data          = $item;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^            $data      = isset($resultSet[0]) ? $resultSet[0] : null;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^            $data = $field;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^            $data = $value;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^            $data = $value[1];$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^            $data = null;$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^        $data    = array_merge($options['data'], $data);$/;"	v
data	.\vendor\topthink\think-mongo\src\Query.php	/^    public function data($field, $value = null)$/;"	f
data	.\vendor\topthink\think-queue\src\Queue.php	/^ * @method static later($delay, $job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\Queue.php	/^ * @method static push($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\common.php	/^    function queue($job, $data = '', $delay = 0, $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    abstract public function later($delay, $job, $data = '', $queue = null);$/;"	v
data	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    abstract public function push($job, $data = '', $queue = null);$/;"	v
data	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    protected function createPayload($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function push($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function createPayload($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function push($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    public function push($job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $data = json_decode($response);$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	v
data	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function push($job, $data = '', $queue = null)$/;"	v
dataToXml	.\thinkphp\library\think\response\Xml.php	/^    protected function dataToXml($data, $item, $id)$/;"	f
database	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^        $this->database      = $database;$/;"	v
database	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    protected $database;$/;"	v
dataread	.\thinkphp\library\think\process\pipes\Unix.php	/^            while ('' !== $dataread = (string) fread($pipe, self::CHUNK_SIZE)) {$/;"	v
dataread	.\thinkphp\library\think\process\pipes\Windows.php	/^                if (false !== $dataread = fread($fileHandle, self::CHUNK_SIZE)) {$/;"	v
dataread	.\thinkphp\library\think\process\pipes\Windows.php	/^            $dataread = null;$/;"	v
date	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $date    = $input->getOption('date');$/;"	v
date	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $date    = $input->getOption('date');$/;"	v
date	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function date($name)$/;"	f
date	.\vendor\topthink\think-mongo\src\Query.php	/^            $date = getdate();$/;"	v
dateFormat	.\thinkphp\library\think\Model.php	/^            $this->dateFormat = $this->getQuery()->getConfig('datetime_format');$/;"	v
dateFormat	.\thinkphp\library\think\Model.php	/^    protected $dateFormat;$/;"	v
dateFormat	.\thinkphp\library\think\Validate.php	/^    protected function dateFormat($value, $rule)$/;"	f
dateString	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $dateString = $dateTime->format('YmdHis');$/;"	v
dateString	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $dateString = $dateTime->format('YmdHis');$/;"	v
dateTime	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function dateTime($name)$/;"	f
dayOf	.\vendor\topthink\think-helper\src\Time.php	/^    public static function dayOf()$/;"	f
dayToNow	.\vendor\topthink\think-helper\src\Time.php	/^    public static function dayToNow($day = 1, $now = true)$/;"	f
daysAfter	.\vendor\topthink\think-helper\src\Time.php	/^    public static function daysAfter($day = 1)$/;"	f
daysAgo	.\vendor\topthink\think-helper\src\Time.php	/^    public static function daysAgo($day = 1)$/;"	f
daysToSecond	.\vendor\topthink\think-helper\src\Time.php	/^    public static function daysToSecond($day = 1)$/;"	f
db	.\thinkphp\helper.php	/^    function db($name = '', $config = [], $force = false)$/;"	f
db	.\thinkphp\library\think\Loader.php	/^    public static function db($config = [], $name = false)$/;"	f
db	.\thinkphp\library\think\Model.php	/^        $db     = $this->getQuery();$/;"	v
db	.\thinkphp\library\think\Model.php	/^    public function db($useBaseQuery = true, $buildNewQuery = true)$/;"	f
db	.\thinkphp\library\think\Validate.php	/^                $db = Db::name($rule[0]);$/;"	v
db	.\thinkphp\library\think\Validate.php	/^                $db = Loader::model($rule[0]);$/;"	v
db	.\thinkphp\library\think\Validate.php	/^            $db = new $rule[0];$/;"	v
db	.\thinkphp\library\think\console\command\optimize\Schema.php	/^        $db = isset($dbName) ? $dbName . '.' : '';$/;"	v
db	.\thinkphp\library\think\db\Query.php	/^        $db         = $this->getConfig('database');$/;"	v
db	.\thinkphp\library\think\model\Merge.php	/^        $db = $this->db();$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $db = new \\PDO($dsn, $options['user'], $options['pass'], $driverOptions);$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $db = null;$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $db = new \\PDO($dsn, $options['user'], $options['pass'], array(\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION));$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $db = null;$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $db = new \\PDO($dsn);$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $db = null;$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $db = new \\PDO($dsn, $options['user'], $options['pass'], $driverOptions);$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $db = new \\PDO($dsn, $options['user'], $options['pass'], $driverOptions);$/;"	v
db	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $db = null;$/;"	v
db	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function db($db = null)$/;"	f
db	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^        $this->db = Db::connect($this->options['dsn']);$/;"	v
db	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected $db;$/;"	v
dbConfig	.\thinkphp\library\think\db\Connection.php	/^        $dbConfig = [];$/;"	v
dbConfig	.\vendor\topthink\think-migration\src\Command.php	/^            $dbConfig = [$/;"	v
dbConfig	.\vendor\topthink\think-mongo\src\Connection.php	/^        $dbConfig = [];$/;"	v
dbMaster	.\thinkphp\library\think\db\Connection.php	/^            $dbMaster = [];$/;"	v
dbMaster	.\thinkphp\library\think\db\Connection.php	/^        $dbMaster = false;$/;"	v
dbName	.\thinkphp\library\think\console\command\optimize\Schema.php	/^                $dbName = Db::connect($config)->getConfig('database');$/;"	v
dbName	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName  = $class::getConfig('database');$/;"	v
dbName	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = $db;$/;"	v
dbName	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = $input->getOption('db');$/;"	v
dbName	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = Db::connect($config)->getConfig('database') . '.';$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->dbName  = $config['database'];$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->dbName = $db;$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^        $dbName = $dbName ?: $this->dbName;$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->dbName  = $this->config['database'];$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $dbName = ''; \/\/ dbName$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function command(Command $command, $dbName = '', ReadPreference $readPreference = null, $class = false, $typeMap)$/;"	v
dbName	.\vendor\topthink\think-mongo\src\Query.php	/^    public function command(Command $command, $dbName = '', ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	v
de	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^                $de           = new Decoder($src);$/;"	v
debug	.\thinkphp\helper.php	/^    function debug($start, $end = '', $dec = 6)$/;"	f
debug	.\thinkphp\library\think\App.php	/^    public static $debug = true;$/;"	v
debug	.\thinkphp\library\think\db\Connection.php	/^    protected function debug($start, $sql = '', $master = false)$/;"	f
debug	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function debug($start, $sql = '')$/;"	f
dec	.\thinkphp\library\think\Cache.php	/^    public static function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\Debug.php	/^    public static function getMemPeak($start, $end, $dec = 2)$/;"	v
dec	.\thinkphp\library\think\Debug.php	/^    public static function getRangeMem($start, $end, $dec = 2)$/;"	v
dec	.\thinkphp\library\think\Debug.php	/^    public static function getRangeTime($start, $end, $dec = 6)$/;"	v
dec	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function dec($name, $step = 1);$/;"	f
dec	.\thinkphp\library\think\cache\driver\File.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function dec($name, $step = 1)$/;"	f
dec	.\thinkphp\library\think\db\Query.php	/^    public function dec($field, $step = 1)$/;"	f
dec	.\vendor\topthink\think-mongo\src\Query.php	/^    public function dec($field, $step = 1)$/;"	f
decimal	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function decimal($name, $precision = 8, $scale = 2)$/;"	f
declaredClass	.\thinkphp\library\think\Loader.php	/^                $declaredClass = get_declared_classes();$/;"	v
decode	.\extend\php-jwt-master\src\JWT.php	/^    public static function decode($jwt, $key, array $allowed_algs = array())$/;"	f
decode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function decode($jwt, $key, array $allowed_algs = array())$/;"	f
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($encoded, '', array('HS256'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($encoded, 'my_key', array('HS256'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($encoded, 'my_key', array('HS256', 'HS512'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($encoded, 'my_key2', array('HS256'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($encoded, null, array('HS256'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($msg, $keys, array('HS256'));$/;"	v
decoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $decoded = JWT::decode($msg, $pubKey, array('RS256'));$/;"	v
decorated	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	v
decorated	.\thinkphp\library\think\console\output\Formatter.php	/^        $this->decorated = (bool) $decorated;$/;"	v
decorated	.\thinkphp\library\think\console\output\Formatter.php	/^    private $decorated = false;$/;"	v
decorated	.\thinkphp\library\think\console\output\driver\Console.php	/^        $decorated       = $this->hasColorSupport($this->stdout);$/;"	v
decorated	.\thinkphp\library\think\console\output\driver\Console.php	/^        $decorated = $this->hasColorSupport($stderr);$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                            $def = array('name' => $name);$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $def = '';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $def = ' CONSTRAINT "' . $constraintName . '" FOREIGN KEY ("' . implode('", "', $foreignKey->getColumns()) . '")';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $def = sprintf($/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $def = 'INDEX';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $def = 'UNIQUE INDEX';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $def = '';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $def = ' CONSTRAINT "';$/;"	v
def	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $def = sprintf($/;"	v
default	.\thinkphp\helper.php	/^    function input($key = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Cache.php	/^                $default = Config::get('cache.default');$/;"	v
default	.\thinkphp\library\think\Cache.php	/^    public static function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\Env.php	/^    public static function get($name, $default = null)$/;"	v
default	.\thinkphp\library\think\Model.php	/^                $default = $this->data[$field];$/;"	v
default	.\thinkphp\library\think\Model.php	/^                $default = null;$/;"	v
default	.\thinkphp\library\think\Paginator.php	/^    public static function getCurrentPage($varPage = 'page', $default = 1)$/;"	v
default	.\thinkphp\library\think\Request.php	/^        $default = array_pop($filters);$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function cookie($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function env($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function header($name = '', $default = null)$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function server($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\Request.php	/^    public function session($name = '', $default = null, $filter = '')$/;"	v
default	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function get($name, $default = false);$/;"	v
default	.\thinkphp\library\think\cache\driver\File.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function get($name, $default = false)$/;"	v
default	.\thinkphp\library\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	v
default	.\thinkphp\library\think\console\Output.php	/^            $default = $values[$default];$/;"	v
default	.\thinkphp\library\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	v
default	.\thinkphp\library\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	v
default	.\thinkphp\library\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	v
default	.\thinkphp\library\think\console\input\Argument.php	/^                $default = [];$/;"	v
default	.\thinkphp\library\think\console\input\Argument.php	/^        $this->default = $default;$/;"	v
default	.\thinkphp\library\think\console\input\Argument.php	/^    private $default;$/;"	v
default	.\thinkphp\library\think\console\input\Option.php	/^                $default = [];$/;"	v
default	.\thinkphp\library\think\console\input\Option.php	/^        $this->default = $this->acceptValue() ? $default : false;$/;"	v
default	.\thinkphp\library\think\console\input\Option.php	/^    private $default;$/;"	v
default	.\thinkphp\library\think\console\output\Ask.php	/^                $default = explode(',', $default);$/;"	v
default	.\thinkphp\library\think\console\output\Ask.php	/^        $default = $this->question->getDefault();$/;"	v
default	.\thinkphp\library\think\console\output\Descriptor.php	/^            $default = '';$/;"	v
default	.\thinkphp\library\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($argument->getDefault()));$/;"	v
default	.\thinkphp\library\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($option->getDefault()));$/;"	v
default	.\thinkphp\library\think\console\output\Question.php	/^        $this->default  = $default;$/;"	v
default	.\thinkphp\library\think\console\output\Question.php	/^    private $default;$/;"	v
default	.\thinkphp\library\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	v
default	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	v
default	.\thinkphp\library\think\console\output\question\Confirmation.php	/^        $default = $this->getDefault();$/;"	v
default	.\thinkphp\library\think\console\output\question\Confirmation.php	/^    public function __construct($question, $default = true, $trueAnswerRegex = '\/^y\/i')$/;"	v
default	.\thinkphp\library\think\db\Query.php	/^    public function value($field, $default = null, $force = false)$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $default = $this->castToBool($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $default = $this->getConnection()->quote($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $default = $this->castToBool($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $default = $this->getConnection()->quote($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $default = $this->castToBool($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $default = $this->getConnection()->quote($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $default = $column->getDefault();$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = $this->castToBool($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = $this->getConnection()->quote($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = $this->getDefaultValueDefinition($default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = 'DEFAULT NULL';$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = (int) $default;$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $default = null;$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $default = $newColumn->getDefault();$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $default = preg_replace(array("\/\\('(.*)'\\)\/", "\/\\(\\((.*)\\)\\)\/", "\/\\((.*)\\)\/"), '$1', $default);$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->default = $default;$/;"	v
default	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $default = null;$/;"	v
default	.\vendor\topthink\think-migration\src\Command.php	/^    protected function getConfig($name, $default = null)$/;"	v
default	.\vendor\topthink\think-mongo\src\Query.php	/^    public function value($field, $default = null)$/;"	v
defaultCommand	.\thinkphp\library\think\Console.php	/^        $this->defaultCommand = $commandName;$/;"	v
defaultCommand	.\thinkphp\library\think\Console.php	/^        $this->defaultCommand = 'list';$/;"	v
defaultCommand	.\thinkphp\library\think\Console.php	/^    private $defaultCommand;$/;"	v
defaultCommands	.\thinkphp\library\think\Console.php	/^        $defaultCommands = [];$/;"	v
defaultCommands	.\thinkphp\library\think\Console.php	/^    private static $defaultCommands = [$/;"	v
defaultConstraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $defaultConstraint = $this->getDefaultConstraint($tableName, $columnName);$/;"	v
defaultOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $defaultOptions = array($/;"	v
definition	.\thinkphp\library\think\Console.php	/^        $this->definition     = $this->getDefaultInputDefinition();$/;"	v
definition	.\thinkphp\library\think\Console.php	/^        $this->definition = $definition;$/;"	v
definition	.\thinkphp\library\think\Console.php	/^    private $definition;$/;"	v
definition	.\thinkphp\library\think\console\Command.php	/^            $this->definition = $definition;$/;"	v
definition	.\thinkphp\library\think\console\Command.php	/^        $this->definition = new Definition();$/;"	v
definition	.\thinkphp\library\think\console\Command.php	/^    private $definition;$/;"	v
definition	.\thinkphp\library\think\console\Input.php	/^        $this->definition = $definition;$/;"	v
definition	.\thinkphp\library\think\console\Input.php	/^        $this->definition = new Definition();$/;"	v
definition	.\thinkphp\library\think\console\Input.php	/^    protected $definition;$/;"	v
definition	.\thinkphp\library\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	v
definition	.\thinkphp\library\think\console\output\Descriptor.php	/^        $definition = $command->getNativeDefinition();$/;"	v
definition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $definition = $row['Type'] . ' ' . $null . $extra;$/;"	v
definitionsWithLimits	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected $definitionsWithLimits = array($/;"	v
delay	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^        $this->delay = $delay;$/;"	v
delay	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^    public $delay;$/;"	v
delay	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^    public function delay($delay)$/;"	f
delay	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    public function pop($queue = null, $delay = 0, $sleep = 3, $maxTries = 0)$/;"	v
delay	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^        $delay = $input->getOption('delay');$/;"	v
delay	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        $delay = $input->getOption('delay');$/;"	v
delay	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function daemon($queue = null, $delay = 0, $memory = 128, $sleep = 3, $maxTries = 0)$/;"	v
delays	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^                $this->delays = $de->getDelays();$/;"	v
delays	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    private $delays = [];$/;"	v
delete	.\thinkphp\library\think\Cookie.php	/^    public static function delete($name, $prefix = null)$/;"	f
delete	.\thinkphp\library\think\Model.php	/^    public function delete()$/;"	f
delete	.\thinkphp\library\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	f
delete	.\thinkphp\library\think\Route.php	/^    public static function delete($rule, $route = '', $option = [], $pattern = [])$/;"	f
delete	.\thinkphp\library\think\Session.php	/^    public static function delete($name, $prefix = null)$/;"	f
delete	.\thinkphp\library\think\db\Builder.php	/^    public function delete($options)$/;"	f
delete	.\thinkphp\library\think\db\Query.php	/^    public function delete($data = null)$/;"	f
delete	.\thinkphp\library\think\model\Merge.php	/^    public function delete()$/;"	f
delete	.\thinkphp\library\traits\model\SoftDelete.php	/^    public function delete($force = false)$/;"	f
delete	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function delete($options)$/;"	f
delete	.\vendor\topthink\think-mongo\src\Query.php	/^    public function delete($data = null)$/;"	f
delete	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function delete()$/;"	f
delete	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function delete()$/;"	f
delete	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function delete()$/;"	f
delete	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function delete()$/;"	f
deleteMessage	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function deleteMessage($queue, $id)$/;"	f
deleteOptions	.\vendor\topthink\think-mongo\src\Builder.php	/^            $deleteOptions = ['limit' => 0];$/;"	v
deleteOptions	.\vendor\topthink\think-mongo\src\Builder.php	/^            $deleteOptions = ['limit' => 1];$/;"	v
deleteReserved	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function deleteReserved($id)$/;"	f
deleteReserved	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function deleteReserved($queue, $job)$/;"	f
deleteSql	.\thinkphp\library\think\db\Builder.php	/^    protected $deleteSql    = 'DELETE FROM %TABLE% %USING% %JOIN% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
deleteSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $deleteSql       = 'DELETE FROM %TABLE%  %USING% FROM %TABLE%  %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
deleted	.\vendor\topthink\think-queue\src\queue\Job.php	/^        $this->deleted = true;$/;"	v
deleted	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected $deleted = false;$/;"	v
delimiter	.\vendor\topthink\think-helper\src\Str.php	/^    public static function snake($value, $delimiter = '_')$/;"	v
denyIp	.\thinkphp\library\think\Validate.php	/^    protected function denyIp($value, $rule)$/;"	f
depr	.\thinkphp\library\think\App.php	/^        $depr   = $config['pathinfo_depr'];$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    private static function checkRoute($request, $rules, $url, $depr = '\/', $group = '', $options = [])$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    private static function checkUrlBind(&$url, &$rules, $depr = '\/')$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function bindToClass($url, $class, $depr = '\/')$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function bindToController($url, $controller, $depr = '\/')$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function bindToModule($url, $controller, $depr = '\/')$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function bindToNamespace($url, $namespace, $depr = '\/')$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function check($request, $url, $depr = '\/', $checkDomain = false)$/;"	v
depr	.\thinkphp\library\think\Route.php	/^    public static function parseUrl($url, $depr = '\/', $autoSearch = false)$/;"	v
depr	.\thinkphp\library\think\Url.php	/^        $depr = Config::get('pathinfo_depr');$/;"	v
depr	.\thinkphp\library\think\view\driver\Php.php	/^        $depr = $this->config['view_depr'];$/;"	v
depr	.\thinkphp\library\think\view\driver\Think.php	/^        $depr = $this->config['view_depr'];$/;"	v
describe	.\thinkphp\library\think\console\Output.php	/^    public function describe($object, array $options = [])$/;"	f
describe	.\thinkphp\library\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	f
describeCommand	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	f
describeConsole	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	f
describeInputArgument	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	f
describeInputDefinition	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	f
describeInputOption	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	f
describeTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function describeTable($tableName)$/;"	f
describedNamespace	.\thinkphp\library\think\console\output\Descriptor.php	/^        $describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;$/;"	v
description	.\thinkphp\library\think\console\Command.php	/^        $this->description = $description;$/;"	v
description	.\thinkphp\library\think\console\Command.php	/^    private $description;$/;"	v
description	.\thinkphp\library\think\console\input\Argument.php	/^        $this->description = $description;$/;"	v
description	.\thinkphp\library\think\console\input\Argument.php	/^    private $description;$/;"	v
description	.\thinkphp\library\think\console\input\Option.php	/^        $this->description = $description;$/;"	v
description	.\thinkphp\library\think\console\input\Option.php	/^    private $description;$/;"	v
description	.\thinkphp\library\think\console\output\Descriptor.php	/^        $description        = new ConsoleDescription($console, $describedNamespace);$/;"	v
descriptor	.\thinkphp\library\think\console\Output.php	/^        $descriptor = new Descriptor();$/;"	v
descriptors	.\thinkphp\library\think\Process.php	/^            $descriptors = array_merge($descriptors, [['pipe', 'w']]);$/;"	v
descriptors	.\thinkphp\library\think\Process.php	/^        $descriptors     = $this->getDescriptors();$/;"	v
descriptors	.\thinkphp\library\think\Process.php	/^        $descriptors = $this->processPipes->getDescriptors($this->outputDisabled);$/;"	v
descriptorspec	.\thinkphp\library\think\console\output\driver\Console.php	/^        $descriptorspec = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];$/;"	v
destination	.\thinkphp\library\think\log\driver\File.php	/^            $destination = $this->config['path'] . $filename;$/;"	v
destination	.\thinkphp\library\think\log\driver\File.php	/^            $destination = $this->config['path'] . 'single.log';$/;"	v
destroy	.\thinkphp\library\think\Model.php	/^    public static function destroy($data)$/;"	f
destroy	.\thinkphp\library\think\Session.php	/^    public static function destroy()$/;"	f
destroy	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function destroy($sessID)$/;"	f
destroy	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function destroy($sessID)$/;"	f
destroy	.\thinkphp\library\think\session\driver\Redis.php	/^    public function destroy($sessID)$/;"	f
destroy	.\thinkphp\library\traits\model\SoftDelete.php	/^    public static function destroy($data, $force = false)$/;"	f
detach	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $detach = array_diff($current, array_keys($records));$/;"	v
detach	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function detach($data = null, $relationDel = false)$/;"	f
detaching	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function sync($ids, $detaching = true)$/;"	v
detect	.\thinkphp\library\think\Lang.php	/^    public static function detect()$/;"	f
diff	.\thinkphp\library\think\Collection.php	/^    public function diff($items)$/;"	f
different	.\thinkphp\library\think\Validate.php	/^    protected function different($value, $rule, $data)$/;"	f
dimensions	.\thinkphp\library\think\console\output\driver\Console.php	/^        $dimensions = $this->getTerminalDimensions();$/;"	v
dir	.\thinkphp\library\think\App.php	/^                $dir   = CONF_PATH . $module . 'extra';$/;"	v
dir	.\thinkphp\library\think\Route.php	/^                $dir    = APP_PATH . ($module ? $module . DS : '') . Config::get('url_controller_layer');$/;"	v
dir	.\thinkphp\library\think\cache\driver\File.php	/^        $dir      = dirname($filename);$/;"	v
dir	.\thinkphp\library\think\console\command\optimize\Config.php	/^                $dir   = CONF_PATH . $module . 'extra';$/;"	v
dir	.\thinkphp\library\think\template\driver\File.php	/^        $dir = dirname($cacheFile);$/;"	v
dir	.\vendor\topthink\think-captcha\src\Captcha.php	/^            $dir  = dir($ttfPath);$/;"	v
dir	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $dir  = dir($path);$/;"	v
direction	.\vendor\topthink\think-migration\src\command\Migrate.php	/^        $direction = ($direction === MigrationInterface::UP) ? MigrationInterface::UP : MigrationInterface::DOWN;$/;"	v
direction	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function executeMigration(MigrationInterface $migration, $direction = MigrationInterface::UP)$/;"	v
direction	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $direction = $version > $current ? MigrationInterface::UP : MigrationInterface::DOWN;$/;"	v
disableOutput	.\thinkphp\library\think\Process.php	/^    public function disableOutput()$/;"	f
disableOutput	.\thinkphp\library\think\process\Builder.php	/^    public function disableOutput()$/;"	f
disableOutput	.\thinkphp\library\think\process\pipes\Unix.php	/^        $this->disableOutput = (bool) $disableOutput;$/;"	v
disableOutput	.\thinkphp\library\think\process\pipes\Unix.php	/^    private $disableOutput;$/;"	v
disableOutput	.\thinkphp\library\think\process\pipes\Windows.php	/^        $this->disableOutput = (bool) $disableOutput;$/;"	v
disableOutput	.\thinkphp\library\think\process\pipes\Windows.php	/^    private $disableOutput;$/;"	v
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function disconnect();$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function disconnect()$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function disconnect()$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function disconnect()$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function disconnect()$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function disconnect()$/;"	f
disconnect	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function disconnect()$/;"	f
dispatch	.\thinkphp\library\think\App.php	/^                $dispatch = self::routeCheck($request, $config);$/;"	v
dispatch	.\thinkphp\library\think\App.php	/^            $dispatch = self::$dispatch;$/;"	v
dispatch	.\thinkphp\library\think\App.php	/^    protected static $dispatch;$/;"	v
dispatch	.\thinkphp\library\think\App.php	/^    public static function dispatch($dispatch, $type = 'module')$/;"	f
dispatch	.\thinkphp\library\think\Request.php	/^            $this->dispatch = $dispatch;$/;"	v
dispatch	.\thinkphp\library\think\Request.php	/^    protected $dispatch = [];$/;"	v
dispatch	.\thinkphp\library\think\Request.php	/^    public function dispatch($dispatch = null)$/;"	f
display	.\thinkphp\library\think\Controller.php	/^    protected function display($content = '', $vars = [], $replace = [], $config = [])$/;"	f
display	.\thinkphp\library\think\Template.php	/^    public function display($content, $vars = [], $config = [])$/;"	f
display	.\thinkphp\library\think\View.php	/^    public function display($content, $vars = [], $replace = [], $config = [])$/;"	f
display	.\thinkphp\library\think\view\driver\Php.php	/^    public function display($content, $data = [])$/;"	f
display	.\thinkphp\library\think\view\driver\Think.php	/^    public function display($template, $data = [], $config = [])$/;"	f
dissociate	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function dissociate()$/;"	f
dissociate	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function dissociate()$/;"	f
distinct	.\thinkphp\library\think\db\Query.php	/^    public function distinct($distinct)$/;"	f
distinct	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function distinct($options, $field)$/;"	f
distinct	.\vendor\topthink\think-mongo\src\Query.php	/^    public function distinct($field)$/;"	f
disuse	.\thinkphp\library\think\Model.php	/^    protected $disuse = [];$/;"	v
doAsk	.\thinkphp\library\think\console\output\Ask.php	/^    protected function doAsk()$/;"	f
doRun	.\thinkphp\library\think\Console.php	/^    public function doRun(Input $input, Output $output)$/;"	f
doRunCommand	.\thinkphp\library\think\Console.php	/^    protected function doRunCommand(Command $command, Input $input, Output $output)$/;"	f
doSignal	.\thinkphp\library\think\Process.php	/^    private function doSignal($signal, $throwException)$/;"	f
doWrite	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	f
does	.\vendor\composer\ClassLoader.php	/^            \/\/ Remember that this class does not exist.$/;"	c
domain	.\thinkphp\library\think\Request.php	/^            $this->domain = $domain;$/;"	v
domain	.\thinkphp\library\think\Request.php	/^            $this->domain = $this->scheme() . ':\/\/' . $this->host();$/;"	v
domain	.\thinkphp\library\think\Request.php	/^    protected $domain;$/;"	v
domain	.\thinkphp\library\think\Request.php	/^    public function domain($domain = null)$/;"	f
domain	.\thinkphp\library\think\Route.php	/^                    $domain = explode('.', $host, -2);$/;"	v
domain	.\thinkphp\library\think\Route.php	/^                    $domain = explode('.', rtrim(stristr($host, $rootDomain, true), '.'));$/;"	v
domain	.\thinkphp\library\think\Route.php	/^    private static $domain;$/;"	v
domain	.\thinkphp\library\think\Route.php	/^    public static function domain($domain, $rule = '', $option = [], $pattern = [])$/;"	f
domain	.\thinkphp\library\think\Url.php	/^                                $domain = $key;$/;"	v
domain	.\thinkphp\library\think\Url.php	/^                            $domain = $item;$/;"	v
domain	.\thinkphp\library\think\Url.php	/^                    $domain = current($match);$/;"	v
domain	.\thinkphp\library\think\Url.php	/^                $domain = $match[1];$/;"	v
domain	.\thinkphp\library\think\Url.php	/^            $domain = Config::get('app_host') ?: $request->host(true);$/;"	v
domain	.\thinkphp\library\think\Url.php	/^            $domain = true;$/;"	v
domain	.\thinkphp\library\think\Url.php	/^        $domain = self::parseDomain($url, $domain);$/;"	v
domain	.\thinkphp\library\think\template\taglib\Cx.php	/^        $domain = isset($tag['domain']) ? $tag['domain'] : 'false';$/;"	v
domain2	.\thinkphp\library\think\Route.php	/^                    $domain2         = array_pop($domain);$/;"	v
domain3	.\thinkphp\library\think\Route.php	/^                        $domain3 = array_pop($domain);$/;"	v
domainBind	.\thinkphp\library\think\Route.php	/^    private static $domainBind;$/;"	v
domainRule	.\thinkphp\library\think\Route.php	/^    private static $domainRule;$/;"	v
domains	.\thinkphp\library\think\Url.php	/^            $domains = Route::rules('domain');$/;"	v
down	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function down()$/;"	f
down	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function down();$/;"	f
driver	.\thinkphp\library\think\Log.php	/^    protected static $driver;$/;"	v
driverOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $driverOptions = array(\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION);$/;"	v
driverOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $driverOptions = array(\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION);$/;"	v
driverOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $driverOptions = array(\\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION);$/;"	v
drop	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function drop()$/;"	f
dropAllSchemas	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropAllSchemas()$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropColumn($tableName, $columnName);$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropColumn($tableName, $columnName)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropDatabase($name);$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function dropDatabase($name)$/;"	f
dropDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function dropDatabase($name);$/;"	f
dropDefaultConstraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function dropDefaultConstraint($tableName, $columnName)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null);$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropForeignKey($tableName, $columns, $constraint = null)$/;"	f
dropForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function dropForeignKey($columns, $constraint = null)$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropIndex($tableName, $columns);$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropIndex($tableName, $columns)$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropIndex($tableName, $columns)$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropIndex($tableName, $columns)$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropIndex($tableName, $columns)$/;"	f
dropIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropIndexByName($tableName, $indexName);$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropIndexByName($tableName, $indexName)$/;"	f
dropSchema	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropSchema($schemaName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function dropTable($tableName);$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropTable($tableName)$/;"	f
dropTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function dropTable($tableName)$/;"	f
dsn	.\thinkphp\library\think\Db.php	/^        $dsn = [$/;"	v
dsn	.\thinkphp\library\think\db\connector\Mysql.php	/^            $dsn = 'mysql:host=' . $config['hostname'] . ';port=' . $config['hostport'];$/;"	v
dsn	.\thinkphp\library\think\db\connector\Mysql.php	/^            $dsn = 'mysql:host=' . $config['hostname'];$/;"	v
dsn	.\thinkphp\library\think\db\connector\Mysql.php	/^            $dsn = 'mysql:unix_socket=' . $config['socket'];$/;"	v
dsn	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $dsn = 'pgsql:dbname=' . $config['database'] . ';host=' . $config['hostname'];$/;"	v
dsn	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $dsn = 'sqlite:' . $config['database'];$/;"	v
dsn	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $dsn = 'sqlsrv:Database=' . $config['database'] . ';Server=' . $config['hostname'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $dsn = 'mysql:';$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $dsn = 'pgsql:host=' . $options['host'] . ';dbname=' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $dsn = 'pgsql:host=' . $options['host'] . ';port=' . $options['port'] . ';dbname=' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $dsn = 'sqlite:' . $options['name'] . '.sqlite3';$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $dsn = 'sqlite:' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $dsn = 'sqlite::memory:';$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $dsn = 'sqlsrv:server=' . $options['host'] . ',' . $options['port'] . ';database=' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $dsn = 'sqlsrv:server=' . $options['host'] . ';database=' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $dsn = 'dblib:host=' . $options['host'] . ':' . $options['port'] . ';dbname=' . $options['name'];$/;"	v
dsn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $dsn = 'dblib:host=' . $options['host'] . ';dbname=' . $options['name'];$/;"	v
dt	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $dt = new \\DateTime('now', new \\DateTimeZone('UTC'));$/;"	v
dump	.\thinkphp\helper.php	/^    function dump($var, $echo = true, $label = null)$/;"	f
dump	.\thinkphp\library\think\Debug.php	/^    public static function dump($var, $echo = true, $label = null, $flags = ENT_SUBSTITUTE)$/;"	f
e	.\thinkphp\helper.php	/^        $e = $exception ?: '\\think\\Exception';$/;"	v
e	.\thinkphp\library\think\Error.php	/^            $e = new ThrowableError($e);$/;"	v
e	.\thinkphp\library\think\process\pipes\Unix.php	/^        $e = null;$/;"	v
e	.\thinkphp\library\think\process\pipes\Windows.php	/^        $e = null;$/;"	v
eTag	.\thinkphp\library\think\Response.php	/^    public function eTag($eTag)$/;"	f
each	.\thinkphp\library\think\Collection.php	/^    public function each(callable $callback)$/;"	f
each	.\thinkphp\library\think\Paginator.php	/^    public function each(callable $callback)$/;"	f
eagerly	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerly(Query $query, $relation, $subRelation, $closure, $first)$/;"	f
eagerlyManyToMany	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany($where, $relation, $subRelation = '')$/;"	f
eagerlyMorphToMany	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany($where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyMorphToOne	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne($where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyMorphToOne	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne($model, $relation, &$result, $subRelation = '')$/;"	f
eagerlyOne	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    protected function eagerlyOne(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyOne	.\thinkphp\library\think\model\relation\HasOne.php	/^    protected function eagerlyOne(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyOne	.\thinkphp\library\think\model\relation\OneToOne.php	/^    abstract protected function eagerlyOne(&$result, $relation, $subRelation, $closure);$/;"	f
eagerlyOneToMany	.\thinkphp\library\think\model\relation\HasMany.php	/^    protected function eagerlyOneToMany($model, $where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyResult	.\thinkphp\library\think\Model.php	/^    public function eagerlyResult(&$result, $relation)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResult	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\Model.php	/^    public function eagerlyResultSet(&$resultSet, $relation)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlySet	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlySet	.\thinkphp\library\think\model\relation\HasOne.php	/^    protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlySet	.\thinkphp\library\think\model\relation\OneToOne.php	/^    abstract protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure);$/;"	f
eagerlyType	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $this->eagerlyType = $type;$/;"	v
eagerlyType	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected $eagerlyType = 1;$/;"	v
eagerlyWhere	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected function eagerlyWhere($model, $where, $key, $relation, $subRelation = '', $closure = false)$/;"	f
earlierVersion	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^                $earlierVersion = $version;$/;"	v
earlierVersion	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $earlierVersion      = null;$/;"	v
echo	.\thinkphp\helper.php	/^    function dump($var, $echo = true, $label = null)$/;"	v
echo	.\thinkphp\library\think\Debug.php	/^    public static function dump($var, $echo = true, $label = null, $flags = ENT_SUBSTITUTE)$/;"	v
egt	.\thinkphp\library\think\Validate.php	/^    protected function egt($value, $rule, $data)$/;"	f
element	.\thinkphp\library\think\console\input\Definition.php	/^                $element = '[' . $element . ']';$/;"	v
element	.\thinkphp\library\think\console\input\Definition.php	/^            $element = '<' . $argument->getName() . '>';$/;"	v
elements	.\thinkphp\library\think\console\input\Definition.php	/^        $elements = [];$/;"	v
elt	.\thinkphp\library\think\Validate.php	/^    protected function elt($value, $rule, $data)$/;"	f
empty	.\thinkphp\library\think\template\taglib\Cx.php	/^        $empty  = isset($tag['empty']) ? $tag['empty'] : '';$/;"	v
emptyClass	.\thinkphp\library\think\Loader.php	/^            $emptyClass = self::parseClass($module, $layer, $empty, $appendSuffix);$/;"	v
emptyLine	.\thinkphp\library\think\console\output\driver\Console.php	/^            $messages[] = $emptyLine = sprintf('<error>%s<\/error>', str_repeat(' ', $len));$/;"	v
emptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle ?: new Style();$/;"	v
emptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle;$/;"	v
emptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    private $emptyStyle;$/;"	v
emptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	v
enableOutput	.\thinkphp\library\think\Process.php	/^    public function enableOutput()$/;"	f
enableOutput	.\thinkphp\library\think\process\Builder.php	/^    public function enableOutput()$/;"	f
encode	.\extend\php-jwt-master\src\JWT.php	/^    public static function encode($payload, $key, $alg = 'HS256', $keyId = null, $head = null)$/;"	f
encode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function encode($payload, $key, $alg = 'HS256', $keyId = null, $head = null)$/;"	f
encoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $encoded = JWT::encode($payload, 'my_key');$/;"	v
encoded	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $encoded = JWT::encode('f?', 'a');$/;"	v
encoding	.\thinkphp\library\think\console\output\driver\Console.php	/^        if (false === $encoding = mb_detect_encoding($string)) {$/;"	v
end	.\thinkphp\helper.php	/^    function debug($start, $end = '', $dec = 6)$/;"	v
end	.\thinkphp\library\think\Template.php	/^            $end    = $this->config['taglib_end'];$/;"	v
end	.\thinkphp\library\think\Template.php	/^            $end   = $this->config['tpl_end'];$/;"	v
end	.\thinkphp\library\think\Validate.php	/^            $end = strtotime($end);$/;"	v
end	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $end   = strrpos($content, '}');$/;"	v
end	.\thinkphp\library\think\db\Query.php	/^                $end    = end($resultSet);$/;"	v
end	.\thinkphp\library\think\template\TagLib.php	/^        $end     = $this->tpl->config('taglib_end');$/;"	v
end	.\thinkphp\library\think\template\taglib\Cx.php	/^                    $end = $value;$/;"	v
end	.\thinkphp\library\think\template\taglib\Cx.php	/^        $end        = 0;$/;"	v
end	.\vendor\topthink\think-helper\src\Time.php	/^        $end = mktime(23, 59, 59, date('m') - 1, date('t', $begin), date('Y'));$/;"	v
end	.\vendor\topthink\think-helper\src\Time.php	/^        $end = time();$/;"	v
end	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $end = microtime(true);$/;"	v
end	.\vendor\topthink\think-migration\src\command\Migrate.php	/^        $end = microtime(true);$/;"	v
end	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $end = microtime(true);$/;"	v
end	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $end = microtime(true);$/;"	v
end	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^        $end = microtime(true);$/;"	v
end	.\vendor\topthink\think-mongo\src\Query.php	/^            $end       = end($resultSet);$/;"	v
endCommandTimer	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function endCommandTimer()$/;"	f
endLine	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $endLine    = $reflection->getEndLine();$/;"	v
endStr	.\thinkphp\library\think\template\taglib\Cx.php	/^            $endStr = '<?php endif; ?>';$/;"	v
endStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $endStr   = '';$/;"	v
endsWith	.\vendor\topthink\think-helper\src\Str.php	/^    public static function endsWith($haystack, $needles)$/;"	f
engine	.\thinkphp\library\think\Controller.php	/^    protected function engine($engine)$/;"	f
engine	.\thinkphp\library\think\View.php	/^        $this->engine = new $class($options);$/;"	v
engine	.\thinkphp\library\think\View.php	/^    public $engine;$/;"	v
engine	.\thinkphp\library\think\View.php	/^    public function engine($options = [])$/;"	f
enhanceSigchildCompatibility	.\thinkphp\library\think\Process.php	/^        $this->enhanceSigchildCompatibility = '\\\\' !== DS && $this->isSigchildEnabled();$/;"	v
enhanceSigchildCompatibility	.\thinkphp\library\think\Process.php	/^        $this->enhanceSigchildCompatibility = (bool) $enhance;$/;"	v
enhanceSigchildCompatibility	.\thinkphp\library\think\Process.php	/^    private $enhanceSigchildCompatibility;$/;"	v
enhanceWindowsCompatibility	.\thinkphp\library\think\Process.php	/^        $this->enhanceWindowsCompatibility  = true;$/;"	v
enhanceWindowsCompatibility	.\thinkphp\library\think\Process.php	/^        $this->enhanceWindowsCompatibility = (bool) $enhance;$/;"	v
enhanceWindowsCompatibility	.\thinkphp\library\think\Process.php	/^    private $enhanceWindowsCompatibility = true;$/;"	v
entry	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function entry($id = '')$/;"	f
enum	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function enum($name, array $values)$/;"	f
env	.\thinkphp\base.php	/^    $env = parse_ini_file(ROOT_PATH . '.env', true);$/;"	v
env	.\thinkphp\library\think\Process.php	/^        $env = array_filter($env, function ($value) {$/;"	v
env	.\thinkphp\library\think\Process.php	/^        $this->env = [];$/;"	v
env	.\thinkphp\library\think\Process.php	/^    private $env;$/;"	v
env	.\thinkphp\library\think\Request.php	/^            $this->env = $_ENV;$/;"	v
env	.\thinkphp\library\think\Request.php	/^            return $this->env = array_merge($this->env, $name);$/;"	v
env	.\thinkphp\library\think\Request.php	/^    protected $env;$/;"	v
env	.\thinkphp\library\think\Request.php	/^    public function env($name = '', $default = null, $filter = '')$/;"	f
env	.\thinkphp\library\think\process\Builder.php	/^            $env = $this->env;$/;"	v
env	.\thinkphp\library\think\process\Builder.php	/^            $env = array_replace($_ENV, $_SERVER, $this->env);$/;"	v
env	.\thinkphp\library\think\process\Builder.php	/^        $this->env = array_replace($this->env, $variables);$/;"	v
env	.\thinkphp\library\think\process\Builder.php	/^    private $env = null;$/;"	v
eq	.\thinkphp\library\think\Validate.php	/^    protected function eq($value, $rule)$/;"	f
equals	.\thinkphp\library\think\console\input\Option.php	/^    public function equals(Option $option)$/;"	f
errfile	.\thinkphp\library\think\Error.php	/^    public static function appError($errno, $errstr, $errfile = '', $errline = 0)$/;"	v
errno	.\extend\php-jwt-master\src\JWT.php	/^        if (function_exists('json_last_error') && $errno = json_last_error()) {$/;"	v
errno	.\vendor\firebase\php-jwt\src\JWT.php	/^        if (function_exists('json_last_error') && $errno = json_last_error()) {$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'file write error';$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'no file to uploaded';$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'only the portion of file is uploaded';$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'unknown upload error';$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'upload File size exceeds the maximum value';$/;"	v
error	.\thinkphp\library\think\File.php	/^                $this->error = 'upload temp dir not found';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'extensions to upload is not allowed';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'filesize not match';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'illegal image files';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'mimetype to upload is not allowed';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'upload illegal files';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = 'upload write error';$/;"	v
error	.\thinkphp\library\think\File.php	/^            $this->error = ['has the same filename: {:filename}', ['filename' => $filename]];$/;"	v
error	.\thinkphp\library\think\File.php	/^        $this->error = ['directory {:path} creation failed', ['path' => $path]];$/;"	v
error	.\thinkphp\library\think\File.php	/^    private $error = '';$/;"	v
error	.\thinkphp\library\think\File.php	/^    private function error($errorNo)$/;"	f
error	.\thinkphp\library\think\Model.php	/^                $this->error = $validate->getError();$/;"	v
error	.\thinkphp\library\think\Model.php	/^    protected $error;$/;"	v
error	.\thinkphp\library\think\Validate.php	/^                        $this->error = array_merge($this->error, $result);$/;"	v
error	.\thinkphp\library\think\Validate.php	/^                    $this->error = $result;$/;"	v
error	.\thinkphp\library\think\Validate.php	/^        $this->error = [];$/;"	v
error	.\thinkphp\library\think\Validate.php	/^    protected $error = [];$/;"	v
error	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $error = error_get_last();$/;"	v
error	.\thinkphp\library\think\console\output\Ask.php	/^        $error    = null;$/;"	v
error	.\thinkphp\library\think\db\Connection.php	/^            $error = $error[1] . ':' . $error[2];$/;"	v
error	.\thinkphp\library\think\db\Connection.php	/^            $error = $this->PDOStatement->errorInfo();$/;"	v
error	.\thinkphp\library\think\db\Connection.php	/^            $error = '';$/;"	v
error	.\thinkphp\library\think\db\Connection.php	/^        $error = $e->getMessage();$/;"	v
error	.\thinkphp\library\think\db\Connection.php	/^    protected $error = '';$/;"	v
error	.\thinkphp\library\think\exception\PDOException.php	/^        $error = $exception->errorInfo;$/;"	v
error	.\thinkphp\library\think\exception\ValidateException.php	/^        $this->error   = $error;$/;"	v
error	.\thinkphp\library\think\exception\ValidateException.php	/^    protected $error;$/;"	v
error	.\thinkphp\library\think\process\exception\Failed.php	/^        $error = sprintf('The command "%s" failed.' . "\\nExit Code: %s(%s)", $process->getCommandLine(), $process->getExitCode(), $process->getExitCodeText());$/;"	v
error	.\thinkphp\library\traits\controller\Jump.php	/^    protected function error($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	f
error	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $error = '';$/;"	v
errorMessage	.\thinkphp\library\think\console\output\question\Choice.php	/^        $errorMessage = $this->errorMessage;$/;"	v
errorMessage	.\thinkphp\library\think\console\output\question\Choice.php	/^        $this->errorMessage = $errorMessage;$/;"	v
errorMessage	.\thinkphp\library\think\console\output\question\Choice.php	/^    private $errorMessage = 'Value "%s" is invalid';$/;"	v
escape	.\thinkphp\library\think\console\output\Formatter.php	/^    public static function escape($text)$/;"	f
escapeArgument	.\thinkphp\library\think\process\Utils.php	/^    public static function escapeArgument($argument)$/;"	f
escapeToken	.\thinkphp\library\think\console\Input.php	/^    public function escapeToken($token)$/;"	f
escapedArgument	.\thinkphp\library\think\process\Utils.php	/^            $escapedArgument = '"' . $escapedArgument . '"';$/;"	v
escapedArgument	.\thinkphp\library\think\process\Utils.php	/^        $escapedArgument = '';$/;"	v
event	.\thinkphp\library\think\Model.php	/^    private static $event = [];$/;"	v
event	.\thinkphp\library\think\Model.php	/^    public static function event($event, $callback, $override = false)$/;"	f
event	.\thinkphp\library\think\db\Connection.php	/^    protected static $event = [];$/;"	v
event	.\thinkphp\library\think\db\Query.php	/^    private static $event = [];$/;"	v
event	.\thinkphp\library\think\db\Query.php	/^    public static function event($event, $callback)$/;"	f
event	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected static $event = [];$/;"	v
event	.\vendor\topthink\think-mongo\src\Query.php	/^    private static $event = [];$/;"	v
event	.\vendor\topthink\think-mongo\src\Query.php	/^    public static function event($event, $callback)$/;"	f
exact	.\thinkphp\library\think\Console.php	/^        $exact = in_array($name, $commands, true);$/;"	v
exact	.\thinkphp\library\think\Console.php	/^        $exact = in_array($namespace, $namespaces, true);$/;"	v
except	.\thinkphp\library\think\Model.php	/^        $this->except = $field;$/;"	v
except	.\thinkphp\library\think\Model.php	/^    protected $except = [];$/;"	v
except	.\thinkphp\library\think\Model.php	/^    public function except($field)$/;"	f
except	.\thinkphp\library\think\Request.php	/^            $except = [];$/;"	v
except	.\thinkphp\library\think\Request.php	/^    public function except($name, $type = 'param')$/;"	f
except	.\thinkphp\library\think\db\Query.php	/^    public function field($field, $except = false, $tableName = '', $prefix = '', $alias = '')$/;"	v
except	.\vendor\topthink\think-mongo\src\Query.php	/^    public function field($field, $except = false)$/;"	v
exception	.\thinkphp\helper.php	/^    function exception($msg, $code = 0, $exception = '')$/;"	f
exception	.\thinkphp\library\think\Error.php	/^        $exception = new ErrorException($errno, $errstr, $errfile, $errline);$/;"	v
exception	.\thinkphp\library\think\Route.php	/^                        $exception = isset($val[2]) ? $val[2] : true;$/;"	v
exception	.\thinkphp\library\think\Route.php	/^                        $exception = true;$/;"	v
exe	.\thinkphp\library\think\console\output\Ask.php	/^            $exe = __DIR__ . '\/..\/bin\/hiddeninput.exe';$/;"	v
exec	.\thinkphp\library\think\App.php	/^    protected static function exec($dispatch, $config)$/;"	f
exec	.\thinkphp\library\think\Hook.php	/^    public static function exec($class, $tag = '', &$params = null, $extra = null)$/;"	f
execute	.\thinkphp\library\think\console\Command.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\Build.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\Clear.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\Help.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\Lists.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\Make.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\optimize\Config.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\optimize\Route.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\thinkphp\library\think\db\Connection.php	/^    public function execute($sql, $bind = [], Query $query = null)$/;"	f
execute	.\thinkphp\library\think\db\Query.php	/^    public function execute($sql, $bind = [])$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function execute($sql);$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function execute($sql)$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function execute($sql)$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function execute($sql)$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function execute($sql);$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function execute($sql)$/;"	f
execute	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function execute($sql);$/;"	f
execute	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^    protected function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function execute($namespace, BulkWrite $bulk, WriteConcern $writeConcern = null)$/;"	f
execute	.\vendor\topthink\think-mongo\src\Query.php	/^    public function execute($namespace, BulkWrite $bulk, WriteConcern $writeConcern = null)$/;"	f
execute	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^    public function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-queue\src\queue\command\Restart.php	/^    public function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-queue\src\queue\command\Subscribe.php	/^    public function execute(Input $input, Output $output)$/;"	f
execute	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    public function execute(Input $input, Output $output)$/;"	f
executeCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function executeCommands()$/;"	f
executeInvertedCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function executeInvertedCommands()$/;"	f
executeMigration	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function executeMigration(MigrationInterface $migration, $direction = MigrationInterface::UP)$/;"	f
executeSeed	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^    protected function executeSeed(SeedInterface $seed)$/;"	f
executeTimes	.\thinkphp\library\think\Db.php	/^    public static $executeTimes = 0;$/;"	v
exhaust	.\vendor\topthink\think-mongo\src\Query.php	/^    public function exhaust($exhaust)$/;"	f
existingClassNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $existingClassNames = static::getExistingMigrationClassNames($path);$/;"	v
exists	.\thinkphp\library\think\Console.php	/^                $exists = isset($alternatives[$collectionName]);$/;"	v
exists	.\thinkphp\library\think\view\driver\Php.php	/^    public function exists($template)$/;"	f
exists	.\thinkphp\library\think\view\driver\Think.php	/^    public function exists($template)$/;"	f
exists	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $exists = $this->fetchRow(sprintf($/;"	v
exists	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function exists()$/;"	f
exitCode	.\thinkphp\library\think\Console.php	/^                $exitCode = ((int) $exitCode) ?: 1;$/;"	v
exitCode	.\thinkphp\library\think\Console.php	/^                $exitCode = 1;$/;"	v
exitCode	.\thinkphp\library\think\Console.php	/^            $exitCode = $e->getCode();$/;"	v
exitCode	.\thinkphp\library\think\Console.php	/^            $exitCode = $this->doRun($input, $output);$/;"	v
exitCode	.\thinkphp\library\think\Console.php	/^            if ($exitCode > 255) $exitCode = 255;$/;"	v
exitCodes	.\thinkphp\library\think\Process.php	/^    public static $exitCodes = [$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^            $exitcode = -1;$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^            $exitcode = proc_close($this->process);$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^            $this->exitcode = $this->fallbackExitcode;$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^            $this->exitcode = $this->processInformation['exitcode'];$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^            $this->exitcode = 128 + $this->processInformation['termsig'];$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^        $this->exitcode                     = null;$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^        $this->exitcode = -1 !== $exitcode ? $exitcode : (null !== $this->exitcode ? $this->exitcode : -1);$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^        if (null === $exitcode = $this->getExitCode()) {$/;"	v
exitcode	.\thinkphp\library\think\Process.php	/^    private $exitcode;$/;"	v
exitcode	.\thinkphp\library\think\console\output\Ask.php	/^        return self::$stty = $exitcode === 0;$/;"	v
exp	.\thinkphp\library\think\db\Builder.php	/^                $exp = $this->exp[$exp];$/;"	v
exp	.\thinkphp\library\think\db\Builder.php	/^            $exp = strtolower($exp);$/;"	v
exp	.\thinkphp\library\think\db\Builder.php	/^    protected $exp = ['eq' => '=', 'neq' => '<>', 'gt' => '>', 'egt' => '>=', 'lt' => '<', 'elt' => '<=', 'notlike' => 'NOT LIKE', 'not like' => 'NOT LIKE', 'like' => 'LIKE', 'in' => 'IN', 'exp' => 'EXP', 'notin' => 'NOT IN', 'not in' => 'NOT IN', 'between' => 'BETWEEN', 'not between' => 'NOT BETWEEN', 'notbetween' => 'NOT BETWEEN', 'exists' => 'EXISTS', 'notexists' => 'NOT EXISTS', 'not exists' => 'NOT EXISTS', 'null' => 'NULL', 'notnull' => 'NOT NULL', 'not null' => 'NOT NULL', '> time' => '> TIME', '< time' => '< TIME', '>= time' => '>= TIME', '<= time' => '<= TIME', 'between time' => 'BETWEEN TIME', 'not between time' => 'NOT BETWEEN TIME', 'notbetween time' => 'NOT BETWEEN TIME'];$/;"	v
exp	.\thinkphp\library\think\db\Query.php	/^    public function exp($field, $value)$/;"	f
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^                        $exp = $this->exp[$exp];$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^                    $exp = strtolower($exp);$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^                $exp   = $value[0];$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^                $exp = $this->exp[$exp];$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^            $exp = strtolower($exp);$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^            $query[$key] = ['$' . $exp => $value];$/;"	v
exp	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected $exp = ['<>' => 'ne', 'neq' => 'ne', '=' => 'eq', '>' => 'gt', '>=' => 'gte', '<' => 'lt', '<=' => 'lte', 'in' => 'in', 'not in' => 'nin', 'nin' => 'nin', 'mod' => 'mod', 'exists' => 'exists', 'null' => 'null', 'notnull' => 'not null', 'not null' => 'not null', 'regex' => 'regex', 'type' => 'type', 'all' => 'all', '> time' => '> time', '< time' => '< time', 'between' => 'between', 'not between' => 'not between', 'between time' => 'between time', 'not between time' => 'not between time', 'notbetween time' => 'not between time', 'like' => 'like', 'near' => 'near', 'size' => 'size'];$/;"	v
expire	.\thinkphp\helper.php	/^                $expire = is_numeric($options) ? $options : null; \/\/默认快捷缓存设置过期时间$/;"	v
expire	.\thinkphp\helper.php	/^                $expire = isset($options['expire']) ? $options['expire'] : null; \/\/修复查询缓存无法设置过期时间$/;"	v
expire	.\thinkphp\helper.php	/^            $expire = is_numeric($options) ? $options : null;$/;"	v
expire	.\thinkphp\library\think\Cache.php	/^    public static function remember($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\Cache.php	/^    public static function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\Cookie.php	/^        $expire = !empty($config['expire']) ?$/;"	v
expire	.\thinkphp\library\think\Request.php	/^    public function cache($key, $expire = null, $except = [], $tag = null)$/;"	v
expire	.\thinkphp\library\think\Route.php	/^                $expire = $cache;$/;"	v
expire	.\thinkphp\library\think\Validate.php	/^    protected function expire($value, $rule)$/;"	f
expire	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function set($name, $value, $expire = null);$/;"	v
expire	.\thinkphp\library\think\cache\Driver.php	/^    public function remember($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $expire = $this->expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $expire = (int) substr($content, 8, 12);$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $expire = 0;$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^            $this->expire = $expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^        $this->expire = null;$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^    protected $expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Lite.php	/^            $expire = $expire->getTimestamp();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Lite.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Lite.php	/^            $expire = 0 === $expire ? 10 * 365 * 24 * 3600 : $expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\Lite.php	/^            $expire = time() + $expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcached.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcached.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $expire = 0 == $expire ? 0 : $_SERVER['REQUEST_TIME'] + $expire;$/;"	v
expire	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Redis.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Redis.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = $expire->getTimestamp();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = (0 == $expire) ? 0 : (time() + $expire); \/\/缓存有效期为0表示永久缓存$/;"	v
expire	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Wincache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Wincache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\cache\driver\Xcache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	.\thinkphp\library\think\cache\driver\Xcache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function set($name, $value, $expire = null)$/;"	v
expire	.\thinkphp\library\think\db\Query.php	/^            $expire = $key;$/;"	v
expire	.\thinkphp\library\think\db\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	v
expire	.\vendor\topthink\think-mongo\src\Query.php	/^            $expire = $key;$/;"	v
expire	.\vendor\topthink\think-mongo\src\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	v
expired	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^        $expired = time() - $this->options['expire'];$/;"	v
expires	.\thinkphp\library\think\Response.php	/^    public function expires($time)$/;"	f
explain	.\thinkphp\library\think\db\Connection.php	/^    protected function trigger($sql, $runtime, $explain = [], $master = false)$/;"	v
expr	.\thinkphp\library\think\Console.php	/^        $expr = preg_replace_callback('{([^:]+|)}', function ($matches) {$/;"	v
express	.\thinkphp\library\think\Template.php	/^                                    $express = $name . $array[1] . $array[2];$/;"	v
express	.\thinkphp\library\think\Template.php	/^                                    $express = false;$/;"	v
expression	.\thinkphp\library\think\template\taglib\Cx.php	/^            $expression = $this->autoBuildVar($expression);$/;"	v
expression	.\thinkphp\library\think\template\taglib\Cx.php	/^            $expression = ltrim(rtrim($tag['expression'], ')'), '(');$/;"	v
ext	.\thinkphp\helper.php	/^    function load_trait($class, $ext = EXT)$/;"	v
ext	.\thinkphp\helper.php	/^    function vendor($class, $ext = EXT)$/;"	v
ext	.\thinkphp\library\think\Console.php	/^            $ext = $this->extractNamespace($name, substr_count($namespace, ':') + 1);$/;"	v
ext	.\thinkphp\library\think\File.php	/^            $ext = explode(',', $ext);$/;"	v
ext	.\thinkphp\library\think\Request.php	/^    public function ext()$/;"	f
ext	.\thinkphp\library\think\controller\Rest.php	/^        $ext     = $request->ext();$/;"	v
extend	.\thinkphp\library\think\Template.php	/^                        $extend = str_replace($val['begin'] . $val['content'] . $val['end'], $replace, $extend);$/;"	v
extend	.\thinkphp\library\think\Template.php	/^                    $extend = $template;$/;"	v
extend	.\thinkphp\library\think\Template.php	/^                    $extend = $this->parseTemplateName($matches['name']);$/;"	v
extend	.\thinkphp\library\think\Template.php	/^        $extend = '';$/;"	v
extend	.\thinkphp\library\think\Validate.php	/^    public static function extend($type, $callback = null)$/;"	f
extendPath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $extendPath = $this->normalizePath(realpath(EXTEND_PATH));$/;"	v
extension	.\thinkphp\library\think\File.php	/^        $extension = strtolower(pathinfo($this->getInfo('name'), PATHINFO_EXTENSION));$/;"	v
extra	.\thinkphp\library\think\Hook.php	/^    public static function listen($tag, &$params = null, $extra = null, $once = false)$/;"	v
extra	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^            $extra = $package->getExtra();$/;"	v
extra	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^            $extra = $this->composer->getPackage()->getExtra();$/;"	v
extra	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $extra = ' ' . strtoupper($row['Extra']);$/;"	v
extra	.\vendor\topthink\think-mongo\src\Query.php	/^    public function cmd($command, $extra = null, $db = null)$/;"	v
extraDir	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                    $extraDir = $appDir . DIRECTORY_SEPARATOR . 'extra';$/;"	v
extraTypes	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $extraTypes = '|trait';$/;"	v
extractAllNamespaces	.\thinkphp\library\think\Console.php	/^    private function extractAllNamespaces($name)$/;"	f
extractNamespace	.\thinkphp\library\think\Console.php	/^    public function extractNamespace($name, $limit = null)$/;"	f
f	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $f   = mt_rand(-$this->imageH \/ 4, $this->imageH \/ 4); \/\/ X轴方向偏移量$/;"	v
f	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $f = mt_rand(-$this->imageH \/ 4, $this->imageH \/ 4); \/\/ X轴方向偏移量$/;"	v
failException	.\thinkphp\library\think\Controller.php	/^        $this->failException = $fail;$/;"	v
failException	.\thinkphp\library\think\Controller.php	/^    protected $failException = false;$/;"	v
failException	.\thinkphp\library\think\Model.php	/^        $this->failException = $fail;$/;"	v
failException	.\thinkphp\library\think\Model.php	/^    protected $failException = false;$/;"	v
failException	.\thinkphp\library\think\db\Query.php	/^    public function failException($fail = true)$/;"	f
failException	.\vendor\topthink\think-mongo\src\Query.php	/^    public function failException($fail = true)$/;"	f
failed	.\vendor\topthink\think-queue\src\queue\CallQueuedHandler.php	/^    public function failed(array $data)$/;"	f
failed	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function failed()$/;"	f
fallbackDirsPsr0	.\thinkphp\library\think\Loader.php	/^    private static $fallbackDirsPsr0 = [];$/;"	v
fallbackDirsPsr0	.\vendor\composer\ClassLoader.php	/^                $this->fallbackDirsPsr0 = array_merge($/;"	v
fallbackDirsPsr0	.\vendor\composer\ClassLoader.php	/^            $this->fallbackDirsPsr0 = (array) $paths;$/;"	v
fallbackDirsPsr0	.\vendor\composer\ClassLoader.php	/^    private $fallbackDirsPsr0 = array();$/;"	v
fallbackDirsPsr4	.\thinkphp\library\think\Loader.php	/^    private static $fallbackDirsPsr4 = [];$/;"	v
fallbackDirsPsr4	.\vendor\composer\ClassLoader.php	/^                $this->fallbackDirsPsr4 = array_merge($/;"	v
fallbackDirsPsr4	.\vendor\composer\ClassLoader.php	/^            $this->fallbackDirsPsr4 = (array) $paths;$/;"	v
fallbackDirsPsr4	.\vendor\composer\ClassLoader.php	/^    private $fallbackDirsPsr4 = array();$/;"	v
fallbackExitcode	.\thinkphp\library\think\Process.php	/^                $this->fallbackExitcode = (int) $data;$/;"	v
fallbackExitcode	.\thinkphp\library\think\Process.php	/^        $this->fallbackExitcode             = null;$/;"	v
fallbackExitcode	.\thinkphp\library\think\Process.php	/^    private $fallbackExitcode;$/;"	v
fetch	.\thinkphp\library\think\Controller.php	/^    protected function fetch($template = '', $vars = [], $replace = [], $config = [])$/;"	f
fetch	.\thinkphp\library\think\Template.php	/^    public function fetch($template, $vars = [], $config = [])$/;"	f
fetch	.\thinkphp\library\think\View.php	/^    public function fetch($template = '', $vars = [], $replace = [], $config = [], $renderContent = false)$/;"	f
fetch	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    public function fetch()$/;"	f
fetch	.\thinkphp\library\think\db\Query.php	/^    public function getTableInfo($tableName = '', $fetch = '')$/;"	v
fetch	.\thinkphp\library\think\view\driver\Php.php	/^    public function fetch($template, $data = [])$/;"	f
fetch	.\thinkphp\library\think\view\driver\Think.php	/^    public function fetch($template, $data = [], $config = [])$/;"	f
fetch	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getTableInfo($tableName = '', $fetch = '')$/;"	v
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function fetchAll($sql);$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function fetchAll($sql)$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function fetchAll($sql)$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function fetchAll($sql)$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function fetchAll($sql);$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function fetchAll($sql)$/;"	f
fetchAll	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function fetchAll($sql);$/;"	f
fetchCursor	.\vendor\topthink\think-mongo\src\Query.php	/^    public function fetchCursor($cursor = true)$/;"	f
fetchPdo	.\thinkphp\library\think\db\Query.php	/^    public function fetchPdo($pdo = true)$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function fetchRow($sql);$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function fetchRow($sql)$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function fetchRow($sql)$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function fetchRow($sql)$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function fetchRow($sql);$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function fetchRow($sql)$/;"	f
fetchRow	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function fetchRow($sql);$/;"	f
fetchSql	.\thinkphp\library\think\db\Query.php	/^    public function fetchSql($fetch = true)$/;"	f
fetchType	.\thinkphp\library\think\db\Connection.php	/^                $this->fetchType = $config['result_type'];$/;"	v
fetchType	.\thinkphp\library\think\db\Connection.php	/^    protected $fetchType = PDO::FETCH_ASSOC;$/;"	v
fh	.\thinkphp\library\think\process\pipes\Windows.php	/^        $fh   = $this->fileHandles;$/;"	v
field	.\thinkphp\library\think\Db.php	/^ * @method Query view(mixed $join, mixed $field = null, mixed $on = null, string $type = 'INNER') static 视图查询$/;"	v
field	.\thinkphp\library\think\Model.php	/^                $field = $value;$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field       = $this->field;$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field       = array_diff($fields, (array) $this->except);$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field = [];$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field = array_diff($field, (array) $this->disuse);$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field = array_merge($this->field, $auto);$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $field = explode(',', $field);$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $this->field = $field;$/;"	v
field	.\thinkphp\library\think\Model.php	/^            $this->field = $this->getQuery()->getTableInfo('', 'fields');$/;"	v
field	.\thinkphp\library\think\Model.php	/^        $this->field = $field;$/;"	v
field	.\thinkphp\library\think\Model.php	/^        foreach ($auto as $field => $value) {$/;"	v
field	.\thinkphp\library\think\Model.php	/^    protected $field = [];$/;"	v
field	.\thinkphp\library\think\Model.php	/^    public static function create($data = [], $field = null)$/;"	v
field	.\thinkphp\library\think\Validate.php	/^        $this->field   = array_merge($this->field, $field);$/;"	v
field	.\thinkphp\library\think\Validate.php	/^    protected $field = [];$/;"	v
field	.\thinkphp\library\think\Validate.php	/^    protected function confirm($value, $rule, $data, $field = '')$/;"	v
field	.\thinkphp\library\think\db\Builder.php	/^                    $field = is_string($field) ? $field : '';$/;"	v
field	.\thinkphp\library\think\db\Builder.php	/^            foreach ($val as $field => $value) {$/;"	v
field	.\thinkphp\library\think\db\Builder.php	/^    protected function parseValue($value, $field = '')$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                    $field = explode(',', $field);$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                $field = $key . ',' . $field;$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                $field = $this->options['via'] . '.' . $field;$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                $field = '*';$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                $field = array_map('trim', explode(',', $field));$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^                $field = empty($order) ? $field : [$field => $order];$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field         = Loader::parseName(substr($method, 5));$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field  = $fields ? array_diff($fields, $field) : $field;$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field  = $fields ?: ['*'];$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field = $this->options['via'] . '.' . $field;$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field = array_map('trim', explode(',', $field));$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^            $field = array_merge((array) $this->options['field'], $field);$/;"	v
field	.\thinkphp\library\think\db\Query.php	/^    public function field($field, $except = false, $tableName = '', $prefix = '', $alias = '')$/;"	f
field	.\thinkphp\library\think\db\Query.php	/^    public function view($join, $field = true, $on = null, $type = 'INNER')$/;"	v
field	.\thinkphp\library\think\model\Relation.php	/^                    $field = $model . '.' . $field;$/;"	v
field	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $field = 'pivot.' . $field;$/;"	v
field	.\thinkphp\library\think\model\relation\OneToOne.php	/^                $field = $query->getOptions('field');$/;"	v
field	.\thinkphp\library\think\model\relation\OneToOne.php	/^                $field = $query->getOptions('with_field');$/;"	v
field	.\thinkphp\library\think\model\relation\OneToOne.php	/^                $field = true;$/;"	v
field	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $field = $this->option['field'];$/;"	v
field	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $field = null;$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^            $field = '__TABLE__.' . $field;$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^            $field = array_pop($array);$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^        $field = $model->getDeleteTimeField(true);$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^        $field = $this->getDeleteTimeField();$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^        $field = $this->getDeleteTimeField(true);$/;"	v
field	.\thinkphp\library\traits\model\SoftDelete.php	/^        $field = property_exists($this, 'deleteTime') && isset($this->deleteTime) ?$/;"	v
field	.\vendor\topthink\think-mongo\src\Builder.php	/^                        $field            = is_string($field) ? $field : '';$/;"	v
field	.\vendor\topthink\think-mongo\src\Builder.php	/^            foreach ($val as $field => $value) {$/;"	v
field	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseValue($value, $field = '')$/;"	v
field	.\vendor\topthink\think-mongo\src\Query.php	/^                $field = $key . ',' . $field;$/;"	v
field	.\vendor\topthink\think-mongo\src\Query.php	/^            $field         = Loader::parseName(substr($method, 5));$/;"	v
field	.\vendor\topthink\think-mongo\src\Query.php	/^            $field = array_map('trim', explode(',', $field));$/;"	v
field	.\vendor\topthink\think-mongo\src\Query.php	/^    public function field($field, $except = false)$/;"	f
fieldCase	.\thinkphp\library\think\db\Connection.php	/^    public function fieldCase($info)$/;"	f
fieldRaw	.\thinkphp\library\think\db\Query.php	/^    public function fieldRaw($field, array $bind = [])$/;"	f
fields	.\thinkphp\library\think\Model.php	/^            $fields      = $this->getQuery()->getTableInfo('', 'fields');$/;"	v
fields	.\thinkphp\library\think\Route.php	/^                        $fields    = ['id'];$/;"	v
fields	.\thinkphp\library\think\Route.php	/^                        $fields    = explode('&', $val[1]);$/;"	v
fields	.\thinkphp\library\think\Validate.php	/^            $fields = explode('^', $key);$/;"	v
fields	.\thinkphp\library\think\Validate.php	/^    public function scene($name, $fields = null)$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^            $fields = $options['field'];$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^            $fields = array_keys($bind);$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^            $fields = array_keys($this->query->getFieldsType($options['table']));$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^            $fields = explode(',', $fields);$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^        $fields = array_keys($data);$/;"	v
fields	.\thinkphp\library\think\db\Builder.php	/^        $fields = array_map([$this, 'parseKey'], $fields);$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^                    $fields = array_keys($resultSet[0]);$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^                $fields = $alias . '.*';$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^            $fields = $this->getTableInfo($tableName ?: (isset($this->options['table']) ? $this->options['table'] : ''), 'fields');$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^            $fields = [];$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^            $fields = array_keys($info);$/;"	v
fields	.\thinkphp\library\think\db\Query.php	/^        $fields = is_string($field) ? explode(',', $field) : $field;$/;"	v
fields	.\thinkphp\library\think\db\builder\Mysql.php	/^            $fields = $options['field'];$/;"	v
fields	.\thinkphp\library\think\db\builder\Mysql.php	/^            $fields = array_keys($this->query->getFieldsType($options['table']));$/;"	v
fields	.\thinkphp\library\think\model\Merge.php	/^            $fields = self::getModelField($query, $name, $table, $class->mapFields, $class->field);$/;"	v
fields	.\thinkphp\library\think\model\Merge.php	/^        $fields = $fields ?: $query->getTableInfo($table, 'fields');$/;"	v
fields	.\thinkphp\library\think\model\Merge.php	/^        $fields = self::getModelField($query, $master, '', $class->mapFields, $class->field);$/;"	v
fields	.\thinkphp\library\think\model\Relation.php	/^                $fields = explode(',', $fields);$/;"	v
fields	.\thinkphp\library\think\model\Relation.php	/^            $fields = $model . '.*';$/;"	v
fields	.\thinkphp\library\think\model\Relation.php	/^        $fields = $this->query->getOptions('field');$/;"	v
fields	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $fields    = $this->getQueryFields($tableName);$/;"	v
fields	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\HasMany.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\HasOne.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
fields	.\vendor\topthink\think-mongo\src\Query.php	/^                $fields = array_keys($resultSet[0]);$/;"	v
fields	.\vendor\topthink\think-mongo\src\Query.php	/^            $fields = array_keys($result);$/;"	v
fields	.\vendor\topthink\think-mongo\src\Query.php	/^        $fields = is_string($field) ? explode(',', $field) : $field;$/;"	v
fieldsStr	.\thinkphp\library\think\db\Builder.php	/^            $fieldsStr = '*';$/;"	v
fieldsStr	.\thinkphp\library\think\db\Builder.php	/^            $fieldsStr = implode(',', $array);$/;"	v
file	.\thinkphp\library\think\App.php	/^                    $file = strpos($file, '.') ? $file : APP_PATH . $file . EXT;$/;"	v
file	.\thinkphp\library\think\App.php	/^    protected static $file = [];$/;"	v
file	.\thinkphp\library\think\Config.php	/^            $file   = CONF_PATH . ($module ? $module . DS : '') . 'extra' . DS . $name[0] . CONF_EXT;$/;"	v
file	.\thinkphp\library\think\File.php	/^        $file = new self($filename);$/;"	v
file	.\thinkphp\library\think\Lang.php	/^        $file  = is_string($file) ? [$file] : $file;$/;"	v
file	.\thinkphp\library\think\Request.php	/^                $file = str_replace('\\\\', '\/', dirname($file));$/;"	v
file	.\thinkphp\library\think\Request.php	/^            $file = $this->baseFile();$/;"	v
file	.\thinkphp\library\think\Request.php	/^            $file = $this->file();$/;"	v
file	.\thinkphp\library\think\Request.php	/^            $this->file = isset($_FILES) ? $_FILES : [];$/;"	v
file	.\thinkphp\library\think\Request.php	/^            return $this->file = array_merge($this->file, $name);$/;"	v
file	.\thinkphp\library\think\Request.php	/^    protected $file    = [];$/;"	v
file	.\thinkphp\library\think\Request.php	/^    public function file($name = '')$/;"	f
file	.\thinkphp\library\think\Route.php	/^                    $file   = $dir . DS . str_replace('.', DS, $val) . $suffix . EXT;$/;"	v
file	.\thinkphp\library\think\Route.php	/^                    $file   = pathinfo($file, PATHINFO_DIRNAME) . DS . Loader::parseName(pathinfo($file, PATHINFO_FILENAME), 1) . EXT;$/;"	v
file	.\thinkphp\library\think\Template.php	/^                    $file  = $array['file'];$/;"	v
file	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $file       = $reflection->getFileName();$/;"	v
file	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $file     = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n\/a';$/;"	v
file	.\thinkphp\library\think\exception\ErrorException.php	/^        $this->file     = $file;$/;"	v
file	.\thinkphp\library\think\template\taglib\Cx.php	/^        $file     = isset($tag['file']) ? $tag['file'] : $tag['href'];$/;"	v
file	.\vendor\composer\ClassLoader.php	/^            $file = $this->findFileWithExtension($class, '.hh');$/;"	v
file	.\vendor\composer\ClassLoader.php	/^            $file = apcu_fetch($this->apcuPrefix.$class, $hit);$/;"	v
file	.\vendor\composer\ClassLoader.php	/^        $file = $this->findFileWithExtension($class, '.php');$/;"	v
file	.\vendor\composer\ClassLoader.php	/^        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {$/;"	v
file	.\vendor\topthink\think-image\src\Image.php	/^            $file = new \\SplFileInfo($file);$/;"	v
file	.\vendor\topthink\think-image\tests\CropTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
file	.\vendor\topthink\think-image\tests\FlipTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
file	.\vendor\topthink\think-image\tests\RotateTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
file	.\vendor\topthink\think-image\tests\TextTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
file	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
file	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $file = new \\SplFileInfo($pathname);$/;"	v
fileExt	.\thinkphp\library\think\Validate.php	/^    protected function fileExt($file, $rule)$/;"	f
fileHandles	.\thinkphp\library\think\process\pipes\Windows.php	/^        $this->fileHandles = [];$/;"	v
fileHandles	.\thinkphp\library\think\process\pipes\Windows.php	/^    private $fileHandles = [];$/;"	v
fileIdentifier	.\thinkphp\library\think\Loader.php	/^        foreach (self::$files as $fileIdentifier => $file) {$/;"	v
fileIdentifier	.\vendor\composer\autoload_real.php	/^        foreach ($includeFiles as $fileIdentifier => $file) {$/;"	v
fileMime	.\thinkphp\library\think\Validate.php	/^    protected function fileMime($file, $rule)$/;"	f
fileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^            $fileName = $matches[1];$/;"	v
fileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $fileName = static::getCurrentTimestamp() . '_' . strtolower(implode($arr, '_')) . '.php';$/;"	v
fileName	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $fileName = Util::mapClassNameToFileName($className);$/;"	v
fileNames	.\vendor\topthink\think-migration\src\command\Migrate.php	/^            $fileNames = [];$/;"	v
fileNames	.\vendor\topthink\think-migration\src\command\Seed.php	/^            $fileNames = [];$/;"	v
filePath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $filePath = $file->getRealPath();$/;"	v
filePath	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $filePath = $path . DS . $fileName;$/;"	v
filePath	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $filePath = $path . DS . $className . '.php';$/;"	v
fileSize	.\thinkphp\library\think\Validate.php	/^    protected function fileSize($file, $rule)$/;"	f
file_load	.\thinkphp\library\think\log\driver\File.php	/^                $file_load  = ' [文件加载：' . count(get_included_files()) . ']';$/;"	v
file_load	.\thinkphp\library\think\log\driver\Socket.php	/^            $file_load  = ' [文件加载：' . count(get_included_files()) . ']';$/;"	v
filename	.\thinkphp\library\think\App.php	/^                        $filename = $dir . DS . $file;$/;"	v
filename	.\thinkphp\library\think\App.php	/^            $filename = CONF_PATH . $module . 'database' . CONF_EXT;$/;"	v
filename	.\thinkphp\library\think\Build.php	/^                            $filename = $modulePath . $path . DS . $val . '.html';$/;"	v
filename	.\thinkphp\library\think\Build.php	/^                    $filename = $modulePath . $path . DS . $val . ($suffix ? ucfirst($path) : '') . EXT;$/;"	v
filename	.\thinkphp\library\think\Build.php	/^        $filename = APP_PATH . ($module ? $module . DS : '') .$/;"	v
filename	.\thinkphp\library\think\File.php	/^        $filename = $path . $saveName;$/;"	v
filename	.\thinkphp\library\think\File.php	/^        $this->filename = $this->getRealPath() ?: $this->getPathname();$/;"	v
filename	.\thinkphp\library\think\File.php	/^    protected $filename;$/;"	v
filename	.\thinkphp\library\think\Loader.php	/^            $filename = $baseUrl . $class . $ext;$/;"	v
filename	.\thinkphp\library\think\cache\driver\File.php	/^        $filename = $this->getCacheKey($name);$/;"	v
filename	.\thinkphp\library\think\cache\driver\File.php	/^        $filename = $this->getCacheKey($name, true);$/;"	v
filename	.\thinkphp\library\think\cache\driver\File.php	/^        $filename = $this->options['path'] . $name . '.php';$/;"	v
filename	.\thinkphp\library\think\cache\driver\Lite.php	/^        $filename = $this->getCacheKey($name);$/;"	v
filename	.\thinkphp\library\think\console\command\optimize\Config.php	/^                        $filename = $dir . DS . $file;$/;"	v
filename	.\thinkphp\library\think\console\command\optimize\Config.php	/^            $filename = CONF_PATH . $module . 'database' . CONF_EXT;$/;"	v
filename	.\thinkphp\library\think\log\driver\File.php	/^                    $filename = $path . DS . $type . '.log';$/;"	v
filename	.\thinkphp\library\think\log\driver\File.php	/^                    $filename = $path . DS . date('Ymd') . '_' . $type . $cli . '.log';$/;"	v
filename	.\thinkphp\library\think\log\driver\File.php	/^                    $filename = $path . DS . date('d') . '_' . $type . $cli . '.log';$/;"	v
filename	.\thinkphp\library\think\log\driver\File.php	/^                $filename = date('Ym') . '\/' . date('d') . $cli . '.log';$/;"	v
filename	.\thinkphp\library\think\log\driver\File.php	/^                $filename = date('Ymd') . $cli . '.log';$/;"	v
files	.\thinkphp\library\think\App.php	/^                $files = $config['route_config_file'];$/;"	v
files	.\thinkphp\library\think\App.php	/^                $files = scandir($dir);$/;"	v
files	.\thinkphp\library\think\Debug.php	/^        $files = get_included_files();$/;"	v
files	.\thinkphp\library\think\Loader.php	/^    private static $files = [];$/;"	v
files	.\thinkphp\library\think\Request.php	/^        $files = $this->file;$/;"	v
files	.\thinkphp\library\think\cache\driver\File.php	/^        $files = (array) glob($this->options['path'] . ($this->options['prefix'] ? $this->options['prefix'] . DS : '') . '*');$/;"	v
files	.\thinkphp\library\think\console\command\Clear.php	/^        $files = scandir($path);$/;"	v
files	.\thinkphp\library\think\console\command\optimize\Config.php	/^                $files = scandir($dir);$/;"	v
files	.\thinkphp\library\think\console\command\optimize\Route.php	/^        $files = \\think\\Config::get('route_config_file');$/;"	v
files	.\thinkphp\library\think\log\driver\File.php	/^                $files    = glob($this->config['path'] . '*.log');$/;"	v
files	.\thinkphp\library\think\process\pipes\Windows.php	/^            $this->files = [$/;"	v
files	.\thinkphp\library\think\process\pipes\Windows.php	/^        $this->files = [];$/;"	v
files	.\thinkphp\library\think\process\pipes\Windows.php	/^    private $files = [];$/;"	v
files	.\vendor\composer\ClassLoader.php	/^     * Turns on searching the include path for class files.$/;"	c
files	.\vendor\composer\autoload_static.php	/^    public static $files = array ($/;"	v
filter	.\thinkphp\library\think\Collection.php	/^    public function filter(callable $callback = null)$/;"	f
filter	.\thinkphp\library\think\Request.php	/^                $filter = (array) $filter;$/;"	v
filter	.\thinkphp\library\think\Request.php	/^                $filter = explode(',', $filter);$/;"	v
filter	.\thinkphp\library\think\Request.php	/^            $filter = $filter ?: $this->filter;$/;"	v
filter	.\thinkphp\library\think\Request.php	/^            $filter = [];$/;"	v
filter	.\thinkphp\library\think\Request.php	/^            $this->filter = $filter;$/;"	v
filter	.\thinkphp\library\think\Request.php	/^            $this->filter = Config::get('default_filter');$/;"	v
filter	.\thinkphp\library\think\Request.php	/^        $filter = $this->getFilter($filter, $default);$/;"	v
filter	.\thinkphp\library\think\Request.php	/^    protected $filter;$/;"	v
filter	.\thinkphp\library\think\Request.php	/^    public function filter($filter = null)$/;"	f
filter	.\thinkphp\library\think\Validate.php	/^    protected function filter($value, $rule)$/;"	f
filter	.\vendor\topthink\think-mongo\src\Builder.php	/^        $filter = [];$/;"	v
filterExp	.\thinkphp\library\think\Request.php	/^    public function filterExp(&$value)$/;"	f
filterValue	.\thinkphp\library\think\Request.php	/^    private function filterValue(&$value, $key, $filters)$/;"	f
find	.\thinkphp\library\think\Console.php	/^    public function find($name)$/;"	f
find	.\thinkphp\library\think\Route.php	/^                        $find = true;$/;"	v
find	.\thinkphp\library\think\Route.php	/^                $find   = false;$/;"	v
find	.\thinkphp\library\think\Template.php	/^            $find    = ['~>\\s+<~', '~>(\\s+\\n|\\r)~'];$/;"	v
find	.\thinkphp\library\think\db\Query.php	/^    public function find($data = null)$/;"	f
find	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function find($data = null)$/;"	f
find	.\vendor\topthink\think-mongo\src\Query.php	/^    public function find($data = null)$/;"	f
findAlternatives	.\thinkphp\library\think\Console.php	/^    private function findAlternatives($name, $collection)$/;"	f
findClasses	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function findClasses($path)$/;"	f
findFile	.\thinkphp\library\think\Loader.php	/^    private static function findFile($class)$/;"	f
findFile	.\vendor\composer\ClassLoader.php	/^    public function findFile($class)$/;"	f
findFileWithExtension	.\vendor\composer\ClassLoader.php	/^    private function findFileWithExtension($class, $ext)$/;"	f
findNamespace	.\thinkphp\library\think\Console.php	/^    public function findNamespace($namespace)$/;"	f
findOrFail	.\thinkphp\library\think\db\Query.php	/^    public function findOrFail($data = null)$/;"	f
findOrFail	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function findOrFail($data = null)$/;"	f
findOrFail	.\vendor\topthink\think-mongo\src\Query.php	/^    public function findOrFail($data = null)$/;"	f
finfo	.\thinkphp\library\think\File.php	/^        $finfo = finfo_open(FILEINFO_MIME_TYPE);$/;"	v
fire	.\vendor\topthink\think-queue\src\queue\Job.php	/^    abstract public function fire();$/;"	f
fire	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function fire()$/;"	f
fire	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function fire()$/;"	f
fire	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^    public function fire()$/;"	f
fire	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function fire()$/;"	f
first	.\thinkphp\library\think\Hook.php	/^    public static function add($tag, $behavior, $first = false)$/;"	v
first	.\thinkphp\library\think\Loader.php	/^            $first = $prefix[0];$/;"	v
first	.\thinkphp\library\think\Loader.php	/^        $first           = $class[0];$/;"	v
first	.\thinkphp\library\think\Template.php	/^                            $first = substr($str, 0, 1);$/;"	v
first	.\thinkphp\library\think\Template.php	/^                        $first = array_shift($vars);$/;"	v
first	.\thinkphp\library\think\cache\driver\File.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Lite.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Memcached.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Redis.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Wincache.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\cache\driver\Xcache.php	/^            $first = true;$/;"	v
first	.\thinkphp\library\think\db\Query.php	/^                $first = false;$/;"	v
first	.\thinkphp\library\think\db\Query.php	/^        $first = true;$/;"	v
first	.\thinkphp\library\think\exception\Handle.php	/^        $first = ($line - 9 > 0) ? $line - 9 : 1;$/;"	v
first	.\vendor\composer\ClassLoader.php	/^        $first = $class[0];$/;"	v
first	.\vendor\composer\ClassLoader.php	/^        $first = $prefix[0];$/;"	v
first	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^            $first = $versions[0];$/;"	v
fk	.\thinkphp\library\think\model\Merge.php	/^            $this->fk = strtolower($this->name) . '_id';$/;"	v
fk	.\thinkphp\library\think\model\Merge.php	/^    protected $fk            = ''; \/\/  外键名 默认为主表名_id$/;"	v
fk	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $fk = new ForeignKey();$/;"	v
flag	.\thinkphp\library\think\Template.php	/^                $flag = substr($str, 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\TagLib.php	/^        $flag = substr($name, 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\taglib\Cx.php	/^            $flag  = substr($value, 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\taglib\Cx.php	/^        $flag     = substr($name, 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\taglib\Cx.php	/^        $flag  = substr($value, 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\taglib\Cx.php	/^        $flag = substr($tag['value'], 0, 1);$/;"	v
flag	.\thinkphp\library\think\template\taglib\Cx.php	/^        $flag = substr($value, 0, 1);$/;"	v
flag2	.\thinkphp\library\think\Template.php	/^                        $flag2 = substr($str, 1, 1);$/;"	v
flash	.\thinkphp\library\think\Session.php	/^    public static function flash($name, $value)$/;"	f
flip	.\thinkphp\library\think\Collection.php	/^    public function flip()$/;"	f
flip	.\vendor\topthink\think-image\src\Image.php	/^    public function flip($direction = self::FLIP_X)$/;"	f
float	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function float($name)$/;"	f
flush	.\thinkphp\library\think\Session.php	/^    public static function flush()$/;"	f
fontttf	.\vendor\topthink\think-captcha\src\Captcha.php	/^            $this->fontttf = $ttfs[array_rand($ttfs)];$/;"	v
fontttf	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->fontttf = $ttfPath . $this->fontttf;$/;"	v
for	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^        'ERR00' => "Does not supported function for only one image!",$/;"	f
force	.\thinkphp\library\think\Model.php	/^        $this->force = $force;$/;"	v
force	.\thinkphp\library\think\Model.php	/^    protected $force = false;$/;"	v
force	.\thinkphp\library\think\Model.php	/^    public function force($force = true)$/;"	f
force	.\thinkphp\library\think\db\Query.php	/^    public function force($force)$/;"	f
force	.\thinkphp\library\think\db\Query.php	/^    public function max($field, $force = true)$/;"	v
force	.\thinkphp\library\think\db\Query.php	/^    public function min($field, $force = true)$/;"	v
force	.\thinkphp\library\traits\model\SoftDelete.php	/^    public static function destroy($data, $force = false)$/;"	v
force	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $force   = !!$input->getOption('force');$/;"	v
force	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function rollback($version = null, $force = false)$/;"	v
force	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function rollbackToDateTime(\\DateTime $dateTime, $force = false)$/;"	v
foreground	.\thinkphp\library\think\console\output\formatter\Style.php	/^            $this->foreground = null;$/;"	v
foreground	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $this->foreground = static::$availableForegroundColors[$color];$/;"	v
foreground	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private $foreground;$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^            $foreignKey = $morph . '_id';$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^        $foreignKey = $foreignKey ?: $name . '_id';$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey($model);$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey($this->name);$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^    public function belongsTo($model, $foreignKey = '', $localKey = '', $alias = [], $joinType = 'INNER')$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^    public function hasMany($model, $foreignKey = '', $localKey = '')$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^    public function hasManyThrough($model, $through, $foreignKey = '', $throughKey = '', $localKey = '')$/;"	v
foreignKey	.\thinkphp\library\think\Model.php	/^    public function hasOne($model, $foreignKey = '', $localKey = '', $alias = [], $joinType = 'INNER')$/;"	v
foreignKey	.\thinkphp\library\think\model\Relation.php	/^    protected $foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->foreignKey = $foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->foreignKey => $data[$this->foreignKey],$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasMany.php	/^                $this->foreignKey => [$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->foreignKey = $foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasOne.php	/^                $foreignKey => [$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasOne.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->foreignKey = $foreignKey;$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $foreignKeys = $table->getForeignKeys();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $foreignKeys = $this->getForeignKeys($tableName);$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $foreignKeys = array();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $foreignKeys = $table->getForeignKeys();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $foreignKeys = $this->getForeignKeys($tableName);$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $foreignKeys = array();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $foreignKeys = $table->getForeignKeys();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $foreignKeys = $this->getForeignKeys($tableName);$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $foreignKeys = array();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $foreignKeys = $table->getForeignKeys();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $foreignKeys = $this->getForeignKeys($tableName);$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $foreignKeys = array();$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->foreignKeys = $foreignKeys;$/;"	v
foreignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $foreignKeys = array();$/;"	v
forever	.\thinkphp\library\think\Cookie.php	/^    public static function forever($name, $value = '', $option = null)$/;"	f
format	.\thinkphp\library\think\Model.php	/^                    $format = !empty($param) ? $param : $this->dateFormat;$/;"	v
format	.\thinkphp\library\think\Model.php	/^                $format = !empty($param) ? $param : $this->dateFormat;$/;"	v
format	.\thinkphp\library\think\console\output\Formatter.php	/^    public function format($message)$/;"	f
format	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^        $format = $input->getOption('format');$/;"	v
formatDateTime	.\thinkphp\library\think\Model.php	/^    protected function formatDateTime($time, $format, $timestamp = false)$/;"	f
formatDefaultValue	.\thinkphp\library\think\console\output\Descriptor.php	/^    private function formatDefaultValue($default)$/;"	f
formatter	.\thinkphp\library\think\console\output\driver\Console.php	/^        $this->formatter = new Formatter();$/;"	v
formatter	.\thinkphp\library\think\console\output\driver\Console.php	/^    private $formatter;$/;"	v
found	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $found = true;$/;"	v
fragment	.\thinkphp\library\think\Paginator.php	/^    public function fragment($fragment)$/;"	f
frames	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^                $this->frames = $de->getFrames();$/;"	v
frames	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    private $frames = [];$/;"	v
free	.\thinkphp\library\think\db\Connection.php	/^    public function free()$/;"	f
free	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function free()$/;"	f
fun	.\thinkphp\library\think\Route.php	/^                $fun = '';$/;"	v
fun	.\thinkphp\library\think\Template.php	/^                $fun = trim($args[0]);$/;"	v
fun	.\thinkphp\library\think\controller\Rest.php	/^            $fun = $method . '_' . $this->method . '_' . $this->type;$/;"	v
fun	.\thinkphp\library\think\controller\Rest.php	/^            $fun = $method . '_' . $this->method;$/;"	v
fun	.\thinkphp\library\think\controller\Rest.php	/^            $fun = $method . '_' . $this->type;$/;"	v
fun	.\thinkphp\library\think\template\taglib\Cx.php	/^            $fun      = ('in' == $type) ? 'in_array' : '!in_array';$/;"	v
fun	.\vendor\topthink\think-image\src\Image.php	/^            $fun      = "imagecreatefrom{$this->info['type']}";$/;"	v
fun	.\vendor\topthink\think-image\src\Image.php	/^            $fun = 'image' . $type;$/;"	v
fun	.\vendor\topthink\think-image\src\Image.php	/^        $fun   = 'imagecreatefrom' . image_type_to_extension($info[2], false);$/;"	v
fun	.\vendor\topthink\think-mongo\src\Builder.php	/^            $groups[$field . '_' . $fun] = ['$' . $fun => '$' . $field];$/;"	v
fun	.\vendor\topthink\think-mongo\src\Builder.php	/^            ['$group' => ['_id' => null, 'aggregate' => ['$' . $fun => '$' . $field]]],$/;"	v
fun	.\vendor\topthink\think-mongo\src\Builder.php	/^        foreach ($aggregate as $fun => $field) {$/;"	v
func	.\thinkphp\library\think\Template.php	/^        $func   = function ($template) use (&$func, &$regex, &$array, &$extend, &$blocks, &$baseBlocks) {$/;"	v
func	.\thinkphp\library\think\Template.php	/^        $func  = function ($template) use (&$func, &$regex, &$content) {$/;"	v
func	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $func          = $this->options['persistent'] ? 'sqlite_popen' : 'sqlite_open';$/;"	v
func	.\thinkphp\library\think\session\driver\Redis.php	/^        $func = $this->config['persistent'] ? 'pconnect' : 'connect';$/;"	v
func	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $func        = $this->options['persistent'] ? 'pconnect' : 'connect';$/;"	v
function	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $function = $trace[$i]['function'];$/;"	v
gb	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $gb = $bgs[array_rand($bgs)];$/;"	v
gc	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function gc($sessMaxLifeTime)$/;"	f
gc	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function gc($sessMaxLifeTime)$/;"	f
gc	.\thinkphp\library\think\session\driver\Redis.php	/^    public function gc($sessMaxLifeTime)$/;"	f
get	.\thinkphp\library\think\Cache.php	/^    public static function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\Config.php	/^    public static function get($name = null, $range = '')$/;"	f
get	.\thinkphp\library\think\Console.php	/^    public function get($name)$/;"	f
get	.\thinkphp\library\think\Cookie.php	/^    public static function get($name = '', $prefix = null)$/;"	f
get	.\thinkphp\library\think\Env.php	/^    public static function get($name, $default = null)$/;"	f
get	.\thinkphp\library\think\Hook.php	/^    public static function get($tag = '')$/;"	f
get	.\thinkphp\library\think\Lang.php	/^    public static function get($name = null, $vars = [], $range = '')$/;"	f
get	.\thinkphp\library\think\Model.php	/^    public static function get($data, $with = [], $cache = false)$/;"	f
get	.\thinkphp\library\think\Request.php	/^            $this->get = $_GET;$/;"	v
get	.\thinkphp\library\think\Request.php	/^            return $this->get = array_merge($this->get, $name);$/;"	v
get	.\thinkphp\library\think\Request.php	/^    protected $get     = [];$/;"	v
get	.\thinkphp\library\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	f
get	.\thinkphp\library\think\Route.php	/^    public static function get($rule, $route = '', $option = [], $pattern = [])$/;"	f
get	.\thinkphp\library\think\Session.php	/^    public static function get($name = '', $prefix = null)$/;"	f
get	.\thinkphp\library\think\Template.php	/^    public function get($name = '')$/;"	f
get	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function get($name, $default = false);$/;"	f
get	.\thinkphp\library\think\cache\driver\File.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function get($name, $default = false)$/;"	f
get	.\thinkphp\library\think\model\Merge.php	/^    public static function get($data = null, $with = [], $cache = false)$/;"	f
getAbbreviationSuggestions	.\thinkphp\library\think\Console.php	/^    private function getAbbreviationSuggestions($abbrevs)$/;"	f
getAbbreviations	.\thinkphp\library\think\Console.php	/^    public static function getAbbreviations($names)$/;"	f
getActivePageWrapper	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getActivePageWrapper($text)$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    public function getAdapter($name, array $options)$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getAdapter()$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\WrapperInterface.php	/^    public function getAdapter();$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getAdapter()$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function getAdapter()$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function getAdapter();$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function getAdapter()$/;"	f
getAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function getAdapter();$/;"	f
getAdapter	.\vendor\topthink\think-migration\src\Command.php	/^    public function getAdapter()$/;"	f
getAdapterTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function getAdapterTableName($tableName)$/;"	f
getAdapterType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getAdapterType();$/;"	f
getAdapterType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getAdapterType()$/;"	f
getAdapterType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function getAdapterType()$/;"	f
getAdapterType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function getAdapterType()$/;"	f
getAfter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getAfter()$/;"	f
getAliasedOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected function getAliasedOptions()$/;"	f
getAliases	.\thinkphp\library\think\console\Command.php	/^    public function getAliases()$/;"	f
getAllSchemas	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getAllSchemas()$/;"	f
getAnimation	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function getAnimation()$/;"	f
getApcuPrefix	.\vendor\composer\ClassLoader.php	/^    public function getApcuPrefix()$/;"	f
getArgument	.\thinkphp\library\think\console\Input.php	/^    public function getArgument($name)$/;"	f
getArgument	.\thinkphp\library\think\console\input\Definition.php	/^    public function getArgument($name)$/;"	f
getArgumentCount	.\thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentCount()$/;"	f
getArgumentDefaults	.\thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentDefaults()$/;"	f
getArgumentRequiredCount	.\thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentRequiredCount()$/;"	f
getArguments	.\thinkphp\library\think\console\Input.php	/^    public function getArguments()$/;"	f
getArguments	.\thinkphp\library\think\console\input\Definition.php	/^    public function getArguments()$/;"	f
getAttr	.\thinkphp\library\think\Model.php	/^    public function getAttr($name)$/;"	f
getAutocompleterValues	.\thinkphp\library\think\console\output\Question.php	/^    public function getAutocompleterValues()$/;"	f
getAvailablePageWrapper	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getAvailablePageWrapper($url, $page)$/;"	f
getBind	.\thinkphp\library\think\Route.php	/^    public static function getBind($type)$/;"	f
getBind	.\thinkphp\library\think\db\Query.php	/^    public function getBind()$/;"	f
getBindAttr	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function getBindAttr()$/;"	f
getBuilder	.\thinkphp\library\think\db\Connection.php	/^    public function getBuilder()$/;"	f
getBuilder	.\thinkphp\library\think\db\Query.php	/^    public function getBuilder()$/;"	f
getByte	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function getByte($len)$/;"	f
getCache	.\thinkphp\library\think\Request.php	/^    public function getCache()$/;"	f
getCacheKey	.\thinkphp\library\think\cache\Driver.php	/^    protected function getCacheKey($name)$/;"	f
getCacheKey	.\thinkphp\library\think\cache\driver\File.php	/^    protected function getCacheKey($name, $auto = false)$/;"	f
getCacheKey	.\thinkphp\library\think\cache\driver\Lite.php	/^    protected function getCacheKey($name)$/;"	f
getCacheKey	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    protected function getCacheKey($name)$/;"	f
getCacheKey	.\thinkphp\library\think\db\Query.php	/^    protected function getCacheKey($value, $options, $bind = [])$/;"	f
getCacheKey	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function getCacheKey($value, $options)$/;"	f
getChangedData	.\thinkphp\library\think\Model.php	/^    public function getChangedData()$/;"	f
getChoices	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function getChoices()$/;"	f
getClass	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function getClass()$/;"	f
getClass	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    protected function getClass($name)$/;"	f
getClassMap	.\vendor\composer\ClassLoader.php	/^    public function getClassMap()$/;"	f
getClassName	.\thinkphp\library\think\console\command\Make.php	/^    protected function getClassName($name)$/;"	f
getClassName	.\thinkphp\library\think\console\command\make\Controller.php	/^    protected function getClassName($name)$/;"	f
getClientArg	.\thinkphp\library\think\log\driver\Socket.php	/^    protected function getClientArg($name)$/;"	f
getCode	.\thinkphp\library\think\Response.php	/^    public function getCode()$/;"	f
getCode	.\thinkphp\library\think\exception\Handle.php	/^    protected function getCode(Exception $exception)$/;"	f
getCollection	.\thinkphp\library\think\Paginator.php	/^    public function getCollection()$/;"	f
getColumnComment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getColumnComment($tableName, $columnName)$/;"	f
getColumnCommentSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getColumnCommentSqlDefinition(Column $column, $tableName)$/;"	f
getColumnCommentSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getColumnCommentSqlDefinition(Column $column, $tableName)$/;"	f
getColumnSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getColumnSqlDefinition(Column $column)$/;"	f
getColumnSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getColumnSqlDefinition(Column $column)$/;"	f
getColumnSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getColumnSqlDefinition(Column $column)$/;"	f
getColumnSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getColumnSqlDefinition(Column $column, $create = true)$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getColumnTypes();$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getColumnTypes()$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function getColumnTypes()$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getColumnTypes()$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getColumnTypes()$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function getColumnTypes()$/;"	f
getColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getColumnTypes()$/;"	f
getColumnWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^    private function getColumnWidth(array $commands)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getColumns($tableName);$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function getColumns($tableName)$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getColumns()$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getColumns()$/;"	f
getColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function getColumns()$/;"	f
getCommand	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getCommand($name)$/;"	f
getCommandLine	.\thinkphp\library\think\Process.php	/^    public function getCommandLine()$/;"	f
getCommandName	.\thinkphp\library\think\Console.php	/^    protected function getCommandName(Input $input)$/;"	f
getCommandStartTime	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getCommandStartTime()$/;"	f
getCommands	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getCommands()$/;"	f
getCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function getCommands()$/;"	f
getComment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getComment()$/;"	f
getCommentDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getCommentDefinition(Column $column)$/;"	f
getConfig	.\thinkphp\library\think\db\Connection.php	/^    public function getConfig($config = '')$/;"	f
getConfig	.\thinkphp\library\think\db\Query.php	/^    public function getConfig($name = '')$/;"	f
getConfig	.\vendor\topthink\think-migration\src\Command.php	/^    protected function getConfig($name, $default = null)$/;"	f
getConfig	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function getConfig($config = '')$/;"	f
getConfig	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getConfig($name = '')$/;"	f
getConnection	.\thinkphp\library\think\db\Builder.php	/^    public function getConnection()$/;"	f
getConnection	.\thinkphp\library\think\db\Query.php	/^    public function getConnection()$/;"	f
getConnection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getConnection()$/;"	f
getConnection	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getConnection()$/;"	f
getConsole	.\thinkphp\library\think\console\Command.php	/^    public function getConsole()$/;"	f
getConst	.\thinkphp\library\think\exception\Handle.php	/^    private static function getConst()$/;"	f
getConstraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getConstraint()$/;"	f
getContent	.\thinkphp\library\think\Request.php	/^    public function getContent()$/;"	f
getContent	.\thinkphp\library\think\Response.php	/^    public function getContent()$/;"	f
getCurrent	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function getCurrent()$/;"	f
getCurrentPage	.\thinkphp\library\think\Paginator.php	/^    public static function getCurrentPage($varPage = 'page', $default = 1)$/;"	f
getCurrentPath	.\thinkphp\library\think\Paginator.php	/^    public static function getCurrentPath()$/;"	f
getCurrentTimestamp	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function getCurrentTimestamp()$/;"	f
getCurrentVersion	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^    protected function getCurrentVersion()$/;"	f
getCursor	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getCursor()$/;"	f
getData	.\thinkphp\library\think\Exception.php	/^    final public function getData()$/;"	f
getData	.\thinkphp\library\think\Model.php	/^    public function getData($name = null)$/;"	f
getData	.\thinkphp\library\think\Response.php	/^    public function getData()$/;"	f
getData	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getData()$/;"	f
getDataValue	.\thinkphp\library\think\Validate.php	/^    protected function getDataValue($data, $key)$/;"	f
getDbConfig	.\vendor\topthink\think-migration\src\Command.php	/^    protected function getDbConfig()$/;"	f
getDefault	.\thinkphp\library\think\console\input\Argument.php	/^    public function getDefault()$/;"	f
getDefault	.\thinkphp\library\think\console\input\Option.php	/^    public function getDefault()$/;"	f
getDefault	.\thinkphp\library\think\console\output\Question.php	/^    public function getDefault()$/;"	f
getDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getDefault()$/;"	f
getDefaultCommands	.\thinkphp\library\think\Console.php	/^    protected function getDefaultCommands()$/;"	f
getDefaultConstraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getDefaultConstraint($tableName, $columnName)$/;"	f
getDefaultInputDefinition	.\thinkphp\library\think\Console.php	/^    protected function getDefaultInputDefinition()$/;"	f
getDefaultNormalizer	.\thinkphp\library\think\console\output\question\Confirmation.php	/^    private function getDefaultNormalizer()$/;"	f
getDefaultValidator	.\thinkphp\library\think\console\output\question\Choice.php	/^    private function getDefaultValidator()$/;"	f
getDefaultValueDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getDefaultValueDefinition($default)$/;"	f
getDefaultValueDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getDefaultValueDefinition($default)$/;"	f
getDefaultValueDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getDefaultValueDefinition($default)$/;"	f
getDefaultValueDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getDefaultValueDefinition($default)$/;"	f
getDefinition	.\thinkphp\library\think\Console.php	/^    public function getDefinition()$/;"	f
getDefinition	.\thinkphp\library\think\console\Command.php	/^    public function getDefinition()$/;"	f
getDelays	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function getDelays()$/;"	f
getDeleteTimeField	.\thinkphp\library\traits\model\SoftDelete.php	/^    protected function getDeleteTimeField($read = false)$/;"	f
getDescription	.\thinkphp\library\think\console\Command.php	/^    public function getDescription()$/;"	f
getDescription	.\thinkphp\library\think\console\input\Argument.php	/^    public function getDescription()$/;"	f
getDescription	.\thinkphp\library\think\console\input\Option.php	/^    public function getDescription()$/;"	f
getDescriptors	.\thinkphp\library\think\Process.php	/^    private function getDescriptors()$/;"	f
getDescriptors	.\thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function getDescriptors();$/;"	f
getDescriptors	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function getDescriptors()$/;"	f
getDescriptors	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function getDescriptors()$/;"	f
getDisabledTextWrapper	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getDisabledTextWrapper($text)$/;"	f
getDots	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getDots()$/;"	f
getEagerlyType	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function getEagerlyType()$/;"	f
getEmptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function getEmptyStyle()$/;"	f
getEnhanceSigchildCompatibility	.\thinkphp\library\think\Process.php	/^    public function getEnhanceSigchildCompatibility()$/;"	f
getEnhanceWindowsCompatibility	.\thinkphp\library\think\Process.php	/^    public function getEnhanceWindowsCompatibility()$/;"	f
getEnv	.\thinkphp\library\think\Process.php	/^    public function getEnv()$/;"	f
getError	.\thinkphp\library\think\File.php	/^    public function getError()$/;"	f
getError	.\thinkphp\library\think\Model.php	/^    public function getError()$/;"	f
getError	.\thinkphp\library\think\Validate.php	/^    public function getError()$/;"	f
getError	.\thinkphp\library\think\db\Connection.php	/^    public function getError()$/;"	f
getError	.\thinkphp\library\think\exception\ValidateException.php	/^    public function getError()$/;"	f
getErrorOutput	.\thinkphp\library\think\Process.php	/^    public function getErrorOutput()$/;"	f
getExceededTimeout	.\thinkphp\library\think\process\exception\Timeout.php	/^    public function getExceededTimeout()$/;"	f
getExceptionHandler	.\thinkphp\library\think\Error.php	/^    public static function getExceptionHandler()$/;"	f
getExceptionHandler	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function getExceptionHandler()$/;"	f
getExecuteTimes	.\thinkphp\library\think\db\Connection.php	/^    public function getExecuteTimes()$/;"	f
getExistingMigrationClassNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function getExistingMigrationClassNames($path)$/;"	f
getExitCode	.\thinkphp\library\think\Process.php	/^    public function getExitCode()$/;"	f
getExitCodeText	.\thinkphp\library\think\Process.php	/^    public function getExitCodeText()$/;"	f
getExpiredJobs	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function getExpiredJobs($from, $time)$/;"	f
getExplain	.\thinkphp\library\think\db\Connection.php	/^    abstract protected function getExplain($sql);$/;"	f
getExplain	.\thinkphp\library\think\db\connector\Mysql.php	/^    protected function getExplain($sql)$/;"	f
getExplain	.\thinkphp\library\think\db\connector\Pgsql.php	/^    protected function getExplain($sql)$/;"	f
getExplain	.\thinkphp\library\think\db\connector\Sqlite.php	/^    protected function getExplain($sql)$/;"	f
getExplain	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected function getExplain($sql)$/;"	f
getExtendData	.\thinkphp\library\think\exception\Handle.php	/^    protected function getExtendData(Exception $exception)$/;"	f
getFallbackDirs	.\vendor\composer\ClassLoader.php	/^    public function getFallbackDirs()$/;"	f
getFallbackDirsPsr4	.\vendor\composer\ClassLoader.php	/^    public function getFallbackDirsPsr4()$/;"	f
getFieldBindType	.\thinkphp\library\think\db\Query.php	/^    protected function getFieldBindType($type)$/;"	f
getFields	.\thinkphp\library\think\db\Connection.php	/^    abstract public function getFields($tableName);$/;"	f
getFields	.\thinkphp\library\think\db\connector\Mysql.php	/^    public function getFields($tableName)$/;"	f
getFields	.\thinkphp\library\think\db\connector\Pgsql.php	/^    public function getFields($tableName)$/;"	f
getFields	.\thinkphp\library\think\db\connector\Sqlite.php	/^    public function getFields($tableName)$/;"	f
getFields	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    public function getFields($tableName)$/;"	f
getFieldsBind	.\thinkphp\library\think\db\Query.php	/^    public function getFieldsBind($table = '')$/;"	f
getFieldsType	.\thinkphp\library\think\db\Query.php	/^    public function getFieldsType($table = '')$/;"	f
getFile	.\thinkphp\library\think\Debug.php	/^    public static function getFile($detail = false)$/;"	f
getFiles	.\thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function getFiles();$/;"	f
getFiles	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function getFiles()$/;"	f
getFiles	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function getFiles()$/;"	f
getFilter	.\thinkphp\library\think\Request.php	/^    protected function getFilter($filter, $default)$/;"	f
getFirstArgument	.\thinkphp\library\think\console\Input.php	/^    public function getFirstArgument()$/;"	f
getForeignKey	.\thinkphp\library\think\Model.php	/^    protected function getForeignKey($name)$/;"	f
getForeignKeySqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getForeignKeySqlDefinition(ForeignKey $foreignKey)$/;"	f
getForeignKeySqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getForeignKeySqlDefinition(ForeignKey $foreignKey, $tableName)$/;"	f
getForeignKeySqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getForeignKeySqlDefinition(ForeignKey $foreignKey)$/;"	f
getForeignKeySqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getForeignKeySqlDefinition(ForeignKey $foreignKey, $tableName)$/;"	f
getForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getForeignKeys($tableName)$/;"	f
getForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getForeignKeys($tableName)$/;"	f
getForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getForeignKeys($tableName)$/;"	f
getForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getForeignKeys($tableName)$/;"	f
getForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getForeignKeys()$/;"	f
getFormatter	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function getFormatter()$/;"	f
getFrames	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function getFrames()$/;"	f
getGif	.\vendor\topthink\think-image\tests\TestCase.php	/^    protected function getGif()$/;"	f
getGroup	.\thinkphp\library\think\Route.php	/^    public static function getGroup($type)$/;"	f
getHeader	.\thinkphp\library\think\Response.php	/^    public function getHeader($name = '')$/;"	f
getHeaders	.\thinkphp\library\think\exception\HttpException.php	/^    public function getHeaders()$/;"	f
getHelp	.\thinkphp\library\think\Console.php	/^    public function getHelp()$/;"	f
getHelp	.\thinkphp\library\think\console\Command.php	/^    public function getHelp()$/;"	f
getHiddenResponse	.\thinkphp\library\think\console\output\Ask.php	/^    protected function getHiddenResponse($inputStream)$/;"	f
getIdentity	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getIdentity()$/;"	f
getIdleTimeout	.\thinkphp\library\think\Process.php	/^    public function getIdleTimeout()$/;"	f
getImageType	.\thinkphp\library\think\File.php	/^    protected function getImageType($image)$/;"	f
getImageType	.\thinkphp\library\think\Validate.php	/^    protected function getImageType($image)$/;"	f
getIncludeTagLib	.\thinkphp\library\think\Template.php	/^    private function getIncludeTagLib(&$content)$/;"	f
getIncrementalErrorOutput	.\thinkphp\library\think\Process.php	/^    public function getIncrementalErrorOutput()$/;"	f
getIncrementalOutput	.\thinkphp\library\think\Process.php	/^    public function getIncrementalOutput()$/;"	f
getIndexColums	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getIndexColums($tableId, $indexId)$/;"	f
getIndexSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getIndexSqlDefinition(Index $index)$/;"	f
getIndexSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getIndexSqlDefinition(Index $index, $tableName)$/;"	f
getIndexSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getIndexSqlDefinition(Table $table, Index $index)$/;"	f
getIndexSqlDefinition	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function getIndexSqlDefinition(Index $index, $tableName)$/;"	f
getIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected function getIndexes($tableName)$/;"	f
getIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function getIndexes($tableName)$/;"	f
getIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    protected function getIndexes($tableName)$/;"	f
getIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getIndexes($tableName)$/;"	f
getIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getIndexes()$/;"	f
getInfo	.\thinkphp\library\think\File.php	/^    public function getInfo($name = '')$/;"	f
getInitializer	.\vendor\composer\autoload_static.php	/^    public static function getInitializer(ClassLoader $loader)$/;"	f
getInput	.\thinkphp\library\think\Process.php	/^    public function getInput()$/;"	f
getInput	.\thinkphp\library\think\Request.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getInput();$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function getInput();$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function getInput();$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function getInput()$/;"	f
getInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function getInput();$/;"	f
getInstallPath	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^    public function getInstallPath(PackageInterface $package)$/;"	f
getInstallPath	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^    public function getInstallPath(PackageInterface $package)$/;"	f
getInvertedCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function getInvertedCommands()$/;"	f
getIterator	.\thinkphp\library\think\Collection.php	/^    public function getIterator()$/;"	f
getIterator	.\thinkphp\library\think\Paginator.php	/^    public function getIterator()$/;"	f
getJoinTable	.\thinkphp\library\think\db\Query.php	/^    protected function getJoinTable($join, &$alias = null)$/;"	f
getJpeg	.\vendor\topthink\think-image\tests\TestCase.php	/^    protected function getJpeg()$/;"	f
getLastInsID	.\thinkphp\library\think\db\Connection.php	/^    public function getLastInsID($sequence = null)$/;"	f
getLastInsID	.\thinkphp\library\think\db\Query.php	/^    public function getLastInsID($sequence = null)$/;"	f
getLastInsID	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function getLastInsID()$/;"	f
getLastInsID	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getLastInsID()$/;"	f
getLastSql	.\thinkphp\library\think\db\Connection.php	/^    public function getLastSql()$/;"	f
getLastSql	.\thinkphp\library\think\db\Query.php	/^    public function getLastSql()$/;"	f
getLastSql	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getLastSql()$/;"	f
getLimit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getLimit()$/;"	f
getLimit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function getLimit()$/;"	f
getLinks	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getLinks()$/;"	f
getLoader	.\vendor\composer\autoload_real.php	/^    public static function getLoader()$/;"	f
getLog	.\thinkphp\library\think\Log.php	/^    public static function getLog($type = '')$/;"	f
getLongVersion	.\thinkphp\library\think\Console.php	/^    public function getLongVersion()$/;"	f
getMaxAttempts	.\thinkphp\library\think\console\output\Question.php	/^    public function getMaxAttempts()$/;"	f
getMemPeak	.\thinkphp\library\think\Debug.php	/^    public static function getMemPeak($start, $end, $dec = 2)$/;"	f
getMessage	.\thinkphp\library\think\exception\Handle.php	/^    protected function getMessage(Exception $exception)$/;"	f
getMigrationTemplate	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function getMigrationTemplate();$/;"	f
getMigrations	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function getMigrations()$/;"	f
getMime	.\thinkphp\library\think\File.php	/^    public function getMime()$/;"	f
getMode	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function getMode()$/;"	f
getModel	.\thinkphp\library\think\db\Query.php	/^    public function getModel()$/;"	f
getModel	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function getModel()$/;"	f
getModel	.\thinkphp\library\think\model\Relation.php	/^    public function getModel()$/;"	f
getModel	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function getModel()$/;"	f
getModelField	.\thinkphp\library\think\model\Merge.php	/^    protected static function getModelField($query, $name, $table = '', $map = [], $fields = [])$/;"	f
getModuleAndClass	.\thinkphp\library\think\Loader.php	/^    protected static function getModuleAndClass($name, $layer, $appendSuffix)$/;"	f
getMongo	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function getMongo()$/;"	f
getName	.\thinkphp\library\think\Console.php	/^    public function getName()$/;"	f
getName	.\thinkphp\library\think\console\Command.php	/^    public function getName()$/;"	f
getName	.\thinkphp\library\think\console\input\Argument.php	/^    public function getName()$/;"	f
getName	.\thinkphp\library\think\console\input\Option.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function getName();$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function getName()$/;"	f
getName	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function getName();$/;"	f
getName	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function getName()$/;"	f
getNamespace	.\thinkphp\library\think\console\command\Make.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getNamespace	.\thinkphp\library\think\console\command\make\Controller.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getNamespace	.\thinkphp\library\think\console\command\make\Model.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getNamespaces	.\thinkphp\library\think\Console.php	/^    public function getNamespaces()$/;"	f
getNamespaces	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getNamespaces()$/;"	f
getNativeDefinition	.\thinkphp\library\think\console\Command.php	/^    public function getNativeDefinition()$/;"	f
getNativeDefinition	.\thinkphp\library\think\console\command\Lists.php	/^    public function getNativeDefinition()$/;"	f
getNextAvailableJob	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function getNextAvailableJob($queue)$/;"	f
getNextButton	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getNextButton($text = '&raquo;')$/;"	f
getNextJob	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    protected function getNextJob($queue)$/;"	f
getNormalizer	.\thinkphp\library\think\console\output\Question.php	/^    public function getNormalizer()$/;"	f
getNull	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getNull()$/;"	f
getNumRows	.\thinkphp\library\think\db\Connection.php	/^    public function getNumRows()$/;"	f
getOnDelete	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getOnDelete()$/;"	f
getOnUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getOnUpdate()$/;"	f
getOption	.\thinkphp\library\think\Route.php	/^    public static function getOption()$/;"	f
getOption	.\thinkphp\library\think\console\Input.php	/^    public function getOption($name)$/;"	f
getOption	.\thinkphp\library\think\console\input\Definition.php	/^    public function getOption($name)$/;"	f
getOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getOption($name);$/;"	f
getOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getOption($name)$/;"	f
getOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getOption($name)$/;"	f
getOptionDefaults	.\thinkphp\library\think\console\input\Definition.php	/^    public function getOptionDefaults()$/;"	f
getOptionForShortcut	.\thinkphp\library\think\console\input\Definition.php	/^    public function getOptionForShortcut($shortcut)$/;"	f
getOptions	.\thinkphp\library\think\Process.php	/^    public function getOptions()$/;"	f
getOptions	.\thinkphp\library\think\console\Input.php	/^    public function getOptions()$/;"	f
getOptions	.\thinkphp\library\think\console\input\Definition.php	/^    public function getOptions()$/;"	f
getOptions	.\thinkphp\library\think\db\Query.php	/^    public function getOptions($name = '')$/;"	f
getOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getOptions();$/;"	f
getOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getOptions()$/;"	f
getOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getOptions()$/;"	f
getOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getOptions()$/;"	f
getOptions	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getOptions($name = '')$/;"	f
getOutput	.\thinkphp\library\think\Process.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getOutput();$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function getOutput();$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function getOutput();$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function getOutput()$/;"	f
getOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function getOutput();$/;"	f
getPageLinkWrapper	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getPageLinkWrapper($url, $page)$/;"	f
getParamValue	.\thinkphp\library\think\App.php	/^    private static function getParamValue($param, &$vars, $type)$/;"	f
getParameterOption	.\thinkphp\library\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	f
getParent	.\thinkphp\library\think\Model.php	/^    public function getParent()$/;"	f
getParent	.\thinkphp\library\think\model\Relation.php	/^    public function getParent()$/;"	f
getPartitionTableName	.\thinkphp\library\think\db\Query.php	/^    public function getPartitionTableName($data, $field, $rule = [])$/;"	f
getPath	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function getPath()$/;"	f
getPath	.\vendor\topthink\think-migration\src\command\Seed.php	/^    protected function getPath()$/;"	f
getPathCode	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function getPathCode($path)$/;"	f
getPathName	.\thinkphp\library\think\console\command\Make.php	/^    protected function getPathName($name)$/;"	f
getPdo	.\thinkphp\library\think\db\Connection.php	/^    public function getPdo()$/;"	f
getPdo	.\thinkphp\library\think\db\Query.php	/^    public function getPdo()$/;"	f
getPendingColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function getPendingColumns()$/;"	f
getPhinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function getPhinxType($sqlTypeDef)$/;"	f
getPhinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getPhinxType($sqlType)$/;"	f
getPhinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function getPhinxType($sqlTypeDef)$/;"	f
getPhinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getPhinxType($sqlType)$/;"	f
getPid	.\thinkphp\library\think\Process.php	/^    public function getPid()$/;"	f
getPk	.\thinkphp\library\think\Model.php	/^    public function getPk($name = '')$/;"	f
getPk	.\thinkphp\library\think\db\Query.php	/^    public function getPk($options = '')$/;"	f
getPk	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getPk()$/;"	f
getPng	.\vendor\topthink\think-image\tests\TestCase.php	/^    protected function getPng()$/;"	f
getPrecision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getPrecision()$/;"	f
getPrefix	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function getPrefix()$/;"	f
getPrefixes	.\vendor\composer\ClassLoader.php	/^    public function getPrefixes()$/;"	f
getPrefixesPsr4	.\vendor\composer\ClassLoader.php	/^    public function getPrefixesPsr4()$/;"	f
getPreviousButton	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getPreviousButton($text = "&laquo;")$/;"	f
getProcess	.\thinkphp\library\think\process\Builder.php	/^    public function getProcess()$/;"	f
getProcess	.\thinkphp\library\think\process\exception\Failed.php	/^    public function getProcess()$/;"	f
getProcess	.\thinkphp\library\think\process\exception\Timeout.php	/^    public function getProcess()$/;"	f
getProcessedHelp	.\thinkphp\library\think\console\Command.php	/^    public function getProcessedHelp()$/;"	f
getPrompt	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function getPrompt()$/;"	f
getProperties	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getProperties()$/;"	f
getQuery	.\thinkphp\library\think\Model.php	/^    public function getQuery($buildNewQuery = false)$/;"	f
getQuery	.\thinkphp\library\think\db\Builder.php	/^    public function getQuery()$/;"	f
getQuery	.\thinkphp\library\think\db\Connection.php	/^    protected function getQuery()$/;"	f
getQuery	.\thinkphp\library\think\model\Relation.php	/^    public function getQuery()$/;"	f
getQuery	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function getQuery($model = 'db', $queryClass = '')$/;"	f
getQueryFields	.\thinkphp\library\think\model\Relation.php	/^    protected function getQueryFields($model)$/;"	f
getQueryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function getQueryStr()$/;"	f
getQueryTimes	.\thinkphp\library\think\db\Connection.php	/^    public function getQueryTimes($execute = false)$/;"	f
getQuestion	.\thinkphp\library\think\console\output\Question.php	/^    public function getQuestion()$/;"	f
getQueue	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function getQueue()$/;"	f
getQueue	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function getQueue($queue)$/;"	f
getQueue	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function getQueue($queue)$/;"	f
getRandomId	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function getRandomId()$/;"	f
getRangeMem	.\thinkphp\library\think\Debug.php	/^    public static function getRangeMem($start, $end, $dec = 2)$/;"	f
getRangeTime	.\thinkphp\library\think\Debug.php	/^    public static function getRangeTime($start, $end, $dec = 6)$/;"	f
getRawBody	.\vendor\topthink\think-queue\src\queue\Job.php	/^    abstract public function getRawBody();$/;"	f
getRawBody	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function getRawBody()$/;"	f
getRawBody	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function getRawBody()$/;"	f
getRawBody	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^    public function getRawBody()$/;"	f
getRawBody	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function getRawBody()$/;"	f
getRealSql	.\thinkphp\library\think\db\Connection.php	/^    public function getRealSql($sql, array $bind = [])$/;"	f
getReferencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getReferencedColumns()$/;"	f
getReferencedTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function getReferencedTable()$/;"	f
getRegex	.\thinkphp\library\think\Template.php	/^    private function getRegex($tagName)$/;"	f
getRegex	.\thinkphp\library\think\template\TagLib.php	/^    public function getRegex($tags, $close)$/;"	f
getRelation	.\thinkphp\library\think\Model.php	/^    public function getRelation($name = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelation	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelationCountQuery	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
getRelationCountQuery	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
getRelationCountQuery	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
getRelationData	.\thinkphp\library\think\Model.php	/^    protected function getRelationData(Relation $modelRelation)$/;"	f
getRelationQueryFields	.\thinkphp\library\think\model\Relation.php	/^    protected function getRelationQueryFields($fields, $model)$/;"	f
getResponse	.\thinkphp\library\think\exception\HttpResponseException.php	/^    public function getResponse()$/;"	f
getResponseType	.\thinkphp\library\traits\controller\Jump.php	/^    protected function getResponseType()$/;"	f
getResult	.\thinkphp\library\think\db\Connection.php	/^    protected function getResult($pdo = false, $procedure = false)$/;"	f
getResult	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function getResult($class = '', $typeMap = null)$/;"	f
getRouteExpress	.\thinkphp\library\think\Route.php	/^    private static function getRouteExpress($key)$/;"	f
getRuleMsg	.\thinkphp\library\think\Validate.php	/^    protected function getRuleMsg($attribute, $title, $type, $rule)$/;"	f
getRuleUrl	.\thinkphp\library\think\Url.php	/^    public static function getRuleUrl($rule, &$vars = [])$/;"	f
getSaveName	.\thinkphp\library\think\File.php	/^    public function getSaveName()$/;"	f
getScale	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getScale()$/;"	f
getScene	.\thinkphp\library\think\Validate.php	/^    protected function getScene($scene = '')$/;"	f
getSchemaName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    private function getSchemaName()$/;"	f
getSchemaTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getSchemaTableName()$/;"	f
getSeconds	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected function getSeconds($delay)$/;"	f
getSeeds	.\vendor\topthink\think-migration\src\command\Seed.php	/^    public function getSeeds()$/;"	f
getSeverity	.\thinkphp\library\think\exception\ErrorException.php	/^    final public function getSeverity()$/;"	f
getShell	.\thinkphp\library\think\console\output\Ask.php	/^    private function getShell()$/;"	f
getShortcut	.\thinkphp\library\think\console\input\Option.php	/^    public function getShortcut()$/;"	f
getSigned	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getSigned()$/;"	f
getSleep	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function getSleep()$/;"	f
getSourceCode	.\thinkphp\library\think\exception\Handle.php	/^    protected function getSourceCode(Exception $exception)$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getSqlType($type, $limit = null);$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getSqlType($type, $limit = null)$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	f
getSqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	f
getStatus	.\thinkphp\library\think\Process.php	/^    public function getStatus()$/;"	f
getStatusCode	.\thinkphp\library\think\exception\HttpException.php	/^    public function getStatusCode()$/;"	f
getStopSignal	.\thinkphp\library\think\Process.php	/^    public function getStopSignal()$/;"	f
getSttyColumns	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function getSttyColumns()$/;"	f
getStub	.\thinkphp\library\think\console\command\Make.php	/^    abstract protected function getStub();$/;"	f
getStub	.\thinkphp\library\think\console\command\make\Controller.php	/^    protected function getStub()$/;"	f
getStub	.\thinkphp\library\think\console\command\make\Model.php	/^    protected function getStub()$/;"	f
getStyle	.\thinkphp\library\think\console\output\Formatter.php	/^    public function getStyle($name)$/;"	f
getStyleStack	.\thinkphp\library\think\console\output\Formatter.php	/^    public function getStyleStack()$/;"	f
getSuffix	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function getSuffix()$/;"	f
getSynopsis	.\thinkphp\library\think\console\Command.php	/^    public function getSynopsis($short = false)$/;"	f
getSynopsis	.\thinkphp\library\think\console\input\Definition.php	/^    public function getSynopsis($short = false)$/;"	f
getTable	.\thinkphp\library\think\db\Query.php	/^    public function getTable($name = '')$/;"	f
getTable	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function getTable()$/;"	f
getTable	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getTable($name = '')$/;"	f
getTableFields	.\thinkphp\library\think\db\Query.php	/^    public function getTableFields($table = '')$/;"	f
getTableInfo	.\thinkphp\library\think\db\Query.php	/^    public function getTableInfo($tableName = '', $fetch = '')$/;"	f
getTableInfo	.\vendor\topthink\think-mongo\src\Query.php	/^    public function getTableInfo($tableName = '', $fetch = '')$/;"	f
getTables	.\thinkphp\library\think\db\Connection.php	/^    abstract public function getTables($dbName);$/;"	f
getTables	.\thinkphp\library\think\db\connector\Mysql.php	/^    public function getTables($dbName = '')$/;"	f
getTables	.\thinkphp\library\think\db\connector\Pgsql.php	/^    public function getTables($dbName = '')$/;"	f
getTables	.\thinkphp\library\think\db\connector\Sqlite.php	/^    public function getTables($dbName = '')$/;"	f
getTables	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    public function getTables($dbName = '')$/;"	f
getTagItem	.\thinkphp\library\think\cache\Driver.php	/^    protected function getTagItem($tag)$/;"	f
getTags	.\thinkphp\library\think\template\TagLib.php	/^    public function getTags()$/;"	f
getTargetUrl	.\thinkphp\library\think\response\Redirect.php	/^    public function getTargetUrl()$/;"	f
getTemplate	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function getTemplate()$/;"	f
getTemplate	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^    protected function getTemplate()$/;"	f
getTemplate	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^    protected function getTemplate()$/;"	f
getTermSignal	.\thinkphp\library\think\Process.php	/^    public function getTermSignal()$/;"	f
getTerminalDimensions	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function getTerminalDimensions()$/;"	f
getTerminalHeight	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function getTerminalHeight()$/;"	f
getTerminalWidth	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function getTerminalWidth()$/;"	f
getThroughputRate	.\thinkphp\library\think\Debug.php	/^    public static function getThroughputRate()$/;"	f
getTime	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected function getTime()$/;"	f
getTimeout	.\thinkphp\library\think\Process.php	/^    public function getTimeout()$/;"	f
getTimestampOfLastQueueRestart	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function getTimestampOfLastQueueRestart()$/;"	f
getTimezone	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getTimezone()$/;"	f
getType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getType()$/;"	f
getType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function getType()$/;"	f
getUnique	.\vendor\topthink\think-migration\src\db\Column.php	/^    public function getUnique()$/;"	f
getUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getUpdate()$/;"	f
getUpdateWhere	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function getUpdateWhere($data)$/;"	f
getUrlLinks	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getUrlLinks(array $urls)$/;"	f
getUrlRange	.\thinkphp\library\think\Paginator.php	/^    public function getUrlRange($start, $end)$/;"	f
getUsages	.\thinkphp\library\think\console\Command.php	/^    public function getUsages()$/;"	f
getUseIncludePath	.\vendor\composer\ClassLoader.php	/^    public function getUseIncludePath()$/;"	f
getUseMem	.\thinkphp\library\think\Debug.php	/^    public static function getUseMem($dec = 2)$/;"	f
getUseTime	.\thinkphp\library\think\Debug.php	/^    public static function getUseTime($dec = 6)$/;"	f
getValidOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected function getValidOptions()$/;"	f
getValidateType	.\thinkphp\library\think\Validate.php	/^    protected function getValidateType($key, $rule)$/;"	f
getValidator	.\thinkphp\library\think\console\output\Question.php	/^    public function getValidator()$/;"	f
getValue	.\thinkphp\library\think\db\Expression.php	/^    public function getValue()$/;"	f
getValues	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function getValues()$/;"	f
getVars	.\thinkphp\library\think\response\View.php	/^    public function getVars($name = null)$/;"	f
getVerbosity	.\thinkphp\library\think\console\Output.php	/^    public function getVerbosity()$/;"	f
getVersion	.\thinkphp\library\think\Console.php	/^    public function getVersion()$/;"	f
getVersion	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function getVersion()$/;"	f
getVersion	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function getVersion();$/;"	f
getVersionFromFileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function getVersionFromFileName($fileName)$/;"	f
getVersionLog	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getVersionLog();$/;"	f
getVersionLog	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getVersionLog()$/;"	f
getVersionLog	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getVersionLog()$/;"	f
getVersionLog	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function getVersionLog()$/;"	f
getVersions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getVersions();$/;"	f
getVersions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getVersions()$/;"	f
getVersions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function getVersions()$/;"	f
getVersions	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function getVersions()$/;"	f
getWhere	.\thinkphp\library\think\Model.php	/^    protected function getWhere()$/;"	f
getWorkingDirectory	.\thinkphp\library\think\Process.php	/^    public function getWorkingDirectory()$/;"	f
getWrapper	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    public function getWrapper($name, AdapterInterface $adapter)$/;"	f
getWrapperClass	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    protected function getWrapperClass($name)$/;"	f
gif	.\vendor\topthink\think-image\src\Image.php	/^            $this->gif = new Gif($file->getPathname());$/;"	v
gif	.\vendor\topthink\think-image\src\Image.php	/^    protected $gif;$/;"	v
gif	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^        $gif = new Encoder($this->frames, $this->delays, 0, 2, 0, 0, 0, 'bin');$/;"	v
gifNext	.\vendor\topthink\think-image\src\Image.php	/^    protected function gifNext()$/;"	f
group	.\thinkphp\library\think\Route.php	/^        $group = self::getGroup('name');$/;"	v
group	.\thinkphp\library\think\Route.php	/^    private static $group = [];$/;"	v
group	.\thinkphp\library\think\Route.php	/^    public static function group($name, $routes, $option = [], $pattern = [])$/;"	f
group	.\thinkphp\library\think\db\Query.php	/^    public function group($group)$/;"	f
groups	.\vendor\topthink\think-mongo\src\Builder.php	/^        $groups                    = ['_id' => []];$/;"	v
gt	.\thinkphp\library\think\Validate.php	/^    protected function gt($value, $rule, $data)$/;"	f
guid	.\thinkphp\library\think\db\Query.php	/^            $guid   = is_string($cache['key']) ? $cache['key'] : md5($this->connection->getConfig('database') . '.' . $field . serialize($this->options) . serialize($this->bind));$/;"	v
guid	.\thinkphp\library\think\db\Query.php	/^            $guid = md5($this->getTable() . '_' . $field . '_' . serialize($condition) . serialize($this->bind));$/;"	v
guid	.\vendor\topthink\think-mongo\src\Query.php	/^            $guid   = is_string($cache['key']) ? $cache['key'] : md5($field . serialize($this->options));$/;"	v
guid	.\vendor\topthink\think-mongo\src\Query.php	/^            $guid = md5($this->getTable() . '_' . $field . '_' . serialize($condition));$/;"	v
guid	.\vendor\topthink\think-mongo\src\Query.php	/^        $guid = md5($tableName);$/;"	v
h	.\vendor\topthink\think-image\src\Image.php	/^                $h = $height \/ $scale;$/;"	v
h	.\vendor\topthink\think-image\src\Image.php	/^        $h = $maxy - $miny;$/;"	v
h	.\vendor\topthink\think-image\src\Image.php	/^        $h = $this->info['height'];$/;"	v
halt	.\thinkphp\helper.php	/^    function halt($var)$/;"	f
handle	.\thinkphp\library\think\Error.php	/^                $handle = new $class;$/;"	v
handle	.\thinkphp\library\think\Error.php	/^                $handle = new Handle;$/;"	v
handle	.\thinkphp\library\think\Error.php	/^        static $handle;$/;"	v
handle	.\thinkphp\library\think\console\Output.php	/^        $this->handle = new $class($this);$/;"	v
handle	.\thinkphp\library\think\console\Output.php	/^    private $handle = null;$/;"	v
handle	.\vendor\topthink\think-helper\src\Hash.php	/^    protected static $handle = [];$/;"	v
handle	.\vendor\topthink\think-helper\src\Hash.php	/^    public static function handle($type)$/;"	f
handle	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^                    $handle = new $class;$/;"	v
handle	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^                $handle = new Handle();$/;"	v
handle	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        static $handle;$/;"	v
handleJsonError	.\extend\php-jwt-master\src\JWT.php	/^    private static function handleJsonError($errno)$/;"	f
handleJsonError	.\vendor\firebase\php-jwt\src\JWT.php	/^    private static function handleJsonError($errno)$/;"	f
handleWorkerOutput	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected function handleWorkerOutput($type, $line)$/;"	f
handler	.\thinkphp\library\think\Cache.php	/^    public static $handler;$/;"	v
handler	.\thinkphp\library\think\Error.php	/^        $handler = self::getExceptionHandler();$/;"	v
handler	.\thinkphp\library\think\cache\Driver.php	/^    protected $handler = null;$/;"	v
handler	.\thinkphp\library\think\cache\Driver.php	/^    public function handler()$/;"	f
handler	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $this->handler = new \\Memcache;$/;"	v
handler	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $this->handler = new \\Memcached;$/;"	v
handler	.\thinkphp\library\think\cache\driver\Redis.php	/^        $this->handler = new \\Redis;$/;"	v
handler	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $this->handler = $func($this->options['db']);$/;"	v
handler	.\thinkphp\library\think\response\Jsonp.php	/^            $handler           = !empty($var_jsonp_handler) ? $var_jsonp_handler : $this->options['default_jsonp_handler'];$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcache.php	/^        $this->handler = new \\Memcache;$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcache.php	/^        $this->handler = null;$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcache.php	/^    protected $handler = null;$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcached.php	/^        $this->handler = new \\Memcached;$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcached.php	/^        $this->handler = null;$/;"	v
handler	.\thinkphp\library\think\session\driver\Memcached.php	/^    protected $handler = null;$/;"	v
handler	.\thinkphp\library\think\session\driver\Redis.php	/^        $this->handler = new \\Redis;$/;"	v
handler	.\thinkphp\library\think\session\driver\Redis.php	/^        $this->handler = null;$/;"	v
handler	.\thinkphp\library\think\session\driver\Redis.php	/^    protected $handler = null;$/;"	v
has	.\thinkphp\helper.php	/^            $has = true;$/;"	v
has	.\thinkphp\library\think\Cache.php	/^    public static function has($name)$/;"	f
has	.\thinkphp\library\think\Config.php	/^    public static function has($name, $range = '')$/;"	f
has	.\thinkphp\library\think\Console.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\Cookie.php	/^    public static function has($name, $prefix = null)$/;"	f
has	.\thinkphp\library\think\Lang.php	/^    public static function has($name, $range = '')$/;"	f
has	.\thinkphp\library\think\Model.php	/^    public static function has($relation, $operator = '>=', $count = 1, $id = '*')$/;"	f
has	.\thinkphp\library\think\Request.php	/^    public function has($name, $type = 'param', $checkEmpty = false)$/;"	f
has	.\thinkphp\library\think\Session.php	/^    public static function has($name, $prefix = null)$/;"	f
has	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function has($name);$/;"	f
has	.\thinkphp\library\think\cache\driver\File.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function has($name)$/;"	f
has	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*')$/;"	f
has	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
has	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
has	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
has	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function has()$/;"	f
has	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
has	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
has	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasAnArrayArgument	.\thinkphp\library\think\console\input\Definition.php	/^            $this->hasAnArrayArgument = true;$/;"	v
hasAnArrayArgument	.\thinkphp\library\think\console\input\Definition.php	/^        $this->hasAnArrayArgument = false;$/;"	v
hasAnArrayArgument	.\thinkphp\library\think\console\input\Definition.php	/^    private $hasAnArrayArgument = false;$/;"	v
hasArgument	.\thinkphp\library\think\console\Input.php	/^    public function hasArgument($name)$/;"	f
hasArgument	.\thinkphp\library\think\console\input\Definition.php	/^    public function hasArgument($name)$/;"	f
hasBeenSignaled	.\thinkphp\library\think\Process.php	/^    public function hasBeenSignaled()$/;"	f
hasBeenStopped	.\thinkphp\library\think\Process.php	/^    public function hasBeenStopped()$/;"	f
hasColorSupport	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasColorSupport($stream)$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasColumn($tableName, $columnName);$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasColumn($tableName, $columnName)$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasColumn($tableName, $columnName)$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasColumn($tableName, $columnName, $options = array())$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasColumn($tableName, $columnName)$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasColumn($tableName, $columnName, $options = array())$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasColumn($tableName, $columnName)$/;"	f
hasColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasColumn($columnName, $options = array())$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasDatabase($name);$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasDatabase($name)$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasDatabase($name)$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasDatabase($databaseName)$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasDatabase($name)$/;"	f
hasDatabase	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasDatabase($name)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null);$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasForeignKey($tableName, $columns, $constraint = null)$/;"	f
hasForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasForeignKey($columns, $constraint = null)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasIndex($tableName, $columns);$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasIndex($tableName, $columns)$/;"	f
hasIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasIndex($columns, $options = array())$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasIndexByName($tableName, $indexName);$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasIndexByName($tableName, $indexName)$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasIndexByName($tableName, $indexName)$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^     public function hasIndexByName($tableName, $indexName)$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasIndexByName($tableName, $indexName)$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasIndexByName($tableName, $indexName)$/;"	f
hasIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasIndexByName($tableName, $indexName)$/;"	f
hasMany	.\thinkphp\library\think\Model.php	/^    public function hasMany($model, $foreignKey = '', $localKey = '')$/;"	f
hasManyThrough	.\thinkphp\library\think\Model.php	/^    public function hasManyThrough($model, $through, $foreignKey = '', $throughKey = '', $localKey = '')$/;"	f
hasMore	.\thinkphp\library\think\Paginator.php	/^            $this->hasMore     = $this->currentPage < $this->lastPage;$/;"	v
hasMore	.\thinkphp\library\think\Paginator.php	/^            $this->hasMore     = count($items) > ($this->listRows);$/;"	v
hasMore	.\thinkphp\library\think\Paginator.php	/^    protected $hasMore;$/;"	v
hasOne	.\thinkphp\library\think\Model.php	/^    public function hasOne($model, $foreignKey = '', $localKey = '', $alias = [], $joinType = 'INNER')$/;"	f
hasOption	.\thinkphp\library\think\console\Input.php	/^    public function hasOption($name)$/;"	f
hasOption	.\thinkphp\library\think\console\input\Definition.php	/^    public function hasOption($name)$/;"	f
hasOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasOption($name);$/;"	f
hasOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasOption($name)$/;"	f
hasOption	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function hasOption($name)$/;"	f
hasOptional	.\thinkphp\library\think\console\input\Definition.php	/^            $this->hasOptional = true;$/;"	v
hasOptional	.\thinkphp\library\think\console\input\Definition.php	/^        $this->hasOptional        = false;$/;"	v
hasOptional	.\thinkphp\library\think\console\input\Definition.php	/^    private $hasOptional;$/;"	v
hasPages	.\thinkphp\library\think\Paginator.php	/^    public function hasPages()$/;"	f
hasParameterOption	.\thinkphp\library\think\console\Input.php	/^    public function hasParameterOption($values)$/;"	f
hasScene	.\thinkphp\library\think\Validate.php	/^    public function hasScene($name)$/;"	f
hasSchema	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasSchema($schemaName)$/;"	f
hasSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasSchemaTable();$/;"	f
hasSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasSchemaTable()$/;"	f
hasSchemaTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function hasSchemaTable()$/;"	f
hasShortcut	.\thinkphp\library\think\console\input\Definition.php	/^    public function hasShortcut($name)$/;"	f
hasStderrSupport	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasStderrSupport()$/;"	f
hasStdoutSupport	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasStdoutSupport()$/;"	f
hasSttyAvailable	.\thinkphp\library\think\console\output\Ask.php	/^    private function hasSttyAvailable()$/;"	f
hasStyle	.\thinkphp\library\think\console\output\Formatter.php	/^    public function hasStyle($name)$/;"	f
hasSystemCallBeenInterrupted	.\thinkphp\library\think\process\pipes\Pipes.php	/^    protected function hasSystemCallBeenInterrupted()$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasTable($tableName);$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function hasTable($tableName);$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function hasTable($tableName)$/;"	f
hasTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function hasTable($tableName);$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function hasTransactions();$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function hasTransactions()$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function hasTransactions()$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasTransactions()$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function hasTransactions()$/;"	f
hasTransactions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasTransactions()$/;"	f
hasWhere	.\thinkphp\library\think\Model.php	/^    public static function hasWhere($relation, $where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hasWhere	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hash	.\extend\php-jwt-master\src\JWT.php	/^                $hash = hash_hmac($algorithm, $msg, $key, true);$/;"	v
hash	.\thinkphp\library\think\File.php	/^                            $hash     = $this->hash($this->rule);$/;"	v
hash	.\thinkphp\library\think\File.php	/^    protected $hash = [];$/;"	v
hash	.\thinkphp\library\think\File.php	/^    public function hash($type = 'sha1')$/;"	f
hash	.\vendor\firebase\php-jwt\src\JWT.php	/^                $hash = hash_hmac($algorithm, $msg, $key, true);$/;"	v
hash	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^        $hash = password_hash($value, PASSWORD_BCRYPT, ['cost' => $cost]);$/;"	v
having	.\thinkphp\library\think\db\Query.php	/^    public function having($having)$/;"	f
header	.\extend\php-jwt-master\src\JWT.php	/^            $header = array_merge($head, $header);$/;"	v
header	.\extend\php-jwt-master\src\JWT.php	/^        $header = array('typ' => 'JWT', 'alg' => $alg);$/;"	v
header	.\thinkphp\library\think\Request.php	/^                $header = $result;$/;"	v
header	.\thinkphp\library\think\Request.php	/^            $header = [];$/;"	v
header	.\thinkphp\library\think\Request.php	/^            $this->header = array_change_key_case($header);$/;"	v
header	.\thinkphp\library\think\Request.php	/^            return $this->header = array_merge($this->header, $name);$/;"	v
header	.\thinkphp\library\think\Request.php	/^    protected $header  = [];$/;"	v
header	.\thinkphp\library\think\Request.php	/^    public function header($name = '', $default = null)$/;"	f
header	.\thinkphp\library\think\Response.php	/^            $this->header = array_merge($this->header, $name);$/;"	v
header	.\thinkphp\library\think\Response.php	/^        $this->header = array_merge($this->header, $header);$/;"	v
header	.\thinkphp\library\think\Response.php	/^    protected $header = [];$/;"	v
header	.\thinkphp\library\think\Response.php	/^    public function header($name, $value = null)$/;"	f
header	.\vendor\firebase\php-jwt\src\JWT.php	/^            $header = array_merge($head, $header);$/;"	v
header	.\vendor\firebase\php-jwt\src\JWT.php	/^        $header = array('typ' => 'JWT', 'alg' => $alg);$/;"	v
headers	.\thinkphp\library\think\exception\HttpException.php	/^        $this->headers    = $headers;$/;"	v
headers	.\thinkphp\library\think\exception\HttpException.php	/^    private $headers;$/;"	v
headers	.\thinkphp\library\think\log\driver\Socket.php	/^        $headers = [$/;"	v
headers	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $headers = [];$/;"	v
headers	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $headers = [];$/;"	v
height	.\vendor\topthink\think-image\src\Image.php	/^                $height = $h * $scale;$/;"	v
height	.\vendor\topthink\think-image\src\Image.php	/^        empty($height) && $height = $h;$/;"	v
height	.\vendor\topthink\think-image\src\Image.php	/^    public function height()$/;"	f
hello	.\application\api\controller\Index.php	/^    public function hello()$/;"	f
hello	.\application\index\controller\Index.php	/^    public function hello()$/;"	f
help	.\thinkphp\library\think\console\Command.php	/^        $this->help = $help;$/;"	v
help	.\thinkphp\library\think\console\Command.php	/^    private $help;$/;"	v
help	.\thinkphp\library\think\console\output\Descriptor.php	/^            if ('' != $help = $console->getHelp()) {$/;"	v
helpCommand	.\thinkphp\library\think\Console.php	/^            $helpCommand = $this->get('help');$/;"	v
hidden	.\thinkphp\library\think\Model.php	/^        $hidden  = [];$/;"	v
hidden	.\thinkphp\library\think\Model.php	/^        $this->hidden = $override ? $hidden : array_merge($this->hidden, $hidden);$/;"	v
hidden	.\thinkphp\library\think\Model.php	/^    protected $hidden = [];$/;"	v
hidden	.\thinkphp\library\think\Model.php	/^    public function hidden($hidden = [], $override = false)$/;"	f
hidden	.\thinkphp\library\think\console\output\Question.php	/^        $this->hidden = (bool) $hidden;$/;"	v
hidden	.\thinkphp\library\think\console\output\Question.php	/^    private $hidden         = false;$/;"	v
hidden	.\thinkphp\library\think\model\Collection.php	/^    public function hidden($hidden = [], $override = false)$/;"	f
hiddenFallback	.\thinkphp\library\think\console\output\Question.php	/^        $this->hiddenFallback = (bool) $fallback;$/;"	v
hiddenFallback	.\thinkphp\library\think\console\output\Question.php	/^    private $hiddenFallback = true;$/;"	v
hide	.\thinkphp\library\think\Template.php	/^    public function parseTagLib($tagLib, &$content, $hide = false)$/;"	v
hook	.\thinkphp\library\think\Request.php	/^    protected static $hook = [];$/;"	v
hook	.\thinkphp\library\think\Request.php	/^    public static function hook($method, $callback = null)$/;"	f
host	.\thinkphp\library\think\Request.php	/^            $host = $_SERVER['HTTP_X_REAL_HOST'];$/;"	v
host	.\thinkphp\library\think\Request.php	/^            $host = $this->server('HTTP_HOST');$/;"	v
host	.\thinkphp\library\think\Request.php	/^    public function host($strict = false)$/;"	f
host	.\thinkphp\library\think\Route.php	/^            $host = $request->host(true);$/;"	v
host	.\thinkphp\library\think\Url.php	/^                $host       = Config::get('app_host') ?: $request->host();$/;"	v
host	.\vendor\topthink\think-mongo\src\Connection.php	/^            $host = 'mongodb:\/\/' . ($config['username'] ? "{$config['username']}" : '') . ($config['password'] ? ":{$config['password']}@" : '') . $config['hostname'] . ($config['hostport'] ? ":{$config['hostport']}" : '') . '\/' . ($config['database'] ? "{$config['database']}" : '');$/;"	v
hostList	.\vendor\topthink\think-mongo\src\Connection.php	/^        $hostList = explode(',', $this->config['hostname']);$/;"	v
hosts	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $hosts = explode(',', $this->options['host']);$/;"	v
hosts	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $hosts = explode(',', $this->options['host']);$/;"	v
hosts	.\thinkphp\library\think\session\driver\Memcache.php	/^        $hosts = explode(',', $this->config['host']);$/;"	v
hosts	.\thinkphp\library\think\session\driver\Memcached.php	/^        $hosts = explode(',', $this->config['host']);$/;"	v
html	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $html = '';$/;"	v
httpAgentIp	.\thinkphp\library\think\Request.php	/^        $httpAgentIp = Config::get('http_agent_ip');$/;"	v
hydratePivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function hydratePivot($models)$/;"	f
i	.\thinkphp\library\think\Console.php	/^        foreach (explode(':', $name) as $i => $subname) {$/;"	v
i	.\thinkphp\library\think\Validate.php	/^        $i = 0;$/;"	v
i	.\thinkphp\library\think\cache\driver\Memcache.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
i	.\thinkphp\library\think\cache\driver\Memcached.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
i	.\thinkphp\library\think\console\Input.php	/^                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));$/;"	v
i	.\thinkphp\library\think\console\output\Ask.php	/^                        $i = strlen($ret);$/;"	v
i	.\thinkphp\library\think\console\output\Ask.php	/^        $i          = 0;$/;"	v
i	.\thinkphp\library\think\console\output\Formatter.php	/^        foreach ($matches[0] as $i => $match) {$/;"	v
i	.\thinkphp\library\think\db\Builder.php	/^                    $i     = 0;$/;"	v
i	.\thinkphp\library\think\session\driver\Memcache.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
i	.\thinkphp\library\think\session\driver\Memcached.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
i	.\vendor\topthink\think-captcha\src\Captcha.php	/^                $i  = (int)($this->fontSize \/ 5);$/;"	v
id	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $id = $data;$/;"	v
id	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $id = $model->getLastInsID();$/;"	v
id	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $id         = $data->$relationFk;$/;"	v
id	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $id = $data;$/;"	v
id	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($records as $id => $attributes) {$/;"	v
id	.\thinkphp\library\think\template\taglib\Cx.php	/^        $id     = $tag['id'];$/;"	v
id	.\vendor\topthink\think-captcha\src\Captcha.php	/^    public function check($code, $id = '')$/;"	v
id	.\vendor\topthink\think-captcha\src\helper.php	/^\\think\\Validate::extend('captcha', function ($value, $id = "") {$/;"	v
id	.\vendor\topthink\think-captcha\src\helper.php	/^function captcha_check($value, $id = "", $config = [])$/;"	v
id	.\vendor\topthink\think-mongo\src\Query.php	/^            $id = $id->__toString();$/;"	v
id	.\vendor\topthink\think-mongo\src\Query.php	/^        $id = $this->builder->getLastInsID();$/;"	v
identity	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->identity = $identity;$/;"	v
identity	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $identity = false;$/;"	v
idleTimeout	.\thinkphp\library\think\Process.php	/^        $this->idleTimeout = $this->validateTimeout($timeout);$/;"	v
idleTimeout	.\thinkphp\library\think\Process.php	/^    private $idleTimeout;$/;"	v
ids	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $ids                    = (array) $id;$/;"	v
ignoreReport	.\thinkphp\library\think\exception\Handle.php	/^    protected $ignoreReport = [$/;"	v
ignoreValidationErrors	.\thinkphp\library\think\console\Command.php	/^        $this->ignoreValidationErrors = true;$/;"	v
ignoreValidationErrors	.\thinkphp\library\think\console\Command.php	/^    private $ignoreValidationErrors          = false;$/;"	v
ignoreValidationErrors	.\thinkphp\library\think\console\Command.php	/^    public function ignoreValidationErrors()$/;"	f
im	.\vendor\topthink\think-image\src\Image.php	/^                    $this->im = $img;$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^            $this->im  = @imagecreatefromstring($this->gif->image());$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^            $this->im = $img;$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^            $this->im = @$fun($file->getPathname());$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^            $this->im = imagecreatefromstring($next);$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^            $this->im = imagecreatefromstring($this->gif->image());$/;"	v
im	.\vendor\topthink\think-image\src\Image.php	/^    protected $im;$/;"	v
image	.\thinkphp\library\think\Validate.php	/^    protected function image($file, $rule)$/;"	f
image	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    public function image($stream = null)$/;"	f
image	.\vendor\topthink\think-image\tests\CropTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\CropTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\CropTest.php	/^        $image    = Image::open($this->getPng());$/;"	v
image	.\vendor\topthink\think-image\tests\FlipTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\FlipTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\InfoTest.php	/^        $image = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\InfoTest.php	/^        $image = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\InfoTest.php	/^        $image = Image::open($this->getPng());$/;"	v
image	.\vendor\topthink\think-image\tests\RotateTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\RotateTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\TextTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\TextTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\TextTest.php	/^        $image    = Image::open($this->getPng());$/;"	v
image	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $image    = Image::open($this->getPng());$/;"	v
image	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $image    = Image::open($this->getGif());$/;"	v
image	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $image    = Image::open($this->getJpeg());$/;"	v
image	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $image    = Image::open($this->getPng());$/;"	v
imageH	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->imageH || $this->imageH = $this->fontSize * 2.5;$/;"	v
imageType	.\thinkphp\library\think\Validate.php	/^                    $imageType = 'jpg';$/;"	v
imageType	.\thinkphp\library\think\Validate.php	/^                $imageType = strtolower($rule[2]);$/;"	v
imageW	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $this->imageW || $this->imageW = $this->length * $this->fontSize * 1.5 + $this->length * $this->fontSize \/ 2;$/;"	v
img	.\vendor\topthink\think-image\src\Image.php	/^                    $img = imagecreatetruecolor($width, $height);$/;"	v
img	.\vendor\topthink\think-image\src\Image.php	/^            $img = imagecreatetruecolor($w, $h);$/;"	v
img	.\vendor\topthink\think-image\src\Image.php	/^            $img = imagecreatetruecolor($width, $height);$/;"	v
img	.\vendor\topthink\think-image\src\Image.php	/^            $img = imagerotate($this->im, -$degrees, imagecolorallocatealpha($this->im, 0, 0, 0, 127));$/;"	v
img	.\vendor\topthink\think-image\src\Image.php	/^        $img = ob_get_clean();$/;"	v
implementing	.\thinkphp\library\think\console\output\Question.php	/^     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.$/;"	c
import	.\thinkphp\helper.php	/^    function import($class, $baseUrl = '', $ext = EXT)$/;"	f
import	.\thinkphp\library\think\Hook.php	/^    public static function import(array $tags, $recursive = true)$/;"	f
import	.\thinkphp\library\think\Loader.php	/^    public static function import($class, $baseUrl = '', $ext = EXT)$/;"	f
import	.\thinkphp\library\think\Route.php	/^    public static function import(array $rule, $type = '*')$/;"	f
in	.\thinkphp\library\think\Validate.php	/^    protected function in($value, $rule)$/;"	f
in	.\vendor\composer\ClassLoader.php	/^ * In this example, if you try to use a class in the Symfony\\Component$/;"	c
inc	.\thinkphp\library\think\Cache.php	/^    public static function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function inc($name, $step = 1);$/;"	f
inc	.\thinkphp\library\think\cache\driver\File.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function inc($name, $step = 1)$/;"	f
inc	.\thinkphp\library\think\db\Query.php	/^    public function inc($field, $step = 1)$/;"	f
inc	.\vendor\topthink\think-mongo\src\Query.php	/^    public function inc($field, $step = 1)$/;"	f
includeFile	.\thinkphp\library\think\Template.php	/^        $includeFile = unserialize($matches[1]);$/;"	v
includeFile	.\thinkphp\library\think\Template.php	/^        $this->includeFile = [];$/;"	v
includeFile	.\thinkphp\library\think\Template.php	/^    private $includeFile = []; \/\/ 记录所有模板包含的文件路径及更新时间$/;"	v
includeFile	.\vendor\composer\ClassLoader.php	/^function includeFile($file)$/;"	f
includeFiles	.\vendor\composer\autoload_real.php	/^            $includeFiles = Composer\\Autoload\\ComposerStaticInit34a41e2841af1a67f3ddef099fc7b348::$files;$/;"	v
includeFiles	.\vendor\composer\autoload_real.php	/^            $includeFiles = require __DIR__ . '\/autoload_files.php';$/;"	v
incrementalErrorOutputOffset	.\thinkphp\library\think\Process.php	/^        $this->incrementalErrorOutputOffset = 0;$/;"	v
incrementalErrorOutputOffset	.\thinkphp\library\think\Process.php	/^        $this->incrementalErrorOutputOffset = strlen($data);$/;"	v
incrementalErrorOutputOffset	.\thinkphp\library\think\Process.php	/^    private $incrementalErrorOutputOffset = 0;$/;"	v
incrementalOutputOffset	.\thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset      = 0;$/;"	v
incrementalOutputOffset	.\thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset = 0;$/;"	v
incrementalOutputOffset	.\thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset = strlen($data);$/;"	v
incrementalOutputOffset	.\thinkphp\library\think\Process.php	/^    private $incrementalOutputOffset      = 0;$/;"	v
index	.\application\api\controller\Index.php	/^    public function index()$/;"	f
index	.\application\index\controller\Index.php	/^    public function index()$/;"	f
index	.\thinkphp\library\think\console\output\formatter\Stack.php	/^        foreach (array_reverse($this->styles, true) as $index => $stackedStyle) {$/;"	v
index	.\thinkphp\library\think\template\taglib\Cx.php	/^            $index = $tag['index'];$/;"	v
index	.\thinkphp\library\traits\controller\Jump.php	/^ *     public function index(){$/;"	f
index	.\thinkphp\library\traits\controller\Jump.php	/^ * class index$/;"	c
index	.\vendor\topthink\think-captcha\src\CaptchaController.php	/^    public function index($id = "")$/;"	f
index	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $index = $columns;$/;"	v
index	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $index = new Index();$/;"	v
index	.\vendor\topthink\think-migration\src\db\Table.php	/^            $index = new Index();$/;"	v
indexColumnArray	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $indexColumnArray = array();$/;"	v
indexColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $indexColumns = implode(',', $indexColumnArray);$/;"	v
indexData	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $indexData = $this->fetchAll(sprintf('pragma index_info(%s)', $row['name']));$/;"	v
indexKey	.\thinkphp\library\think\Collection.php	/^    public function column($columnKey, $indexKey = null)$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        foreach ($indexes as $indexName => $index) {$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $indexName = $index->getName();$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $indexName = sprintf('%s_%s', $tableName, implode('_', $columnNames));$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        foreach ($indexes as $indexName => $index) {$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $indexName = $index->getName();$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $indexName = $table->getName() . '_';$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $indexName = $index->getName();$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $indexName = sprintf('%s_%s', $tableName, implode('_', $columnNames));$/;"	v
indexName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        foreach ($indexes as $indexName => $index) {$/;"	v
indexName	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addMorphs($name, $indexName = null)$/;"	v
indexName	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addNullableMorphs($name, $indexName = null)$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $indexes = $table->getIndexes();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $indexes = $this->getIndexes($tableName);$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $indexes = array();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^         $indexes = $this->getIndexes($tableName);$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $indexes = $table->getIndexes();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $indexes = $this->getIndexes($tableName);$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $indexes = array();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $indexes = $this->getIndexes($tableName);$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $indexes = array();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $indexes = $table->getIndexes();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $indexes = $this->getIndexes($tableName);$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $indexes = array();$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->indexes = $indexes;$/;"	v
indexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $indexes = array();$/;"	v
info	.\thinkphp\library\think\Db.php	/^        $info = parse_url($dsnStr);$/;"	v
info	.\thinkphp\library\think\Debug.php	/^            $info = [];$/;"	v
info	.\thinkphp\library\think\Debug.php	/^    protected static $info = [];$/;"	v
info	.\thinkphp\library\think\File.php	/^            $info = getimagesize($image);$/;"	v
info	.\thinkphp\library\think\File.php	/^        $this->info = $info;$/;"	v
info	.\thinkphp\library\think\File.php	/^    protected $info;$/;"	v
info	.\thinkphp\library\think\Loader.php	/^        $info   = pathinfo($url);$/;"	v
info	.\thinkphp\library\think\Model.php	/^        $info = is_null($rule) ? $this->validate : $rule;$/;"	v
info	.\thinkphp\library\think\Request.php	/^        $info                     = parse_url($uri);$/;"	v
info	.\thinkphp\library\think\Route.php	/^            $info = parse_url($url);$/;"	v
info	.\thinkphp\library\think\Url.php	/^            $info = parse_url($url);$/;"	v
info	.\thinkphp\library\think\Validate.php	/^                $info   = is_numeric($key) ? '' : $key;$/;"	v
info	.\thinkphp\library\think\Validate.php	/^                $info = getimagesize($image);$/;"	v
info	.\thinkphp\library\think\Validate.php	/^            $info = $rule;$/;"	v
info	.\thinkphp\library\think\Validate.php	/^            $info = $type;$/;"	v
info	.\thinkphp\library\think\Validate.php	/^        $info = date_parse_from_format($rule, $value);$/;"	v
info	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $info    = $class::getConnection()->getFields($table);$/;"	v
info	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $info    = Db::connect($config)->getFields($db . $table);$/;"	v
info	.\thinkphp\library\think\console\output\driver\Console.php	/^            $info = stream_get_contents($pipes[1]);$/;"	v
info	.\thinkphp\library\think\db\Builder.php	/^            $info = $type[$key];$/;"	v
info	.\thinkphp\library\think\db\Connection.php	/^                $info = array_change_key_case($info);$/;"	v
info	.\thinkphp\library\think\db\Connection.php	/^                $info = array_change_key_case($info, CASE_UPPER);$/;"	v
info	.\thinkphp\library\think\db\Connection.php	/^        $info = [$/;"	v
info	.\thinkphp\library\think\db\Query.php	/^                $info = $this->connection->getFields($guid);$/;"	v
info	.\thinkphp\library\think\db\Query.php	/^                $info = include RUNTIME_PATH . 'schema\/' . $schema . '.php';$/;"	v
info	.\thinkphp\library\think\db\Query.php	/^    protected static $info = [];$/;"	v
info	.\thinkphp\library\think\db\connector\Mysql.php	/^        $info   = [];$/;"	v
info	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $info   = [];$/;"	v
info	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $info   = [];$/;"	v
info	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $info   = [];$/;"	v
info	.\thinkphp\library\think\debug\Console.php	/^        $info = Debug::getFile(true);$/;"	v
info	.\thinkphp\library\think\debug\Html.php	/^        $info = Debug::getFile(true);$/;"	v
info	.\thinkphp\library\think\log\driver\File.php	/^        $info = '';$/;"	v
info	.\vendor\topthink\think-image\src\Image.php	/^        $info = @getimagesize($file->getPathname());$/;"	v
info	.\vendor\topthink\think-image\src\Image.php	/^        $info = getimagesize($source);$/;"	v
info	.\vendor\topthink\think-image\src\Image.php	/^        $info = imagettfbbox($size, $angle, $font, $text);$/;"	v
info	.\vendor\topthink\think-image\src\Image.php	/^        $this->info = [$/;"	v
info	.\vendor\topthink\think-image\src\Image.php	/^    protected $info;$/;"	v
info	.\vendor\topthink\think-mongo\src\Query.php	/^    protected static $info = [];$/;"	v
inheritEnv	.\thinkphp\library\think\process\Builder.php	/^        $this->inheritEnv = $inheritEnv;$/;"	v
inheritEnv	.\thinkphp\library\think\process\Builder.php	/^    private $inheritEnv     = true;$/;"	v
inheritEnvironmentVariables	.\thinkphp\library\think\process\Builder.php	/^    public function inheritEnvironmentVariables($inheritEnv = true)$/;"	f
init	.\thinkphp\library\think\App.php	/^    private static function init($module = '')$/;"	f
init	.\thinkphp\library\think\App.php	/^    protected static $init = false;$/;"	v
init	.\thinkphp\library\think\Cache.php	/^    public static function init(array $options = [])$/;"	f
init	.\thinkphp\library\think\Console.php	/^    public static function init($run = true)$/;"	f
init	.\thinkphp\library\think\Cookie.php	/^    protected static $init;$/;"	v
init	.\thinkphp\library\think\Cookie.php	/^    public static function init(array $config = [])$/;"	f
init	.\thinkphp\library\think\Log.php	/^    public static function init($config = [])$/;"	f
init	.\thinkphp\library\think\Model.php	/^    protected static function init()$/;"	f
init	.\thinkphp\library\think\Session.php	/^    protected static $init   = null;$/;"	v
init	.\thinkphp\library\think\Session.php	/^    public static function init(array $config = [])$/;"	f
init	.\thinkphp\library\think\cache\driver\File.php	/^    private function init()$/;"	f
init	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    protected function init()$/;"	f
init	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    protected function init()$/;"	f
initCommon	.\thinkphp\library\think\App.php	/^    public static function initCommon()$/;"	f
initConnect	.\thinkphp\library\think\db\Connection.php	/^    protected function initConnect($master = true)$/;"	f
initConnect	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function initConnect($master = true)$/;"	f
initial	.\thinkphp\library\think\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	v
initialize	.\thinkphp\library\think\Model.php	/^    protected function initialize()$/;"	f
initialize	.\thinkphp\library\think\console\Command.php	/^    protected function initialize(Input $input, Output $output)$/;"	f
initialize	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected function initialize(Input $input, Output $output)$/;"	f
initialize	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^    public function initialize(Input $input, Output $output)$/;"	f
initialize	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function initialize(Input $input, Output $output)$/;"	f
initialized	.\thinkphp\library\think\Model.php	/^    protected static $initialized = [];$/;"	v
inject	.\thinkphp\library\think\Debug.php	/^    public static function inject(Response $response, &$content)$/;"	f
input	.\thinkphp\helper.php	/^    function input($key = '', $default = null, $filter = '')$/;"	f
input	.\thinkphp\library\think\Console.php	/^                $input = new Input(['help']);$/;"	v
input	.\thinkphp\library\think\Console.php	/^            $input = new Input([$this->defaultCommand]);$/;"	v
input	.\thinkphp\library\think\Console.php	/^        $input  = new Input($parameters);$/;"	v
input	.\thinkphp\library\think\Console.php	/^        $input  = new Input();$/;"	v
input	.\thinkphp\library\think\Process.php	/^        $this->input = $input;$/;"	v
input	.\thinkphp\library\think\Process.php	/^        $this->input = Utils::validateInput(sprintf('%s::%s', __CLASS__, __FUNCTION__), $input);$/;"	v
input	.\thinkphp\library\think\Process.php	/^    private $input;$/;"	v
input	.\thinkphp\library\think\Request.php	/^        $this->input = file_get_contents('php:\/\/input');$/;"	v
input	.\thinkphp\library\think\Request.php	/^    protected $input;$/;"	v
input	.\thinkphp\library\think\Request.php	/^    public function input($data = [], $name = '', $default = null, $filter = '')$/;"	f
input	.\thinkphp\library\think\console\Command.php	/^        $this->input  = $input;$/;"	v
input	.\thinkphp\library\think\console\Command.php	/^    protected $input;$/;"	v
input	.\thinkphp\library\think\console\output\Ask.php	/^        $this->input    = $input;$/;"	v
input	.\thinkphp\library\think\console\output\Ask.php	/^    protected $input;$/;"	v
input	.\thinkphp\library\think\process\Builder.php	/^        $this->input = Utils::validateInput(sprintf('%s::%s', __CLASS__, __FUNCTION__), $input);$/;"	v
input	.\thinkphp\library\think\process\Builder.php	/^    private $input;$/;"	v
input	.\thinkphp\library\think\process\pipes\Pipes.php	/^    protected $input;$/;"	v
input	.\thinkphp\library\think\process\pipes\Unix.php	/^                    $this->input = null;$/;"	v
input	.\thinkphp\library\think\process\pipes\Unix.php	/^            $this->input = $input;$/;"	v
input	.\thinkphp\library\think\process\pipes\Windows.php	/^                $this->input = null;$/;"	v
input	.\thinkphp\library\think\process\pipes\Windows.php	/^            $this->input = $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->input = $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function __construct(array $options, InputInterface $input = null, OutputInterface $output = null)$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^        $this->input = $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    final public function __construct($version, InputInterface $input = null, OutputInterface $output = null)$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    protected $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^        $this->input = $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    protected $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function __construct(InputInterface $input = null, OutputInterface $output = null)$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function __construct(InputInterface $input = null, OutputInterface $output = null);$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^        $this->input = $input;$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    final public function __construct(InputInterface $input = null, OutputInterface $output = null)$/;"	v
input	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    protected $input;$/;"	v
inputBuffer	.\thinkphp\library\think\process\pipes\Pipes.php	/^    protected $inputBuffer = '';$/;"	v
inputBuffer	.\thinkphp\library\think\process\pipes\Unix.php	/^                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);$/;"	v
inputBuffer	.\thinkphp\library\think\process\pipes\Unix.php	/^            $this->inputBuffer = (string) $input;$/;"	v
inputBuffer	.\thinkphp\library\think\process\pipes\Windows.php	/^                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);$/;"	v
inputBuffer	.\thinkphp\library\think\process\pipes\Windows.php	/^            $this->inputBuffer = $input;$/;"	v
inputStream	.\thinkphp\library\think\console\output\Ask.php	/^        $inputStream  = STDIN;$/;"	v
insert	.\thinkphp\library\think\Model.php	/^    protected $insert = [];$/;"	v
insert	.\thinkphp\library\think\db\Builder.php	/^    public function insert(array $data, $options = [], $replace = false)$/;"	f
insert	.\thinkphp\library\think\db\Query.php	/^    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function insert(Table $table, $row);$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function insert(Table $table, $row)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function insert(Table $table, $row)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function insert(Table $table, $row)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function insert(Table $table, $row)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function insert($data)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function insert($table, $data)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function insert($tableName, $data);$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function insert($table, $data)$/;"	f
insert	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function insert($tableName, $data);$/;"	f
insert	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function insert(array $data, $options = [])$/;"	f
insert	.\vendor\topthink\think-mongo\src\Query.php	/^    public function insert(array $data, $replace = null, $getLastInsID = false)$/;"	f
insertAll	.\thinkphp\library\think\db\Builder.php	/^    public function insertAll($dataSet, $options = [], $replace = false)$/;"	f
insertAll	.\thinkphp\library\think\db\Query.php	/^    public function insertAll(array $dataSet, $replace = false, $limit = null)$/;"	f
insertAll	.\thinkphp\library\think\db\builder\Mysql.php	/^    public function insertAll($dataSet, $options = [], $replace = false)$/;"	f
insertAll	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function insertAll($dataSet, $options = [])$/;"	f
insertAll	.\vendor\topthink\think-mongo\src\Query.php	/^    public function insertAll(array $dataSet)$/;"	f
insertAllSql	.\thinkphp\library\think\db\Builder.php	/^    protected $insertAllSql = '%INSERT% INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertAllSql	.\thinkphp\library\think\db\builder\Mysql.php	/^    protected $insertAllSql = '%INSERT% INTO %TABLE% (%FIELD%) VALUES %DATA% %COMMENT%';$/;"	v
insertAllSql	.\thinkphp\library\think\db\builder\Pgsql.php	/^    protected $insertAllSql = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertAllSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $insertAllSql    = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertFields	.\thinkphp\library\think\db\Builder.php	/^                $insertFields = array_keys($data);$/;"	v
insertFields	.\thinkphp\library\think\db\builder\Mysql.php	/^                $insertFields = array_map([$this, 'parseKey'], array_keys($data));$/;"	v
insertGetId	.\thinkphp\library\think\db\Query.php	/^    public function insertGetId(array $data, $replace = false, $sequence = null)$/;"	f
insertGetId	.\vendor\topthink\think-mongo\src\Query.php	/^    public function insertGetId(array $data)$/;"	f
insertId	.\thinkphp\library\think\Model.php	/^            if ($result && $insertId = $this->getQuery()->getLastInsID($sequence)) {$/;"	v
insertId	.\thinkphp\library\think\model\Merge.php	/^                    $insertId = $db->getLastInsID($sequence);$/;"	v
insertId	.\vendor\topthink\think-mongo\src\Builder.php	/^            $this->insertId = $insertId;$/;"	v
insertId	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected $insertId = [];$/;"	v
insertSql	.\thinkphp\library\think\db\Builder.php	/^    protected $insertSql    = '%INSERT% INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
insertSql	.\thinkphp\library\think\db\builder\Pgsql.php	/^    protected $insertSql    = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
insertSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $insertSql       = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
inspectConsole	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private function inspectConsole()$/;"	f
install	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^    public function install(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
install	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^    public function install(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
install	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^    public function install(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
instance	.\thinkphp\library\think\App.php	/^            $instance = Loader::controller($/;"	v
instance	.\thinkphp\library\think\Cache.php	/^    public static $instance = [];$/;"	v
instance	.\thinkphp\library\think\Db.php	/^    private static $instance = [];$/;"	v
instance	.\thinkphp\library\think\Loader.php	/^    protected static $instance = [];$/;"	v
instance	.\thinkphp\library\think\Request.php	/^    protected static $instance;$/;"	v
instance	.\thinkphp\library\think\Request.php	/^    public static function instance($options = [])$/;"	f
instance	.\thinkphp\library\think\Validate.php	/^    protected static $instance;$/;"	v
instance	.\thinkphp\library\think\View.php	/^    protected static $instance;$/;"	v
instance	.\thinkphp\library\think\View.php	/^    public static function instance($engine = [], $replace = [])$/;"	f
instance	.\thinkphp\library\traits\think\Instance.php	/^    protected static $instance = null;$/;"	v
instance	.\thinkphp\library\traits\think\Instance.php	/^    public static function instance($options = [])$/;"	f
instance	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    protected static $instance;$/;"	v
instance	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    public static function instance()$/;"	f
instance	.\vendor\topthink\think-queue\src\queue\Job.php	/^        $this->instance = $this->resolve($class);$/;"	v
instance	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected $instance;$/;"	v
integer	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function integer($name)$/;"	f
interact	.\thinkphp\library\think\console\Command.php	/^    protected function interact(Input $input, Output $output)$/;"	f
interactive	.\thinkphp\library\think\console\Input.php	/^        $this->interactive = (bool) $interactive;$/;"	v
interactive	.\thinkphp\library\think\console\Input.php	/^    protected $interactive = true;$/;"	v
intersect	.\thinkphp\library\think\Collection.php	/^    public function intersect($items)$/;"	f
interviewer	.\thinkphp\library\think\console\output\Ask.php	/^        $interviewer = function () use ($that) {$/;"	v
invCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^        $invCommands = array();$/;"	v
invertAddColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertAddColumn($args)$/;"	f
invertAddForeignKey	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertAddForeignKey($args)$/;"	f
invertAddIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertAddIndex($args)$/;"	f
invertCreateTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertCreateTable($args)$/;"	f
invertMethod	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^            $invertMethod = 'invert' . ucfirst($command['name']);$/;"	v
invertRenameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertRenameColumn($args)$/;"	f
invertRenameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function invertRenameTable($args)$/;"	f
invertedCommand	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^            $invertedCommand = $this->$invertMethod($command['arguments']);$/;"	v
invokeClass	.\thinkphp\library\think\App.php	/^    public static function invokeClass($class, $vars = [])$/;"	f
invokeFunction	.\thinkphp\library\think\App.php	/^    public static function invokeFunction($function, $vars = [])$/;"	f
invokeMethod	.\thinkphp\library\think\App.php	/^    public static function invokeMethod($method, $vars = [])$/;"	f
ip	.\thinkphp\library\think\Request.php	/^                $ip = $_SERVER['HTTP_CLIENT_IP'];$/;"	v
ip	.\thinkphp\library\think\Request.php	/^                $ip = $_SERVER['REMOTE_ADDR'];$/;"	v
ip	.\thinkphp\library\think\Request.php	/^                $ip = trim(current($arr));$/;"	v
ip	.\thinkphp\library\think\Request.php	/^            $ip = $_SERVER[$httpAgentIp];$/;"	v
ip	.\thinkphp\library\think\Request.php	/^            $ip = $_SERVER['REMOTE_ADDR'];$/;"	v
ip	.\thinkphp\library\think\Request.php	/^        $ip   = $long ? [$ip, $long] : ['0.0.0.0', 0];$/;"	v
ip	.\thinkphp\library\think\Request.php	/^        static $ip = null;$/;"	v
ip	.\thinkphp\library\think\Request.php	/^    public function ip($type = 0, $adv = true)$/;"	f
ip	.\thinkphp\library\think\Validate.php	/^    protected function ip($value, $rule)$/;"	f
ip	.\thinkphp\library\think\log\driver\File.php	/^            $ip      = Request::instance()->ip();$/;"	v
is	.\thinkphp\library\think\Validate.php	/^    protected function is($value, $rule, $data = [])$/;"	f
is	.\vendor\composer\ClassLoader.php	/^     * Finds the path to the file where the class is defined.$/;"	c
is	.\vendor\composer\ClassLoader.php	/^ * This class is loosely based on the Symfony UniversalClassLoader.$/;"	c
isAjax	.\thinkphp\library\think\Request.php	/^    public function isAjax($ajax = false)$/;"	f
isArray	.\thinkphp\library\think\console\input\Argument.php	/^    public function isArray()$/;"	f
isArray	.\thinkphp\library\think\console\input\Option.php	/^    public function isArray()$/;"	f
isArrayType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    protected function isArrayType($columnType)$/;"	f
isAssoc	.\thinkphp\library\think\console\output\Question.php	/^    protected function isAssoc($array)$/;"	f
isAssoc	.\thinkphp\library\think\console\output\question\Choice.php	/^        $isAssoc      = $this->isAssoc($choices);$/;"	v
isAssoc	.\vendor\topthink\think-helper\src\Arr.php	/^    public static function isAssoc(array $array)$/;"	f
isAutoWriteTimestamp	.\thinkphp\library\think\Model.php	/^    public function isAutoWriteTimestamp($auto)$/;"	f
isBind	.\thinkphp\library\think\db\Query.php	/^    public function isBind($key)$/;"	f
isBreak	.\thinkphp\library\think\db\Connection.php	/^    protected function isBreak($e)$/;"	f
isBreak	.\thinkphp\library\think\template\taglib\Cx.php	/^        $isBreak  = isset($tag['break']) ? $tag['break'] : '';$/;"	v
isCache	.\thinkphp\library\think\Template.php	/^    public function isCache($cacheId)$/;"	f
isCgi	.\thinkphp\library\think\Request.php	/^    public function isCgi()$/;"	f
isCheckCache	.\thinkphp\library\think\Request.php	/^            $this->isCheckCache = true;$/;"	v
isCheckCache	.\thinkphp\library\think\Request.php	/^    protected $isCheckCache;$/;"	v
isClassMapAuthoritative	.\vendor\composer\ClassLoader.php	/^    public function isClassMapAuthoritative()$/;"	f
isCli	.\thinkphp\library\think\Request.php	/^    public function isCli()$/;"	f
isDebug	.\thinkphp\library\think\console\Output.php	/^    public function isDebug()$/;"	f
isDecorated	.\thinkphp\library\think\console\output\Formatter.php	/^    public function isDecorated()$/;"	f
isDelete	.\thinkphp\library\think\Request.php	/^    public function isDelete()$/;"	f
isDeleted	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function isDeleted()$/;"	f
isDeletedOrReleased	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function isDeletedOrReleased()$/;"	f
isDoStart	.\thinkphp\library\think\Session.php	/^            $isDoStart = true;$/;"	v
isDoStart	.\thinkphp\library\think\Session.php	/^        $isDoStart = false;$/;"	v
isEmpty	.\thinkphp\library\think\Collection.php	/^    public function isEmpty()$/;"	f
isEmpty	.\thinkphp\library\think\Paginator.php	/^    public function isEmpty()$/;"	f
isEnabled	.\thinkphp\library\think\console\Command.php	/^    public function isEnabled()$/;"	f
isFatal	.\thinkphp\library\think\Error.php	/^    protected static function isFatal($type)$/;"	f
isGeneralTimeout	.\thinkphp\library\think\process\exception\Timeout.php	/^    public function isGeneralTimeout()$/;"	f
isGet	.\thinkphp\library\think\Request.php	/^    public function isGet()$/;"	f
isHead	.\thinkphp\library\think\Request.php	/^    public function isHead()$/;"	f
isHidden	.\thinkphp\library\think\console\output\Question.php	/^    public function isHidden()$/;"	f
isHiddenFallback	.\thinkphp\library\think\console\output\Question.php	/^    public function isHiddenFallback()$/;"	f
isIdentity	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function isIdentity()$/;"	f
isIdleTimeout	.\thinkphp\library\think\process\exception\Timeout.php	/^    public function isIdleTimeout()$/;"	f
isIgnoreReport	.\thinkphp\library\think\exception\Handle.php	/^    protected function isIgnoreReport(Exception $exception)$/;"	f
isInteractive	.\thinkphp\library\think\console\Input.php	/^    public function isInteractive()$/;"	f
isMobile	.\thinkphp\library\think\Request.php	/^    public function isMobile()$/;"	f
isMultiselect	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function isMultiselect()$/;"	f
isNull	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function isNull()$/;"	f
isOptions	.\thinkphp\library\think\Request.php	/^    public function isOptions()$/;"	f
isOutputDisabled	.\thinkphp\library\think\Process.php	/^    public function isOutputDisabled()$/;"	f
isPatch	.\thinkphp\library\think\Request.php	/^    public function isPatch()$/;"	f
isPjax	.\thinkphp\library\think\Request.php	/^    public function isPjax($pjax = false)$/;"	f
isPk	.\thinkphp\library\think\Model.php	/^    protected function isPk($key)$/;"	f
isPost	.\thinkphp\library\think\Request.php	/^    public function isPost()$/;"	f
isPty	.\thinkphp\library\think\Process.php	/^    public function isPty()$/;"	f
isPtySupported	.\thinkphp\library\think\Process.php	/^    public static function isPtySupported()$/;"	f
isPut	.\thinkphp\library\think\Request.php	/^    public function isPut()$/;"	f
isQuiet	.\thinkphp\library\think\console\Output.php	/^    public function isQuiet()$/;"	f
isReleased	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function isReleased()$/;"	f
isRequired	.\thinkphp\library\think\console\input\Argument.php	/^    public function isRequired()$/;"	f
isRunning	.\thinkphp\library\think\Process.php	/^    public function isRunning()$/;"	f
isRunningOS400	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function isRunningOS400()$/;"	f
isSelfRelation	.\thinkphp\library\think\model\Relation.php	/^    public function isSelfRelation()$/;"	f
isSigchildEnabled	.\thinkphp\library\think\Process.php	/^    protected function isSigchildEnabled()$/;"	f
isSigned	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function isSigned()$/;"	f
isSsl	.\thinkphp\library\think\Request.php	/^    public function isSsl()$/;"	f
isStarted	.\thinkphp\library\think\Process.php	/^    public function isStarted()$/;"	f
isSuccessful	.\thinkphp\library\think\Process.php	/^    public function isSuccessful()$/;"	f
isSurroundedBy	.\thinkphp\library\think\process\Utils.php	/^    private static function isSurroundedBy($arg, $char)$/;"	f
isTerminated	.\thinkphp\library\think\Process.php	/^    public function isTerminated()$/;"	f
isTest	.\thinkphp\library\think\File.php	/^        $this->isTest = $test;$/;"	v
isTest	.\thinkphp\library\think\File.php	/^    protected $isTest;$/;"	v
isTest	.\thinkphp\library\think\File.php	/^    public function isTest($test = false)$/;"	f
isTimezone	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function isTimezone()$/;"	f
isTty	.\thinkphp\library\think\Process.php	/^    public function isTty()$/;"	f
isUnique	.\vendor\topthink\think-migration\src\db\Column.php	/^    public function isUnique()$/;"	f
isUniqueMigrationClassName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function isUniqueMigrationClassName($className, $path)$/;"	f
isUpdate	.\thinkphp\library\think\Model.php	/^                $this->isUpdate    = true;$/;"	v
isUpdate	.\thinkphp\library\think\Model.php	/^            $this->isUpdate = true;$/;"	v
isUpdate	.\thinkphp\library\think\Model.php	/^        $this->isUpdate = $update;$/;"	v
isUpdate	.\thinkphp\library\think\Model.php	/^    protected $isUpdate = false;$/;"	v
isUpdate	.\thinkphp\library\think\Model.php	/^    public function isUpdate($update = true, $where = null)$/;"	f
isUpdate	.\thinkphp\library\think\Model.php	/^    public function newInstance($data = [], $isUpdate = false, $where = null)$/;"	v
isUpdate	.\thinkphp\library\think\model\Merge.php	/^                $this->isUpdate = true;$/;"	v
isUpdate	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function newPivot($data = [], $isUpdate = false)$/;"	v
isValid	.\thinkphp\library\think\File.php	/^    public function isValid()$/;"	f
isValidColumnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function isValidColumnType(Column $column);$/;"	f
isValidColumnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function isValidColumnType(Column $column)$/;"	f
isValidColumnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function isValidColumnType(Column $column) {$/;"	f
isValidColumnType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function isValidColumnType(Column $column)$/;"	f
isValidMigrationFileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function isValidMigrationFileName($fileName)$/;"	f
isValidPhinxClassName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function isValidPhinxClassName($className)$/;"	f
isValidSeedFileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function isValidSeedFileName($fileName)$/;"	f
isValueOptional	.\thinkphp\library\think\console\input\Option.php	/^    public function isValueOptional()$/;"	f
isValueRequired	.\thinkphp\library\think\console\input\Option.php	/^    public function isValueRequired()$/;"	f
isVerbose	.\thinkphp\library\think\console\Output.php	/^    public function isVerbose()$/;"	f
isVeryVerbose	.\thinkphp\library\think\console\Output.php	/^    public function isVeryVerbose()$/;"	f
item	.\thinkphp\base.php	/^                $item = $name . '_' . strtoupper($k);$/;"	v
item	.\thinkphp\helper.php	/^        $item = current($resultSet);$/;"	v
item	.\thinkphp\library\think\Model.php	/^        $item    = [];$/;"	v
item	.\thinkphp\library\think\Request.php	/^                    $item  = [];$/;"	v
item	.\thinkphp\library\think\Request.php	/^                foreach ($param as $item => $val) {$/;"	v
item	.\thinkphp\library\think\Request.php	/^        $item = [];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                            $item      = $rules['*'];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                        $item      = $rules['*.' . $domain2];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                        $item = $rules[$subDomain];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                    $item = substr($item, 1, -1);$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item           = ltrim($rule . $val[1], '\/');$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item          = [];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item   = [];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item  = [];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item = $rules[$host];$/;"	v
item	.\thinkphp\library\think\Route.php	/^                $item = self::getRouteExpress($key);$/;"	v
item	.\thinkphp\library\think\Route.php	/^        $item  = self::$rules['alias'][$alias];$/;"	v
item	.\thinkphp\library\think\Route.php	/^        $item = str_replace('|', '\/', $url);$/;"	v
item	.\thinkphp\library\think\Session.php	/^            $item = self::get('__flash__');$/;"	v
item	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $item       = file($file);$/;"	v
item	.\thinkphp\library\think\db\Builder.php	/^                    $item  = [];$/;"	v
item	.\thinkphp\library\think\db\Builder.php	/^            $item = $this->parseKey($key, $options, true);$/;"	v
item	.\thinkphp\library\think\db\Builder.php	/^            $item = array_pop($val);$/;"	v
item	.\thinkphp\library\think\db\Builder.php	/^        $item = [];$/;"	v
item	.\thinkphp\library\think\db\Connection.php	/^        $item = [];$/;"	v
item	.\thinkphp\library\think\model\Collection.php	/^        $item = current($this->items);$/;"	v
item	.\thinkphp\library\think\model\Merge.php	/^        $item = [];$/;"	v
item	.\thinkphp\library\think\template\taglib\Cx.php	/^        $item   = !empty($tag['id']) ? $tag['id'] : $tag['item'];$/;"	v
item	.\vendor\topthink\think-mongo\src\Builder.php	/^            $item = $this->parseKey($key);$/;"	v
items	.\thinkphp\library\think\Collection.php	/^            $this->items = [$key => $value] + $this->items;$/;"	v
items	.\thinkphp\library\think\Collection.php	/^        $items = $this->items;$/;"	v
items	.\thinkphp\library\think\Collection.php	/^        $this->items = $this->convertToArray($items);$/;"	v
items	.\thinkphp\library\think\Collection.php	/^    protected $items = [];$/;"	v
items	.\thinkphp\library\think\Paginator.php	/^            $items = $items->slice(0, $this->listRows);$/;"	v
items	.\thinkphp\library\think\Paginator.php	/^            $items = Collection::make($items);$/;"	v
items	.\thinkphp\library\think\Paginator.php	/^        $this->items = $items;$/;"	v
items	.\thinkphp\library\think\Paginator.php	/^    protected $items;$/;"	v
items	.\thinkphp\library\think\Paginator.php	/^    public function items()$/;"	f
items	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $items = $this->fetchAll($sql);$/;"	v
job	.\vendor\topthink\think-queue\src\queue\Worker.php	/^        $job = $this->getNextJob($queue);$/;"	v
job	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^            $job = $response['job'];$/;"	v
job	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^        $job = $this->db->name($this->options['table'])$/;"	v
job	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^                $job      = $this->setMeta($job, 'attempts', $attempts + 1);$/;"	v
job	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $job = $this->redis->lPop($queue);$/;"	v
job	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $job = new TopthinkJob($this, $this->marshalPushedJob(), $this->request->header('topthink-message-queue'));$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^        $this->job           = $job;$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    protected $job;$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^        $this->job   = $job;$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    protected $job;$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^        $this->job           = $job;$/;"	v
job	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    protected $job;$/;"	v
jobs	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $jobs = $this->getExpiredJobs($/;"	v
join	.\thinkphp\library\think\db\Query.php	/^            $join = trim($join);$/;"	v
join	.\thinkphp\library\think\db\Query.php	/^    public function join($join, $condition = null, $type = 'INNER')$/;"	f
joinAlias	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $joinAlias = $relation;$/;"	v
joinStr	.\thinkphp\library\think\db\Builder.php	/^        $joinStr = '';$/;"	v
joinTable	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $joinTable = $this->query->getTable();$/;"	v
joinType	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->joinType   = $joinType;$/;"	v
joinType	.\thinkphp\library\think\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $joinType = 'INNER', $relation = null)$/;"	v
joinType	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->joinType   = $joinType;$/;"	v
joinType	.\thinkphp\library\think\model\relation\HasOne.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $joinType = 'INNER')$/;"	v
joinType	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $this->joinType = $type;$/;"	v
joinType	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected $joinType;$/;"	v
joinType	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function joinType($type)$/;"	f
js	.\thinkphp\library\think\debug\Console.php	/^        $js = <<<JS$/;"	v
json	.\extend\php-jwt-master\src\JWT.php	/^        $json = json_encode($input);$/;"	v
json	.\thinkphp\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = [])$/;"	f
json	.\vendor\firebase\php-jwt\src\JWT.php	/^        $json = json_encode($input);$/;"	v
json	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function json($name)$/;"	f
jsonDecode	.\extend\php-jwt-master\src\JWT.php	/^    public static function jsonDecode($input)$/;"	f
jsonDecode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function jsonDecode($input)$/;"	f
jsonDecode	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected static function jsonDecode($response)$/;"	f
jsonEncode	.\extend\php-jwt-master\src\JWT.php	/^    public static function jsonEncode($input)$/;"	f
jsonEncode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function jsonEncode($input)$/;"	f
jsonFormatProtect	.\thinkphp\library\think\Cookie.php	/^    protected static function jsonFormatProtect(&$val, $key, $type = 'encode')$/;"	f
jsonSerialize	.\thinkphp\library\think\Collection.php	/^    public function jsonSerialize()$/;"	f
jsonSerialize	.\thinkphp\library\think\Model.php	/^    public function jsonSerialize()$/;"	f
jsonSerialize	.\thinkphp\library\think\Paginator.php	/^    public function jsonSerialize()$/;"	f
json_error	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $json_error = json_last_error();$/;"	v
json_without_bigints	.\extend\php-jwt-master\src\JWT.php	/^            $json_without_bigints = preg_replace('\/:\\s*(-?\\d{'.$max_int_length.',})\/', ': "$1"', $input);$/;"	v
json_without_bigints	.\vendor\firebase\php-jwt\src\JWT.php	/^            $json_without_bigints = preg_replace('\/:\\s*(-?\\d{'.$max_int_length.',})\/', ': "$1"', $input);$/;"	v
jsonb	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function jsonb($name)$/;"	f
jsonp	.\thinkphp\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = [])$/;"	f
k	.\thinkphp\base.php	/^            foreach ($val as $k => $v) {$/;"	v
k	.\thinkphp\library\think\Cookie.php	/^                foreach ($_COOKIE as $k => $val) {$/;"	v
k	.\thinkphp\library\think\Model.php	/^                foreach ($val as $k => $value) {$/;"	v
k	.\thinkphp\library\think\Paginator.php	/^        foreach ($queries as $k => $v) {$/;"	v
k	.\thinkphp\library\think\Request.php	/^            foreach ($array as $k => $v) {$/;"	v
k	.\thinkphp\library\think\Route.php	/^                    foreach ($value as $k => $name) {$/;"	v
k	.\thinkphp\library\think\Template.php	/^                    foreach ($array as $k => $v) {$/;"	v
k	.\thinkphp\library\think\Validate.php	/^            foreach ($scene as $k => $val) {$/;"	v
k	.\thinkphp\library\think\db\Builder.php	/^            foreach ($val as $k => $item) {$/;"	v
k	.\thinkphp\library\think\db\Query.php	/^                foreach ($where as $k => $val) {$/;"	v
k	.\thinkphp\library\think\model\relation\MorphTo.php	/^                foreach ($list as $k => $vo) {$/;"	v
k	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^                        $k = false;$/;"	v
k	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^            for ($j = (13 + 3 * (2 << (ord($this->BUF[$i]{10}) & 0x07))), $k = true; $k; $j++) {$/;"	v
k	.\vendor\topthink\think-mongo\src\Builder.php	/^                $k        = '$' . $exp;$/;"	v
k	.\vendor\topthink\think-mongo\src\Builder.php	/^            $k           = '$' . $exp;$/;"	v
k	.\vendor\topthink\think-mongo\src\Builder.php	/^            foreach ($value as $k => $val) {$/;"	v
k	.\vendor\topthink\think-mongo\src\Query.php	/^                foreach ($row['_id'] as $k => $v) {$/;"	v
k	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        foreach ($this->headers as $k => $v) {$/;"	v
key	.\extend\php-jwt-master\src\JWT.php	/^                $key = $key[$header->kid];$/;"	v
key	.\thinkphp\base.php	/^    foreach ($env as $key => $val) {$/;"	v
key	.\thinkphp\helper.php	/^                $key    = $method . '.' . $key;$/;"	v
key	.\thinkphp\helper.php	/^            $key = substr($key, 1);$/;"	v
key	.\thinkphp\library\think\Collection.php	/^                $key    = (string) $row[$indexKey];$/;"	v
key	.\thinkphp\library\think\Collection.php	/^            $key    = $value    = null;$/;"	v
key	.\thinkphp\library\think\Collection.php	/^        foreach ($this->items as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Collection.php	/^    public function push($value, $key = null)$/;"	v
key	.\thinkphp\library\think\Collection.php	/^    public function unshift($value, $key = null)$/;"	v
key	.\thinkphp\library\think\Cookie.php	/^            foreach ($_COOKIE as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Cookie.php	/^        $key    = $prefix . $name;$/;"	v
key	.\thinkphp\library\think\Db.php	/^ * @method Query cache(mixed $key = null , integer $expire = null) static 设置查询缓存$/;"	v
key	.\thinkphp\library\think\Db.php	/^ * @method array column(string $field, string $key = '') static 获取某个列的值$/;"	v
key	.\thinkphp\library\think\Hook.php	/^        foreach (static::get($tag) as $key => $name) {$/;"	v
key	.\thinkphp\library\think\Lang.php	/^        $key   = strtolower($name);$/;"	v
key	.\thinkphp\library\think\Loader.php	/^        $key          = $class . $baseUrl;$/;"	v
key	.\thinkphp\library\think\Log.php	/^    protected static $key;$/;"	v
key	.\thinkphp\library\think\Log.php	/^    public static function key($key)$/;"	f
key	.\thinkphp\library\think\Model.php	/^                                    $key = is_numeric($key) ? $attr : $key;$/;"	v
key	.\thinkphp\library\think\Model.php	/^                                foreach ($bindAttr as $key => $attr) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^                $key = is_numeric($key) ? $attr : $key;$/;"	v
key	.\thinkphp\library\think\Model.php	/^                foreach ($data as $key => $value) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($append as $key => $attr) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($data as $key => $value) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($dataSet as $key => $data) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($this->append as $key => $name) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($this->data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($this->readonly as $key => $field) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^            foreach ($this->relationWrite as $key => $name) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^        foreach ($attrs as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^        foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Model.php	/^        foreach ($relations as $key => $relation) {$/;"	v
key	.\thinkphp\library\think\Paginator.php	/^        foreach ($this->items as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Process.php	/^        foreach ($env as $key => $value) {$/;"	v
key	.\thinkphp\library\think\Request.php	/^                        $key          = str_replace('_', '-', strtolower(substr($key, 5)));$/;"	v
key	.\thinkphp\library\think\Request.php	/^                        $key = str_replace(':' . $item, $val, $key);$/;"	v
key	.\thinkphp\library\think\Request.php	/^                    $key = md5($this->url());$/;"	v
key	.\thinkphp\library\think\Request.php	/^                $key = $fun($key);$/;"	v
key	.\thinkphp\library\think\Request.php	/^                $key = '__URL__';$/;"	v
key	.\thinkphp\library\think\Request.php	/^                $key = call_user_func_array($key, [$this]);$/;"	v
key	.\thinkphp\library\think\Request.php	/^                $key = str_replace(['__MODULE__', '__CONTROLLER__', '__ACTION__', '__URL__', ''], [$this->module, $this->controller, $this->action, md5($this->url(true))], $key);$/;"	v
key	.\thinkphp\library\think\Request.php	/^                foreach ($server as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Request.php	/^            foreach ($files as $key => $file) {$/;"	v
key	.\thinkphp\library\think\Request.php	/^        foreach ($this->mimeType as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^                        $key                       = substr($key, 0, -1);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                        $key = array_shift($val);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                    $key    = trim($key, '\/');$/;"	v
key	.\thinkphp\library\think\Route.php	/^                    $key = array_shift($val);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                $key    = str_replace('|', '\/', $pathinfo);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                $key = array_shift($val);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                $key = substr($key, 1, -1);$/;"	v
key	.\thinkphp\library\think\Route.php	/^                foreach ($routes as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^            $key    = $group ? $group . ($rule ? '\/' . $rule : '') : $rule;$/;"	v
key	.\thinkphp\library\think\Route.php	/^            foreach ($domain as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^            foreach ($matches as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^            foreach ($option['bind_model'] as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^            foreach ($rule as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^            foreach (self::$rest as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^        foreach ($m2 as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^        foreach ($rules as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Route.php	/^        foreach ($rules as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Template.php	/^            foreach (explode('.', $name) as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Url.php	/^                        foreach ($domains as $key => $rule) {$/;"	v
key	.\thinkphp\library\think\Url.php	/^                foreach ($alias as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Url.php	/^                foreach ($domains as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Url.php	/^            foreach ($pattern as $key => $val) {$/;"	v
key	.\thinkphp\library\think\Validate.php	/^                $key  = $item[0];$/;"	v
key	.\thinkphp\library\think\Validate.php	/^        $key = isset($rule[1]) ? $rule[1] : $field;$/;"	v
key	.\thinkphp\library\think\Validate.php	/^        foreach ($rules as $key => $item) {$/;"	v
key	.\thinkphp\library\think\Validate.php	/^        foreach ($rules as $key => $rule) {$/;"	v
key	.\thinkphp\library\think\cache\Driver.php	/^            $key       = 'tag_' . md5($this->tag);$/;"	v
key	.\thinkphp\library\think\cache\Driver.php	/^            $key = 'tag_' . md5($name);$/;"	v
key	.\thinkphp\library\think\cache\Driver.php	/^        $key   = 'tag_' . md5($tag);$/;"	v
key	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $key = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $key    = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $key = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Redis.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Redis.php	/^        $key = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Wincache.php	/^        $key = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\cache\driver\Xcache.php	/^        $key = $this->getCacheKey($name);$/;"	v
key	.\thinkphp\library\think\config\driver\Xml.php	/^        foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\console\Command.php	/^        $key = $short ? 'short' : 'long';$/;"	v
key	.\thinkphp\library\think\console\output\Ask.php	/^                foreach ($default as $key => $value) {$/;"	v
key	.\thinkphp\library\think\console\output\Ask.php	/^            foreach ($this->question->getChoices() as $key => $value) {$/;"	v
key	.\thinkphp\library\think\console\output\descriptor\Console.php	/^                $key = self::GLOBAL_NAMESPACE;$/;"	v
key	.\thinkphp\library\think\console\output\descriptor\Console.php	/^            $key = $this->console->extractNamespace($name, 1);$/;"	v
key	.\thinkphp\library\think\console\output\question\Choice.php	/^                foreach ($choices as $key => $choice) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^                    $key = str_replace('.', '_', $key);$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^                $key    = $this->parseSqlTable($key);$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^            foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^            foreach ($fields as $key => $field) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^        $key = $field ? $this->parseKey($field, $options, true) : '';$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^        foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^        foreach ($order as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^        foreach ($where as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Builder.php	/^        foreach ((array) $tables as $key => $table) {$/;"	v
key	.\thinkphp\library\think\db\Connection.php	/^        foreach ($bind as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                    $key    = $key ?: $key1;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                    $key = 'think:' . $options['table'] . '|' . $data[$pk];$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                    foreach ($options['where'][$logic] as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                $key = $cache['key'];$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                $key = $column;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                $key = 'think:' . $options['table'] . '|' . $data;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                $key = 'think:' . $this->connection->getConfig('database') . '.' . (is_array($options['table']) ? key($options['table']) : $options['table']) . '|' . $data;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                $key = md5($this->connection->getConfig('database') . '.' . serialize($options) . serialize($this->bind));$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                foreach ($field as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                foreach ($options['order'] as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^                foreach ($resultSet as $key => $result) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key       = is_string($cache['key']) ? $cache['key'] : md5($this->connection->getConfig('database') . '.' . serialize($options) . serialize($this->bind));$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key    = is_string($cache['key']) ? $cache['key'] : md5($this->connection->getConfig('database') . '.' . $field . serialize($this->options) . serialize($this->bind));$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key    = true;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key = $options['cache']['key'];$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key = $this->getCacheKey($options['where']['AND'][$pk], $options, $this->bind);$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            $key = isset($alias) ? $alias . '.' . $pk : $pk;$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($alias as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($field as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($info as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($join as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($join as $key => $value) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($relations as $key => $relation) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($tables as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^            foreach ($types as $key => $type) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^        foreach ($with as $key => $relation) {$/;"	v
key	.\thinkphp\library\think\db\Query.php	/^    public function column($field, $key = '')$/;"	v
key	.\thinkphp\library\think\db\builder\Mysql.php	/^            $key = '`' . $key . '`';$/;"	v
key	.\thinkphp\library\think\db\builder\Mysql.php	/^            $key = '`' . $table . '`.' . $key;$/;"	v
key	.\thinkphp\library\think\db\builder\Mysql.php	/^            foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\builder\Mysql.php	/^        $key = trim($key);$/;"	v
key	.\thinkphp\library\think\db\builder\Pgsql.php	/^            $key                = $field . '->>\\'' . $name . '\\'';$/;"	v
key	.\thinkphp\library\think\db\builder\Pgsql.php	/^            $key = $table . '.' . $key;$/;"	v
key	.\thinkphp\library\think\db\builder\Pgsql.php	/^        $key = trim($key);$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlite.php	/^            $key = $table . '.' . $key;$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlite.php	/^        $key = trim($key);$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^            $key = '[' . $key . ']';$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^            $key = '[' . $table . '].' . $key;$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^        $key = trim($key);$/;"	v
key	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^        foreach ($order as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Mysql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Mysql.php	/^        foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Pgsql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Pgsql.php	/^        foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Sqlite.php	/^            foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Sqlite.php	/^        foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^            foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        foreach ($result as $key => $val) {$/;"	v
key	.\thinkphp\library\think\debug\Console.php	/^        foreach ((array) $msg as $key => $m) {$/;"	v
key	.\thinkphp\library\think\log\driver\Socket.php	/^            $key = 'HTTP_SOCKETLOG';$/;"	v
key	.\thinkphp\library\think\log\driver\Socket.php	/^        $key = 'HTTP_USER_AGENT';$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^                    foreach ($this->relationModel as $key => $model) {$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^                foreach ($this->data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^                foreach ($this->relationModel as $key => $model) {$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^            foreach ($data as $key => $value) {$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^        foreach ($class->relationModel as $key => $model) {$/;"	v
key	.\thinkphp\library\think\model\Merge.php	/^        foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            foreach ($where as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            foreach ($model->getData() as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            foreach ($set->getData() as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
key	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($ids as $key => $value) {$/;"	v
key	.\thinkphp\library\think\model\relation\HasMany.php	/^            foreach ($where as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\HasMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
key	.\thinkphp\library\think\model\relation\HasOne.php	/^            foreach ($where as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\MorphMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
key	.\thinkphp\library\think\model\relation\MorphTo.php	/^            foreach ($range as $key => $val) {$/;"	v
key	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $key = is_numeric($key) ? $attr : $key;$/;"	v
key	.\thinkphp\library\think\model\relation\OneToOne.php	/^        foreach ($bindAttr as $key => $attr) {$/;"	v
key	.\thinkphp\library\think\model\relation\OneToOne.php	/^        foreach ($result->getData() as $key => $val) {$/;"	v
key	.\thinkphp\library\think\response\Redirect.php	/^            foreach ($name as $key => $val) {$/;"	v
key	.\thinkphp\library\think\response\Xml.php	/^                $key         = $item;$/;"	v
key	.\thinkphp\library\think\response\Xml.php	/^            foreach ($attr as $key => $value) {$/;"	v
key	.\thinkphp\library\think\response\Xml.php	/^        foreach ($data as $key => $val) {$/;"	v
key	.\thinkphp\library\think\template\TagLib.php	/^                foreach ($this->tags as $key => $val) {$/;"	v
key	.\thinkphp\library\think\template\TagLib.php	/^            foreach ($matches['name'] as $key => $val) {$/;"	v
key	.\thinkphp\library\think\template\taglib\Cx.php	/^        $key    = !empty($tag['key']) ? $tag['key'] : 'i';$/;"	v
key	.\thinkphp\library\think\template\taglib\Cx.php	/^        $key    = !empty($tag['key']) ? $tag['key'] : 'key';$/;"	v
key	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr .= 'foreach($__LIST__ as $key=>$' . $id . '): ';$/;"	v
key	.\thinkphp\library\think\template\taglib\Cx.php	/^        foreach ($tag as $key => $value) {$/;"	v
key	.\thinkphp\library\traits\model\SoftDelete.php	/^            foreach ($this->relationWrite as $key => $name) {$/;"	v
key	.\vendor\firebase\php-jwt\src\JWT.php	/^                $key = $key[$header->kid];$/;"	v
key	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $key                   = $this->authcode($this->seKey);$/;"	v
key	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $key = $this->authcode($this->seKey) . $id;$/;"	v
key	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $key = substr(md5($this->seKey), 5, 8);$/;"	v
key	.\vendor\topthink\think-helper\src\Str.php	/^        $key = $value;$/;"	v
key	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            foreach ($options as $key => $option) {$/;"	v
key	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            foreach ($options as $key => $option) {$/;"	v
key	.\vendor\topthink\think-mongo\src\Builder.php	/^            $key = '_id';$/;"	v
key	.\vendor\topthink\think-mongo\src\Builder.php	/^        $key = $field ? $this->parseKey($field) : '';$/;"	v
key	.\vendor\topthink\think-mongo\src\Builder.php	/^        foreach ($data as $key => $val) {$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^                $key        = 'mongo:' . $options['table'] . '|' . $data[$pk];$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^                $key    = $key ?: $key1;$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^                $key = 'mongo:' . $options['table'] . '|' . $data;$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^                $key = is_string($cache['key']) ? $cache['key'] : md5(serialize($options));$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^                foreach ($resultSet as $key => $result) {$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            $key       = is_string($cache['key']) ? $cache['key'] : md5(serialize($options));$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            $key    = is_string($cache['key']) ? $cache['key'] : md5($field . serialize($this->options));$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            $key    = true;$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            $key = $options['cache']['key'];$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            $key = $this->getCacheKey($options['where']['$and'][$pk], $options);$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^            foreach ($result as $key => $val) {$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^        foreach ($field as $key => $val) {$/;"	v
key	.\vendor\topthink\think-mongo\src\Query.php	/^    public function column($field, $key = '')$/;"	v
key1	.\thinkphp\library\think\db\Query.php	/^                    $key1   = array_shift($fields);$/;"	v
key1	.\vendor\topthink\think-mongo\src\Query.php	/^                $key1   = array_shift($fields);$/;"	v
key2	.\thinkphp\library\think\db\Query.php	/^                    $key2   = $fields ? array_shift($fields) : '';$/;"	v
key2	.\vendor\topthink\think-mongo\src\Query.php	/^                $key2   = $fields ? array_shift($fields) : '';$/;"	v
keySet	.\thinkphp\library\think\Collection.php	/^                $keySet = true;$/;"	v
keySet	.\thinkphp\library\think\Collection.php	/^            $keySet = $valueSet = false;$/;"	v
keys	.\thinkphp\library\think\Cache.php	/^    public static function tag($name, $keys = null, $overlay = false)$/;"	v
keys	.\thinkphp\library\think\Collection.php	/^    public function keys()$/;"	f
keys	.\thinkphp\library\think\Request.php	/^                    $keys  = array_keys($file);$/;"	v
keys	.\thinkphp\library\think\cache\Driver.php	/^                $keys = explode(',', $keys);$/;"	v
keys	.\thinkphp\library\think\cache\Driver.php	/^            $keys = array_map([$this, 'getCacheKey'], $keys);$/;"	v
keys	.\thinkphp\library\think\cache\Driver.php	/^    public function tag($name, $keys = null, $overlay = false)$/;"	v
keys	.\thinkphp\library\think\cache\driver\File.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Lite.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Memcached.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Redis.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Wincache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\thinkphp\library\think\cache\driver\Xcache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
keys	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $keys = array('1' => 'my_key', '2' => 'my_key2');$/;"	v
keys	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $keys = new ArrayObject(array('1' => 'my_key', '2' => 'my_key2'));$/;"	v
keys	.\vendor\topthink\think-helper\src\Arr.php	/^        $keys = array_keys($array);$/;"	v
label	.\thinkphp\library\think\Debug.php	/^        $label = (null === $label) ? '' : rtrim($label) . ':';$/;"	v
lang	.\thinkphp\helper.php	/^    function lang($name, $vars = [], $lang = '')$/;"	f
lang	.\thinkphp\library\think\Lang.php	/^                    $lang = array_change_key_case($_lang) + $lang;$/;"	v
lang	.\thinkphp\library\think\Lang.php	/^        $lang = [];$/;"	v
lang	.\thinkphp\library\think\Lang.php	/^    private static $lang = [];$/;"	v
langCookieExpire	.\thinkphp\library\think\Lang.php	/^    protected static $langCookieExpire = 3600;$/;"	v
langCookieVar	.\thinkphp\library\think\Lang.php	/^    protected static $langCookieVar = 'think_var';$/;"	v
langDetectVar	.\thinkphp\library\think\Lang.php	/^    protected static $langDetectVar = 'lang';$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^                $langSet = $acceptLangs[$langSet];$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^                $langSet = self::$acceptLanguage[$langSet];$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^            $langSet     = strtolower($matches[1]);$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^            $langSet = strtolower($_COOKIE[self::$langCookieVar]);$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^            $langSet = strtolower($_GET[self::$langDetectVar]);$/;"	v
langSet	.\thinkphp\library\think\Lang.php	/^        $langSet = '';$/;"	v
langset	.\thinkphp\library\think\Request.php	/^            $this->langset = $lang;$/;"	v
langset	.\thinkphp\library\think\Request.php	/^    protected $langset;$/;"	v
langset	.\thinkphp\library\think\Request.php	/^    public function langset($lang = null)$/;"	f
last	.\thinkphp\library\think\Route.php	/^                $last  = array_pop($array);$/;"	v
lastError	.\thinkphp\library\think\process\pipes\Pipes.php	/^        $lastError = error_get_last();$/;"	v
lastId	.\thinkphp\library\think\db\Query.php	/^                $lastId = is_array($end) ? $end[$key] : $end->getData($key);$/;"	v
lastId	.\vendor\topthink\think-mongo\src\Query.php	/^            $lastId    = is_array($end) ? $end[$column] : $end->$column;$/;"	v
lastInsId	.\thinkphp\library\think\db\Query.php	/^            $lastInsId = $this->getLastInsID($sequence);$/;"	v
lastInsId	.\vendor\topthink\think-mongo\src\Query.php	/^            $lastInsId = $this->getLastInsID();$/;"	v
lastModified	.\thinkphp\library\think\Response.php	/^    public function lastModified($time)$/;"	f
lastMonth	.\vendor\topthink\think-helper\src\Time.php	/^    public static function lastMonth()$/;"	f
lastOutputTime	.\thinkphp\library\think\Process.php	/^        $this->lastOutputTime = microtime(true);$/;"	v
lastOutputTime	.\thinkphp\library\think\Process.php	/^    private $lastOutputTime;$/;"	v
lastPage	.\thinkphp\library\think\Paginator.php	/^            $this->lastPage    = (int) ceil($total \/ $listRows);$/;"	v
lastPage	.\thinkphp\library\think\Paginator.php	/^    protected $lastPage;$/;"	v
lastPage	.\thinkphp\library\think\Paginator.php	/^    public function lastPage()$/;"	f
lastPos	.\vendor\composer\ClassLoader.php	/^            while (false !== $lastPos = strrpos($subPath, '\\\\')) {$/;"	v
lastRestart	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        $lastRestart = $this->getTimestampOfLastQueueRestart();$/;"	v
lastVersion	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^            $lastVersion = end($versions);$/;"	v
lastWeek	.\vendor\topthink\think-helper\src\Time.php	/^    public static function lastWeek()$/;"	f
lastYear	.\vendor\topthink\think-helper\src\Time.php	/^    public static function lastYear()$/;"	f
last_status	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^            $this->last_status = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);$/;"	v
last_status	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $last_status;$/;"	v
later	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    abstract public function later($delay, $job, $data = '', $queue = null);$/;"	f
later	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	f
later	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	f
later	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	f
later	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function later($delay, $job, $data = '', $queue = null)$/;"	f
laterOptions	.\thinkphp\library\think\console\output\Descriptor.php	/^            $laterOptions = [];$/;"	v
latest	.\thinkphp\library\think\Process.php	/^        $latest = substr($data, $this->incrementalErrorOutputOffset);$/;"	v
latest	.\thinkphp\library\think\Process.php	/^        $latest = substr($data, $this->incrementalOutputOffset);$/;"	v
latestSignal	.\thinkphp\library\think\Process.php	/^        $this->latestSignal                 = null;$/;"	v
latestSignal	.\thinkphp\library\think\Process.php	/^        $this->latestSignal = $signal;$/;"	v
latestSignal	.\thinkphp\library\think\Process.php	/^    private $latestSignal;$/;"	v
layer	.\thinkphp\helper.php	/^    function controller($name, $layer = 'controller', $appendSuffix = false)$/;"	v
layer	.\thinkphp\helper.php	/^    function model($name = '', $layer = 'model', $appendSuffix = false)$/;"	v
layer	.\thinkphp\helper.php	/^    function validate($name = '', $layer = 'validate', $appendSuffix = false)$/;"	v
layer	.\thinkphp\library\think\Loader.php	/^    public static function controller($name, $layer = 'controller', $appendSuffix = false, $empty = '')$/;"	v
layer	.\thinkphp\library\think\Loader.php	/^    public static function model($name = '', $layer = 'model', $appendSuffix = false, $common = 'common')$/;"	v
layer	.\thinkphp\library\think\Loader.php	/^    public static function validate($name = '', $layer = 'validate', $appendSuffix = false, $common = 'common')$/;"	v
layout	.\thinkphp\library\think\Template.php	/^    public function layout($name, $replace = '')$/;"	f
layoutFile	.\thinkphp\library\think\Template.php	/^                $layoutFile = $this->parseTemplateFile($array['name']);$/;"	v
layoutFile	.\thinkphp\library\think\Template.php	/^                $layoutFile = $this->parseTemplateFile($this->config['layout_name']);$/;"	v
lazyWrite	.\thinkphp\library\think\db\Query.php	/^    protected function lazyWrite($type, $guid, $step, $lazyTime)$/;"	f
lazyWrite	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function lazyWrite($guid, $step, $lazyTime)$/;"	f
leeway	.\extend\php-jwt-master\src\JWT.php	/^    public static $leeway = 0;$/;"	v
leeway	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static $leeway = 0;$/;"	v
len	.\extend\php-jwt-master\src\JWT.php	/^                $len = min(static::safeStrlen($signature), static::safeStrlen($hash));$/;"	v
len	.\thinkphp\library\think\console\Input.php	/^        $len = strlen($name);$/;"	v
len	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        for ($i = 0, $len = count($matches['type']); $i < $len; $i++) {$/;"	v
len	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $len = max($lineLength, $len);$/;"	v
len	.\thinkphp\library\think\console\output\driver\Console.php	/^            $len = $this->stringWidth($title);$/;"	v
len	.\vendor\firebase\php-jwt\src\JWT.php	/^                $len = min(static::safeStrlen($signature), static::safeStrlen($hash));$/;"	v
len1	.\thinkphp\library\think\Route.php	/^        $len1 = substr_count($url, '|');$/;"	v
len2	.\thinkphp\library\think\Route.php	/^        $len2 = substr_count($rule, '\/');$/;"	v
length	.\thinkphp\library\think\Collection.php	/^    public function slice($offset, $length = null, $preserveKeys = false)$/;"	v
length	.\thinkphp\library\think\Db.php	/^ * @method Query limit(mixed $offset, integer $length = null) static 查询LIMIT$/;"	v
length	.\thinkphp\library\think\Loader.php	/^            $length = strlen($prefix);$/;"	v
length	.\thinkphp\library\think\Template.php	/^                        $length               = $match[0][1] - $start;$/;"	v
length	.\thinkphp\library\think\Template.php	/^            $length = count($varArray);$/;"	v
length	.\thinkphp\library\think\Validate.php	/^            $length = $value->getSize();$/;"	v
length	.\thinkphp\library\think\Validate.php	/^            $length = count($value);$/;"	v
length	.\thinkphp\library\think\Validate.php	/^            $length = mb_strlen((string) $value);$/;"	v
length	.\thinkphp\library\think\Validate.php	/^            return $length == $rule;$/;"	v
length	.\thinkphp\library\think\Validate.php	/^    protected function length($value, $rule)$/;"	f
length	.\thinkphp\library\think\db\Query.php	/^    public function limit($offset, $length = null)$/;"	v
length	.\thinkphp\library\think\process\pipes\Windows.php	/^            if (0 < $length = strlen($data)) {$/;"	v
length	.\thinkphp\library\think\template\taglib\Cx.php	/^        $length = !empty($tag['length']) && is_numeric($tag['length']) ? intval($tag['length']) : 'null';$/;"	v
length	.\vendor\composer\ClassLoader.php	/^                        $length = $this->prefixLengthsPsr4[$first][$search];$/;"	v
length	.\vendor\composer\ClassLoader.php	/^            $length = strlen($prefix);$/;"	v
length	.\vendor\topthink\think-helper\src\Str.php	/^    public static function length($value)$/;"	f
length	.\vendor\topthink\think-helper\src\Str.php	/^    public static function substr($string, $start, $length = null)$/;"	v
length	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function char($name, $length = 255)$/;"	v
length	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function string($name, $length = 255)$/;"	v
length	.\vendor\topthink\think-mongo\src\Query.php	/^                $length = $offset;$/;"	v
length	.\vendor\topthink\think-mongo\src\Query.php	/^    public function limit($offset, $length = null)$/;"	v
lev	.\thinkphp\library\think\Console.php	/^                $lev = levenshtein($subname, $parts[$i]);$/;"	v
lev	.\thinkphp\library\think\Console.php	/^            $lev = levenshtein($name, $item);$/;"	v
level	.\thinkphp\helper.php	/^    function trace($log = '[think]', $level = 'log')$/;"	v
level	.\thinkphp\library\think\log\driver\File.php	/^            $level = '';$/;"	v
lib	.\thinkphp\library\think\template\TagLib.php	/^        $lib  = $lib ? strtolower($lib) . ':' : '';$/;"	v
lib	.\thinkphp\library\think\template\TagLib.php	/^    public function parseTag(&$content, $lib = '')$/;"	v
libPath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $libPath    = $this->normalizePath(realpath(LIB_PATH));$/;"	v
limit	.\thinkphp\library\think\Console.php	/^    public function extractNamespace($name, $limit = null)$/;"	v
limit	.\thinkphp\library\think\db\Query.php	/^    public function limit($offset, $length = null)$/;"	f
limit	.\thinkphp\library\think\db\builder\Pgsql.php	/^            $limit = explode(',', $limit);$/;"	v
limit	.\thinkphp\library\think\db\builder\Sqlite.php	/^            $limit = explode(',', $limit);$/;"	v
limit	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^        $limit = explode(',', $limit);$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function getSqlType($type, $limit = null);$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function getSqlType($type, $limit = null)$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                        $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = 11;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = 4;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::BLOB_LONG;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::BLOB_MEDIUM;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::BLOB_TINY;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::INT_MEDIUM;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::INT_SMALL;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::INT_TINY;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::TEXT_LONG;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::TEXT_MEDIUM;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limit = static::TEXT_TINY;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $limit = $matches[3] ? (int) $matches[3] : null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $limit = '(' . $index->getLimit() . ')';$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            if ($type === 'tinyint' && $limit === 1) {$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $limit = '';$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                if ($limit && $limit == static::INT_SMALL) {$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                        $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $limit = $matches[3] ? $matches[3] : null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function getSqlType($type, $limit = null)$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->limit = $limit;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $limit = null;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        $this->limit = $limit;$/;"	v
limit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    protected $limit = null;$/;"	v
limit	.\vendor\topthink\think-mongo\src\Query.php	/^    public function limit($offset, $length = null)$/;"	f
limitStr	.\thinkphp\library\think\db\builder\Pgsql.php	/^        $limitStr = '';$/;"	v
limitStr	.\thinkphp\library\think\db\builder\Sqlite.php	/^        $limitStr = '';$/;"	v
limitStr	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN ' . $limit[0] . ' + 1 AND ' . $limit[0] . ' + ' . $limit[1] . ')';$/;"	v
limitStr	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN 1 AND ' . $limit[0] . ")";$/;"	v
limitable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $limitable = in_array(strtoupper($sqlType['name']), $this->definitionsWithLimits);$/;"	v
limits	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $limits = array($/;"	v
line	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $line     = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n\/a';$/;"	v
line	.\thinkphp\library\think\console\output\driver\Console.php	/^            $line    = $char;$/;"	v
line	.\thinkphp\library\think\console\output\driver\Console.php	/^        $line       = '';$/;"	v
line	.\thinkphp\library\think\exception\ErrorException.php	/^        $this->line     = $line;$/;"	v
line	.\thinkphp\library\think\exception\Handle.php	/^        $line  = $exception->getLine();$/;"	v
lineLength	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $lineLength = $this->stringWidth(preg_replace('\/\\[[^m]*m\/', '', $line)) + 4;$/;"	v
lines	.\thinkphp\library\think\console\output\driver\Console.php	/^            $lines = [];$/;"	v
lines	.\thinkphp\library\think\console\output\driver\Console.php	/^        $lines      = [];$/;"	v
lines	.\thinkphp\library\think\debug\Console.php	/^        $lines = '';$/;"	v
linkID	.\thinkphp\library\think\db\Connection.php	/^                $this->linkID = $this->linkRead;$/;"	v
linkID	.\thinkphp\library\think\db\Connection.php	/^                $this->linkID = $this->linkWrite;$/;"	v
linkID	.\thinkphp\library\think\db\Connection.php	/^            $this->linkID = $this->connect();$/;"	v
linkID	.\thinkphp\library\think\db\Connection.php	/^        $this->linkID    = null;$/;"	v
linkID	.\thinkphp\library\think\db\Connection.php	/^    protected $linkID;$/;"	v
linkID	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $linkID;$/;"	v
linkRead	.\thinkphp\library\think\db\Connection.php	/^                    $this->linkRead = $this->multiConnect(false);$/;"	v
linkRead	.\thinkphp\library\think\db\Connection.php	/^        $this->linkRead  = null;$/;"	v
linkRead	.\thinkphp\library\think\db\Connection.php	/^    protected $linkRead;$/;"	v
linkRead	.\vendor\topthink\think-mongo\src\Connection.php	/^                    $this->linkRead = $this->multiConnect(false);$/;"	v
linkRead	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->linkRead  = null;$/;"	v
linkRead	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $linkRead;$/;"	v
linkWrite	.\thinkphp\library\think\db\Connection.php	/^                    $this->linkWrite = $this->multiConnect(true);$/;"	v
linkWrite	.\thinkphp\library\think\db\Connection.php	/^        $this->linkWrite = null;$/;"	v
linkWrite	.\thinkphp\library\think\db\Connection.php	/^    protected $linkWrite;$/;"	v
linkWrite	.\vendor\topthink\think-mongo\src\Connection.php	/^                    $this->linkWrite = $this->multiConnect(true);$/;"	v
linkWrite	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->linkWrite = null;$/;"	v
linkWrite	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $linkWrite;$/;"	v
links	.\thinkphp\library\think\Model.php	/^    protected static $links = [];$/;"	v
links	.\thinkphp\library\think\db\Connection.php	/^        $this->links     = [];$/;"	v
links	.\thinkphp\library\think\db\Connection.php	/^    protected $links = [];$/;"	v
links	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->links     = [];$/;"	v
links	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $links = [];$/;"	v
list	.\thinkphp\library\think\Build.php	/^            $list = [$/;"	v
list	.\thinkphp\library\think\Build.php	/^    public static function module($module = '', $list = [], $namespace = 'app', $suffix = false)$/;"	v
list	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $list = is_dir($path) ? scandir($path) : [];$/;"	v
list	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $list = $this->belongsToManyQuery($this->foreignKey, $this->localKey, $where)->with($subRelation)->select();$/;"	v
list	.\thinkphp\library\think\model\relation\HasMany.php	/^        $list   = $this->relation($subRelation)->select();$/;"	v
list	.\thinkphp\library\think\model\relation\HasMany.php	/^        $list = $model->removeWhereField($foreignKey)->where($where)->with($subRelation)->select();$/;"	v
list	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $list     = $this->query->where($where)->with($subRelation)->select();$/;"	v
list	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $list   = $this->relation($subRelation)->select();$/;"	v
list	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $list     = $this->query->where($where)->with($subRelation)->find();$/;"	v
list	.\thinkphp\library\think\model\relation\MorphTo.php	/^                $list  = $obj->all($val, $subRelation);$/;"	v
list	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $list = $model->where($where)->with($subRelation)->select();$/;"	v
listCollections	.\vendor\topthink\think-mongo\src\Query.php	/^    public function listCollections($db = '')$/;"	f
listRows	.\thinkphp\library\think\Db.php	/^ * @method Paginator paginate(integer $listRows = 15, mixed $simple = null, array $config = []) static 分页查询$/;"	v
listRows	.\thinkphp\library\think\Paginator.php	/^        $this->listRows = $listRows;$/;"	v
listRows	.\thinkphp\library\think\Paginator.php	/^    protected $listRows;$/;"	v
listRows	.\thinkphp\library\think\Paginator.php	/^    public function listRows()$/;"	f
listRows	.\thinkphp\library\think\db\Query.php	/^            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);$/;"	v
listRows	.\thinkphp\library\think\db\Query.php	/^            $listRows = $config['list_rows'];$/;"	v
listRows	.\thinkphp\library\think\db\Query.php	/^            $listRows = $listRows ?: $config['list_rows'];$/;"	v
listRows	.\thinkphp\library\think\db\Query.php	/^    public function page($page, $listRows = null)$/;"	v
listRows	.\vendor\topthink\think-mongo\src\Query.php	/^            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);$/;"	v
listRows	.\vendor\topthink\think-mongo\src\Query.php	/^        $listRows = $listRows ?: $config['list_rows'];$/;"	v
listRows	.\vendor\topthink\think-mongo\src\Query.php	/^    public function page($page, $listRows = null)$/;"	v
listcollections	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function listcollections()$/;"	f
listen	.\thinkphp\library\think\Hook.php	/^    public static function listen($tag, &$params = null, $extra = null, $once = false)$/;"	f
listen	.\thinkphp\library\think\db\Connection.php	/^    public function listen($callback)$/;"	f
listen	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function listen($callback)$/;"	f
listen	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function listen($queue, $delay, $memory, $timeout = 60)$/;"	f
listener	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^        $this->listener = new Listener(getcwd());$/;"	v
listener	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^    protected $listener;$/;"	v
literal	.\thinkphp\library\think\Template.php	/^                $this->literal = [];$/;"	v
literal	.\thinkphp\library\think\Template.php	/^    private $literal     = [];$/;"	v
load	.\thinkphp\library\think\Config.php	/^    public static function load($file, $name = '', $range = '')$/;"	f
load	.\thinkphp\library\think\Lang.php	/^    public static function load($file, $range = '')$/;"	f
load	.\thinkphp\library\think\model\Collection.php	/^    public function load($relation)$/;"	f
loadClass	.\vendor\composer\ClassLoader.php	/^    public function loadClass($class)$/;"	f
loadClassLoader	.\vendor\composer\autoload_real.php	/^    public static function loadClassLoader($class)$/;"	f
loadComposerAutoloadFiles	.\thinkphp\library\think\Loader.php	/^    public static function loadComposerAutoloadFiles()$/;"	f
load_relation	.\thinkphp\helper.php	/^    function load_relation($resultSet, $relation)$/;"	f
load_trait	.\thinkphp\helper.php	/^    function load_trait($class, $ext = EXT)$/;"	f
loader	.\vendor\composer\ClassLoader.php	/^ *     $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	.\vendor\composer\ClassLoader.php	/^ * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.$/;"	c
loader	.\vendor\composer\autoload_real.php	/^        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	.\vendor\composer\autoload_real.php	/^    private static $loader;$/;"	v
localKey	.\thinkphp\library\think\Model.php	/^        $localKey   = $localKey ?: $this->getForeignKey($this->name);$/;"	v
localKey	.\thinkphp\library\think\Model.php	/^        $localKey   = $localKey ?: $this->getPk();$/;"	v
localKey	.\thinkphp\library\think\Model.php	/^        $localKey   = $localKey ?: (new $model)->getPk();$/;"	v
localKey	.\thinkphp\library\think\model\Relation.php	/^    protected $localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsTo.php	/^                $localKey => [$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->localKey   = $localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                'pivot.' . $localKey => [$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->localKey   => $data[$this->localKey],$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            'pivot.' . $this->localKey => [$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->localKey   = $localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasMany.php	/^        $localKey = $this->localKey ?: $this->parent->getPk();$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasMany.php	/^        $localKey = $this->localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasMany.php	/^        $this->localKey   = $localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->localKey   = $localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasOne.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasOne.php	/^        $localKey = $this->localKey;$/;"	v
localKey	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->localKey   = $localKey;$/;"	v
locate	.\vendor\topthink\think-image\src\Image.php	/^        $locate = self::WATER_SOUTHEAST, $offset = 0, $angle = 0) {$/;"	v
locate	.\vendor\topthink\think-image\src\Image.php	/^    public function water($source, $locate = self::WATER_SOUTHEAST, $alpha = 100)$/;"	v
lock	.\thinkphp\library\think\Build.php	/^        $lock = APP_PATH . 'build.lock';$/;"	v
lock	.\thinkphp\library\think\db\Query.php	/^    public function lock($lock = false)$/;"	f
log	.\thinkphp\library\think\Log.php	/^            $log = [];$/;"	v
log	.\thinkphp\library\think\Log.php	/^            $log = self::$log;$/;"	v
log	.\thinkphp\library\think\Log.php	/^        $log = self::$log;$/;"	v
log	.\thinkphp\library\think\Log.php	/^    protected static $log = [];$/;"	v
log	.\thinkphp\library\think\debug\Console.php	/^    public function output(Response $response, array $log = [])$/;"	v
log	.\thinkphp\library\think\debug\Html.php	/^    public function output(Response $response, array $log = [])$/;"	v
log	.\thinkphp\library\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}";$/;"	v
log	.\thinkphp\library\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}[{$data['file']}:{$data['line']}]";$/;"	v
log	.\thinkphp\library\think\log\driver\File.php	/^    public function save(array $log = [])$/;"	v
log	.\thinkphp\library\think\log\driver\Socket.php	/^    public function save(array $log = [])$/;"	v
log	.\thinkphp\library\think\log\driver\Test.php	/^    public function save(array $log = [])$/;"	v
log	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function log($type, $data, $options = [])$/;"	f
log	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function log($type, $data, $options = [])$/;"	f
logFailedJob	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    protected function logFailedJob(Job $job)$/;"	f
logic	.\thinkphp\library\think\db\Builder.php	/^                $logic = isset($val[2]) ? $val[2] : 'AND';$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^        $logic = strtoupper($logic);$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function removeWhereField($field, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereBetween($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereExists($condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereExp($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereIn($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereLike($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNotExists($condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNotLike($field, $condition, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNotNull($field, $logic = 'AND')$/;"	v
logic	.\thinkphp\library\think\db\Query.php	/^    public function whereNull($field, $logic = 'AND')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Builder.php	/^        foreach ($where as $logic => $val) {$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^        $logic = '$' . strtolower($logic);$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^        $logic = '$' . strtoupper($logic);$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function removeWhereField($field, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereBetween($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereExp($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereIn($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereLike($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotNull($field, $logic = 'and')$/;"	v
logic	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNull($field, $logic = 'and')$/;"	v
logicalPathPsr0	.\thinkphp\library\think\Loader.php	/^            $logicalPathPsr0 = strtr($class, '_', DS) . EXT;$/;"	v
logicalPathPsr0	.\thinkphp\library\think\Loader.php	/^            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr0	.\vendor\composer\ClassLoader.php	/^            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logicalPathPsr0	.\vendor\composer\ClassLoader.php	/^            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr4	.\thinkphp\library\think\Loader.php	/^        $logicalPathPsr4 = strtr($class, '\\\\', DS) . EXT;$/;"	v
logicalPathPsr4	.\vendor\composer\ClassLoader.php	/^        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logs	.\thinkphp\library\think\log\driver\Socket.php	/^        $logs = [$/;"	v
long	.\thinkphp\library\think\Request.php	/^        $long = sprintf("%u", ip2long($ip));$/;"	v
longText	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function longText($name)$/;"	f
lookup	.\vendor\composer\ClassLoader.php	/^     * Should class lookup fail if not found in the current class map?$/;"	c
lower	.\vendor\topthink\think-helper\src\Str.php	/^    public static function lower($value)$/;"	f
lt	.\thinkphp\library\think\Validate.php	/^    protected function lt($value, $rule, $data)$/;"	f
m	.\thinkphp\library\think\db\Connection.php	/^        $m = floor(mt_rand(0, $this->config['master_num'] - 1));$/;"	v
m	.\thinkphp\library\think\debug\Console.php	/^                    $m      = is_string($key) ? $key . ' ' . $m : $key + 1 . ' ' . $m;$/;"	v
m	.\vendor\topthink\think-mongo\src\Connection.php	/^        $m = floor(mt_rand(0, $this->config['master_num'] - 1));$/;"	v
m1	.\thinkphp\library\think\Route.php	/^        $m1 = explode('|', $url);$/;"	v
m2	.\thinkphp\library\think\Route.php	/^        $m2 = explode('\/', $rule);$/;"	v
make	.\thinkphp\library\think\Collection.php	/^    public static function make($items = [])$/;"	f
make	.\thinkphp\library\think\Paginator.php	/^    public static function make($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	f
make	.\thinkphp\library\think\Validate.php	/^    public static function make($rules = [], $message = [], $field = [])$/;"	f
make	.\vendor\topthink\think-helper\src\Hash.php	/^    public static function make($value, $type = null, array $options = [])$/;"	f
make	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    public function make($value, array $options = [])$/;"	f
make	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    public function make($value, array $options = [])$/;"	f
make	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function make($name, $type, $options = [])$/;"	f
makeProcess	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function makeProcess($queue, $delay, $memory, $timeout)$/;"	f
manager	.\vendor\topthink\think-installer\src\Plugin.php	/^        $manager = $composer->getInstallationManager();$/;"	v
manager	.\vendor\topthink\think-mongo\src\Connection.php	/^        $manager                              = new Manager($this->buildUrl(), $this->config['params']);$/;"	v
map	.\thinkphp\library\think\Loader.php	/^            $map = require VENDOR_PATH . 'composer\/autoload_namespaces.php';$/;"	v
map	.\thinkphp\library\think\Loader.php	/^            $map = require VENDOR_PATH . 'composer\/autoload_psr4.php';$/;"	v
map	.\thinkphp\library\think\Loader.php	/^    public static function addClassMap($class, $map = '')$/;"	v
map	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $map = [];$/;"	v
map	.\vendor\composer\ClassLoader.php	/^        \/\/ class map lookup$/;"	c
map	.\vendor\composer\ClassLoader.php	/^     * that have not been registered with the class map.$/;"	c
map	.\vendor\composer\autoload_real.php	/^            $map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
map	.\vendor\composer\autoload_real.php	/^            $map = require __DIR__ . '\/autoload_psr4.php';$/;"	v
mapClassNameToFileName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function mapClassNameToFileName($className)$/;"	f
mapFields	.\thinkphp\library\think\model\Merge.php	/^    protected $mapFields     = []; \/\/  需要处理的模型映射字段，避免混淆 array( id => 'user.id'  )$/;"	v
mapFileNameToClassName	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^    public static function mapFileNameToClassName($fileName)$/;"	f
markJobAsReserved	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function markJobAsReserved($id)$/;"	f
marshal	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    public function marshal()$/;"	f
marshal	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function marshal()$/;"	f
marshalPushedJob	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected function marshalPushedJob()$/;"	f
master	.\thinkphp\library\think\db\Connection.php	/^                $master = $master ? 'master|' : 'slave|';$/;"	v
master	.\thinkphp\library\think\db\Connection.php	/^                $master = '';$/;"	v
master	.\thinkphp\library\think\db\Connection.php	/^    public function quote($str, $master = true)$/;"	v
master	.\thinkphp\library\think\db\Query.php	/^    public function master()$/;"	f
master	.\thinkphp\library\think\model\Merge.php	/^        $master = $class->name;$/;"	v
master	.\vendor\topthink\think-mongo\src\Query.php	/^    public function master()$/;"	f
match	.\thinkphp\library\think\Route.php	/^                            $match = false;$/;"	v
match	.\thinkphp\library\think\Route.php	/^                    $match = true;$/;"	v
match	.\thinkphp\library\think\Route.php	/^            if (false !== $match = self::match($url, $rule, $pattern)) {$/;"	v
match	.\thinkphp\library\think\Route.php	/^    private static function match($url, $rule, $pattern)$/;"	f
match	.\thinkphp\library\think\Template.php	/^                $match = array_pop($matches[0]);$/;"	v
match	.\thinkphp\library\think\Url.php	/^                $match   = [];$/;"	v
match	.\thinkphp\library\think\Url.php	/^        if (!empty($rule) && $match = self::getRuleUrl($rule, $vars)) {$/;"	v
match	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected function match($model, $relation, &$result)$/;"	f
matchAlias	.\thinkphp\library\think\Url.php	/^                        $matchAlias = true;$/;"	v
matchAlias	.\thinkphp\library\think\Url.php	/^            $matchAlias = false;$/;"	v
matches	.\thinkphp\library\think\cache\driver\File.php	/^                $matches = glob($path . '\/*.php');$/;"	v
matches	.\thinkphp\library\think\console\output\Ask.php	/^                    $matches    = $autocomplete;$/;"	v
matches	.\thinkphp\library\think\console\output\Ask.php	/^        $matches    = $autocomplete;$/;"	v
matches	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $matches = array();$/;"	v
max	.\thinkphp\library\think\Validate.php	/^    protected function max($value, $rule)$/;"	f
max	.\thinkphp\library\think\db\Query.php	/^    public function max($field, $force = true)$/;"	f
max	.\vendor\topthink\think-mongo\src\Query.php	/^    public function max($field)$/;"	f
maxNameLength	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^                $maxNameLength = max($maxNameLength, strlen($migration->getName()));$/;"	v
maxNameLength	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^            $maxNameLength = $versions ? max(array_map(function ($version) {$/;"	v
maxTimeMS	.\vendor\topthink\think-mongo\src\Query.php	/^    public function maxTimeMS($maxTimeMS)$/;"	f
maxTries	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $this->maxTries = $tries;$/;"	v
maxTries	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected $maxTries = 0;$/;"	v
maxTries	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    public function process(Job $job, $maxTries = 0, $delay = 0)$/;"	v
max_delay	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $max_delay = pow(4, $retry) * 100 * 1000;$/;"	v
max_int_length	.\extend\php-jwt-master\src\JWT.php	/^            $max_int_length = strlen((string) PHP_INT_MAX) - 1;$/;"	v
max_int_length	.\vendor\firebase\php-jwt\src\JWT.php	/^            $max_int_length = strlen((string) PHP_INT_MAX) - 1;$/;"	v
maxx	.\vendor\topthink\think-image\src\Image.php	/^        $maxx = max($info[0], $info[2], $info[4], $info[6]);$/;"	v
maxy	.\vendor\topthink\think-image\src\Image.php	/^        $maxy = max($info[1], $info[3], $info[5], $info[7]);$/;"	v
mediumInteger	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function mediumInteger($name)$/;"	f
mediumText	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function mediumText($name)$/;"	f
mem	.\thinkphp\library\think\Debug.php	/^    protected static $mem = [];$/;"	v
mem	.\thinkphp\library\think\debug\Console.php	/^        $mem     = number_format((memory_get_usage() - THINK_START_MEM) \/ 1024, 2);$/;"	v
mem	.\thinkphp\library\think\debug\Html.php	/^        $mem     = number_format((memory_get_usage() - THINK_START_MEM) \/ 1024, 2);$/;"	v
memory	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^        $memory = $input->getOption('memory');$/;"	v
memory	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        $memory = $input->getOption('memory');$/;"	v
memoryExceeded	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function memoryExceeded($memoryLimit)$/;"	f
memoryExceeded	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function memoryExceeded($memoryLimit)$/;"	f
memory_str	.\thinkphp\library\think\log\driver\File.php	/^                $memory_str = ' [内存消耗：' . $memory_use . 'kb]';$/;"	v
memory_str	.\thinkphp\library\think\log\driver\Socket.php	/^            $memory_str = ' [内存消耗：' . $memory_use . 'kb]';$/;"	v
memory_use	.\thinkphp\library\think\log\driver\File.php	/^                $memory_use = number_format((memory_get_usage() - THINK_START_MEM) \/ 1024, 2);$/;"	v
memory_use	.\thinkphp\library\think\log\driver\Socket.php	/^            $memory_use = number_format((memory_get_usage() - THINK_START_MEM) \/ 1024, 2);$/;"	v
merge	.\thinkphp\library\think\Collection.php	/^    public function merge($items)$/;"	f
merge	.\thinkphp\library\think\Route.php	/^        $merge = !empty($option['merge_extra_vars']);$/;"	v
mergeConsoleDefinition	.\thinkphp\library\think\console\Command.php	/^    public function mergeConsoleDefinition($mergeArgs = true)$/;"	f
message	.\thinkphp\helper.php	/^    function abort($code, $message = null, $header = [])$/;"	v
message	.\thinkphp\library\think\Console.php	/^            $message = sprintf($/;"	v
message	.\thinkphp\library\think\Console.php	/^            $message = sprintf('Command "%s" is not defined.', $name);$/;"	v
message	.\thinkphp\library\think\Controller.php	/^    protected function validate($data, $validate, $message = [], $batch = false, $callback = null)$/;"	v
message	.\thinkphp\library\think\Validate.php	/^                        $message = Lang::get(substr($message, 2, -1));$/;"	v
message	.\thinkphp\library\think\Validate.php	/^                    $message = $msg[$i];$/;"	v
message	.\thinkphp\library\think\Validate.php	/^                    $message = $this->getRuleMsg($field, $title, $info, $rule);$/;"	v
message	.\thinkphp\library\think\Validate.php	/^            $this->message = array_merge($this->message, $name);$/;"	v
message	.\thinkphp\library\think\Validate.php	/^        $this->message = array_merge($this->message, $message);$/;"	v
message	.\thinkphp\library\think\Validate.php	/^    protected $message = [];$/;"	v
message	.\thinkphp\library\think\Validate.php	/^    public function message($name, $message = '')$/;"	f
message	.\thinkphp\library\think\Validate.php	/^    public function message($name, $message = '')$/;"	v
message	.\thinkphp\library\think\Validate.php	/^    public static function make($rules = [], $message = [], $field = [])$/;"	v
message	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" could not be parsed as PHP, it may be binary or corrupted';$/;"	v
message	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" does not exist, check your classmap definitions';$/;"	v
message	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" is not readable, check its permissions';$/;"	v
message	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $message = $this->formatter->format($message);$/;"	v
message	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $message = strip_tags($this->formatter->format($message));$/;"	v
message	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^        $this->message = $message;$/;"	v
message	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^        $this->message = $message;$/;"	v
message	.\thinkphp\library\think\exception\ClassNotFoundException.php	/^        $this->message = $message;$/;"	v
message	.\thinkphp\library\think\exception\DbException.php	/^        $this->message = $message;$/;"	v
message	.\thinkphp\library\think\exception\ErrorException.php	/^        $this->message  = $message;$/;"	v
message	.\thinkphp\library\think\exception\Handle.php	/^            $message = Lang::get($message);$/;"	v
message	.\thinkphp\library\think\exception\Handle.php	/^            $message = Lang::has($name) ? Lang::get($name) . ':' . substr(strstr($message, ','), 1) : $message;$/;"	v
message	.\thinkphp\library\think\exception\Handle.php	/^            $message = Lang::has($name) ? Lang::get($name) . strstr($message, ':') : $message;$/;"	v
message	.\thinkphp\library\think\exception\Handle.php	/^        $message = $exception->getMessage();$/;"	v
message	.\thinkphp\library\think\exception\HttpException.php	/^    public function __construct($statusCode, $message = null, \\Exception $previous = null, array $headers = [], $code = 0)$/;"	v
message	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^        $this->message  = $message;$/;"	v
message	.\thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Fatal error: ' . $e->getMessage();$/;"	v
message	.\thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Parse error: ' . $e->getMessage();$/;"	v
message	.\thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Type error: ' . $e->getMessage();$/;"	v
message	.\thinkphp\library\think\exception\ValidateException.php	/^        $this->message = is_array($error) ? implode("\\n\\r", $error) : $error;$/;"	v
message	.\thinkphp\library\think\log\driver\File.php	/^                $message = '[ info ] ' . $current_uri . $time_str . $memory_str . $file_load . "\\r\\n" . $message;$/;"	v
message	.\thinkphp\library\think\log\driver\File.php	/^            $message = "---------------------------------------------------------------\\r\\n[{$now}] {$ip} {$method} {$uri}\\r\\n" . $message;$/;"	v
message	.\thinkphp\library\think\log\driver\File.php	/^            $message = "[{$now}]" . $message;$/;"	v
message	.\thinkphp\library\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	v
message	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $message    = [$/;"	v
messages	.\extend\php-jwt-master\src\JWT.php	/^        $messages = array($/;"	v
messages	.\thinkphp\library\think\console\output\driver\Buffer.php	/^        $messages = (array) $messages;$/;"	v
messages	.\thinkphp\library\think\console\output\driver\Console.php	/^            $messages   = ['', ''];$/;"	v
messages	.\thinkphp\library\think\console\output\driver\Console.php	/^        $messages = (array) $messages;$/;"	v
messages	.\vendor\firebase\php-jwt\src\JWT.php	/^        $messages = array($/;"	v
method	.\thinkphp\helper.php	/^                $method = 'param';$/;"	v
method	.\thinkphp\helper.php	/^            $method = 'param';$/;"	v
method	.\thinkphp\library\think\App.php	/^                    $method = new \\ReflectionMethod($className, 'invoke');$/;"	v
method	.\thinkphp\library\think\Controller.php	/^            foreach ($this->beforeActionList as $method => $options) {$/;"	v
method	.\thinkphp\library\think\Hook.php	/^            $method = ($tag && is_callable([$obj, $method])) ? $method : 'run';$/;"	v
method	.\thinkphp\library\think\Hook.php	/^        $method = Loader::parseName($tag, 1, false);$/;"	v
method	.\thinkphp\library\think\Model.php	/^                    $method = Loader::parseName($name, 1, false);$/;"	v
method	.\thinkphp\library\think\Model.php	/^                $method = 'scope' . trim($scope);$/;"	v
method	.\thinkphp\library\think\Model.php	/^            $method                = Loader::parseName($relation, 1, false);$/;"	v
method	.\thinkphp\library\think\Model.php	/^            $method = 'scope' . $method;$/;"	v
method	.\thinkphp\library\think\Model.php	/^            $method = 'set' . Loader::parseName($name, 1) . 'Attr';$/;"	v
method	.\thinkphp\library\think\Model.php	/^        $method = 'get' . Loader::parseName($name, 1) . 'Attr';$/;"	v
method	.\thinkphp\library\think\Request.php	/^                $this->method = IS_CLI ? 'GET' : (isset($this->server['REQUEST_METHOD']) ? $this->server['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']);$/;"	v
method	.\thinkphp\library\think\Request.php	/^                $this->method = strtoupper($_POST[Config::get('var_method')]);$/;"	v
method	.\thinkphp\library\think\Request.php	/^                $this->method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);$/;"	v
method	.\thinkphp\library\think\Request.php	/^            $method = $this->method(true);$/;"	v
method	.\thinkphp\library\think\Request.php	/^    protected $method;$/;"	v
method	.\thinkphp\library\think\Request.php	/^    public function method($method = false)$/;"	f
method	.\thinkphp\library\think\Request.php	/^    public static function create($uri, $method = 'GET', $params = [], $cookie = [], $files = [], $server = [], $content = null)$/;"	v
method	.\thinkphp\library\think\Route.php	/^            $method           = strpos($route, '@') ? explode('@', $route) : $route;$/;"	v
method	.\thinkphp\library\think\Route.php	/^        $method           = Request::instance()->method();$/;"	v
method	.\thinkphp\library\think\Route.php	/^        $method = !empty($array[1]) ? $array[1] : Config::get('default_action');$/;"	v
method	.\thinkphp\library\think\Route.php	/^        $method = strtolower($request->method());$/;"	v
method	.\thinkphp\library\think\Route.php	/^    public static function checkDomain($request, &$currentRules, $method = 'get')$/;"	v
method	.\thinkphp\library\think\Route.php	/^    public static function miss($route, $method = '*', $option = [])$/;"	v
method	.\thinkphp\library\think\Template.php	/^                            $method = array_shift($vars);$/;"	v
method	.\thinkphp\library\think\Validate.php	/^        $method = Request::instance()->method();$/;"	v
method	.\thinkphp\library\think\Validate.php	/^    protected function method($value, $rule)$/;"	f
method	.\thinkphp\library\think\View.php	/^            $method = $renderContent ? 'display' : 'fetch';$/;"	v
method	.\thinkphp\library\think\controller\Rest.php	/^            $method = $this->restDefaultMethod;$/;"	v
method	.\thinkphp\library\think\controller\Rest.php	/^        $method = strtolower($request->method());$/;"	v
method	.\thinkphp\library\think\controller\Rest.php	/^        $this->method = $method;$/;"	v
method	.\thinkphp\library\think\controller\Rest.php	/^    protected $method; \/\/ 当前请求类型$/;"	v
method	.\thinkphp\library\think\log\driver\File.php	/^            $method  = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'CLI';$/;"	v
method	.\thinkphp\library\think\template\TagLib.php	/^                    $method = 'tag' . $name;$/;"	v
method	.\thinkphp\library\think\template\TagLib.php	/^                $method = 'tag' . $name;$/;"	v
method	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^            $method = 'set' . ucfirst($option);$/;"	v
method	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^                $method = 'set' . ucfirst($option);$/;"	v
method	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^            $method = 'set' . ucfirst($option);$/;"	v
methodName	.\thinkphp\library\think\App.php	/^            $methodName = $reflect->getName();$/;"	v
methodPrefix	.\thinkphp\library\think\Route.php	/^    private static $methodPrefix = [$/;"	v
middle	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->middle    = basename(str_replace('\\\\', '\/', $table));$/;"	v
middle	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->middle = $table;$/;"	v
middle	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $middle;$/;"	v
migrate	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^    protected function migrate($version = null)$/;"	f
migrateExpiredJobs	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function migrateExpiredJobs($from, $to, $attempt = true)$/;"	f
migrateToDateTime	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^    public function migrateToDateTime(\\DateTime $dateTime)$/;"	f
migrated	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function migrated(MigrationInterface $migration, $direction, $startTime, $endTime);$/;"	f
migrated	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function migrated(MigrationInterface $migration, $direction, $startTime, $endTime)$/;"	f
migrated	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function migrated(MigrationInterface $migration, $direction, $startTime, $endTime)$/;"	f
migration	.\vendor\topthink\think-migration\src\command\Migrate.php	/^                    $migration = new $class($version, $this->input, $this->output);$/;"	v
migration	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^                $migration = $earlierVersion;$/;"	v
migration	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^                $migration = 0;$/;"	v
migration	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^            $migration = max($outstandingMigrations);$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\Migrate.php	/^            $this->migrations = $versions;$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\Migrate.php	/^    protected $migrations;$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^        $migrations = $this->getMigrations();$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $migrations = $this->getMigrations();$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $migrations = $this->getMigrations();$/;"	v
migrations	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^        $migrations = [];$/;"	v
mime	.\thinkphp\library\think\File.php	/^        $mime = is_string($mime) ? explode(',', $mime) : $mime;$/;"	v
mime	.\vendor\topthink\think-image\src\Image.php	/^    public function mime()$/;"	f
mimeType	.\thinkphp\library\think\Request.php	/^            $this->mimeType = array_merge($this->mimeType, $type);$/;"	v
mimeType	.\thinkphp\library\think\Request.php	/^    protected $mimeType = [$/;"	v
mimeType	.\thinkphp\library\think\Request.php	/^    public function mimeType($type, $val = '')$/;"	f
min	.\thinkphp\library\think\Validate.php	/^    protected function min($value, $rule)$/;"	f
min	.\thinkphp\library\think\db\Query.php	/^    public function min($field, $force = true)$/;"	f
min	.\vendor\topthink\think-mongo\src\Query.php	/^    public function min($field)$/;"	f
minx	.\vendor\topthink\think-image\src\Image.php	/^        $minx = min($info[0], $info[2], $info[4], $info[6]);$/;"	v
miny	.\vendor\topthink\think-image\src\Image.php	/^        $miny = min($info[1], $info[3], $info[5], $info[7]);$/;"	v
miss	.\thinkphp\library\think\Route.php	/^    public static function miss($route, $method = '*', $option = [])$/;"	f
missing	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^                foreach ($versions as $missing => $version) {$/;"	v
missingClasses	.\vendor\composer\ClassLoader.php	/^    private $missingClasses = array();$/;"	v
mod	.\thinkphp\library\think\template\taglib\Cx.php	/^                $mod = (int) $tag['mod'];$/;"	v
mod	.\thinkphp\library\think\template\taglib\Cx.php	/^        $mod    = isset($tag['mod']) ? $tag['mod'] : '2';$/;"	v
mod	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    public function __construct($src = null, $mod = 'url')$/;"	v
mode	.\thinkphp\library\think\File.php	/^    public function __construct($filename, $mode = 'r')$/;"	v
mode	.\thinkphp\library\think\console\Command.php	/^    public function addArgument($name, $mode = null, $description = '', $default = null)$/;"	v
mode	.\thinkphp\library\think\console\input\Argument.php	/^            $mode = self::OPTIONAL;$/;"	v
mode	.\thinkphp\library\think\console\input\Argument.php	/^        $this->mode        = $mode;$/;"	v
mode	.\thinkphp\library\think\console\input\Argument.php	/^    private $mode;$/;"	v
mode	.\thinkphp\library\think\console\input\Argument.php	/^    public function __construct($name, $mode = null, $description = '', $default = null)$/;"	v
mode	.\thinkphp\library\think\console\input\Option.php	/^            $mode = self::VALUE_NONE;$/;"	v
mode	.\thinkphp\library\think\console\input\Option.php	/^        $this->mode        = $mode;$/;"	v
mode	.\thinkphp\library\think\console\input\Option.php	/^    private $mode;$/;"	v
model	.\thinkphp\helper.php	/^    function model($name = '', $layer = 'model', $appendSuffix = false)$/;"	f
model	.\thinkphp\library\think\Loader.php	/^                $model = new $class();$/;"	v
model	.\thinkphp\library\think\Loader.php	/^            $model = new $class();$/;"	v
model	.\thinkphp\library\think\Loader.php	/^    public static function model($name = '', $layer = 'model', $appendSuffix = false, $common = 'common')$/;"	f
model	.\thinkphp\library\think\Model.php	/^                $model = $this->getAttr($name);$/;"	v
model	.\thinkphp\library\think\Model.php	/^            $model = $this->getRelationData($this->$relation());$/;"	v
model	.\thinkphp\library\think\Model.php	/^            $model = $this->relation[$relation];$/;"	v
model	.\thinkphp\library\think\Model.php	/^            $model = implode('\\\\', $path);$/;"	v
model	.\thinkphp\library\think\Model.php	/^        $model      = $this->parseModel($model);$/;"	v
model	.\thinkphp\library\think\Model.php	/^        $model  = new static();$/;"	v
model	.\thinkphp\library\think\Model.php	/^        $model = $all ? '*' : $this->class;$/;"	v
model	.\thinkphp\library\think\Model.php	/^        $model = $this->parseModel($model);$/;"	v
model	.\thinkphp\library\think\Model.php	/^        $model = new static();$/;"	v
model	.\thinkphp\library\think\Route.php	/^                        $model     = $val;$/;"	v
model	.\thinkphp\library\think\Route.php	/^                        $model     = $val[0];$/;"	v
model	.\thinkphp\library\think\db\Query.php	/^                    $model = $this->model->newInstance($result);$/;"	v
model	.\thinkphp\library\think\db\Query.php	/^            $model    = $class->$relation();$/;"	v
model	.\thinkphp\library\think\db\Query.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\db\Query.php	/^    protected $model;$/;"	v
model	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^        $this->model   = $model;$/;"	v
model	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    protected $model;$/;"	v
model	.\thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function __construct($message, $model = '', array $config = [])$/;"	v
model	.\thinkphp\library\think\model\Relation.php	/^    protected $model;$/;"	v
model	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $model = new $this->model;$/;"	v
model	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $model = $this->model;$/;"	v
model	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\HasMany.php	/^        $model                   = new $this->model;$/;"	v
model	.\thinkphp\library\think\model\relation\HasMany.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	.\thinkphp\library\think\model\relation\HasMany.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\HasOne.php	/^        $model      = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	.\thinkphp\library\think\model\relation\HasOne.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->model      = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $model                  = new $this->model;$/;"	v
model	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->model     = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $model                  = new $this->model;$/;"	v
model	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->model     = $model;$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^                $model = $this->parseModel($key);$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^            $model = $this->alias[$model];$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^            $model = implode('\\\\', $path);$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $model     = $this->parseModel($this->parent->$morphType);$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $model = $this->parseModel($result->{$this->morphType});$/;"	v
model	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $model = $this->parseModel($this->parent->$morphType);$/;"	v
model	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $model = new $this->model;$/;"	v
model	.\thinkphp\library\traits\model\SoftDelete.php	/^        $model = new static();$/;"	v
model	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function setQuery($query, $model = 'db')$/;"	v
model	.\vendor\topthink\think-mongo\src\Query.php	/^                    $model = new $modelName($result);$/;"	v
model	.\vendor\topthink\think-mongo\src\Query.php	/^                $model  = $this->model;$/;"	v
model	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->model      = $model;$/;"	v
model	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $model;$/;"	v
modelName	.\vendor\topthink\think-mongo\src\Query.php	/^            $modelName = $this->model;$/;"	v
modelRelation	.\thinkphp\library\think\Model.php	/^                        $modelRelation = $this->$relation();$/;"	v
modelRelation	.\thinkphp\library\think\Model.php	/^                $modelRelation = $this->$relation();$/;"	v
modelTable	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $modelTable   = $this->parent->getTable();$/;"	v
modifiers	.\vendor\topthink\think-mongo\src\Query.php	/^        $modifiers = empty($options['modifiers']) ? [] : $options['modifiers'];$/;"	v
modifiers	.\vendor\topthink\think-mongo\src\Query.php	/^    public function modifiers($modifiers)$/;"	f
module	.\thinkphp\library\think\App.php	/^                    $module    = $bindModule;$/;"	v
module	.\thinkphp\library\think\App.php	/^            $module    = strip_tags(strtolower($result[0] ?: $config['default_module']));$/;"	v
module	.\thinkphp\library\think\App.php	/^            $module = '';$/;"	v
module	.\thinkphp\library\think\App.php	/^        $module = $module ? $module . DS : '';$/;"	v
module	.\thinkphp\library\think\App.php	/^    public static function module($result, $config, $convert = null)$/;"	f
module	.\thinkphp\library\think\Build.php	/^            $module = $module ? $module . '\\\\' : '';$/;"	v
module	.\thinkphp\library\think\Build.php	/^            foreach ($build as $module => $list) {$/;"	v
module	.\thinkphp\library\think\Build.php	/^        $module = $module ?: '';$/;"	v
module	.\thinkphp\library\think\Build.php	/^    public static function module($module = '', $list = [], $namespace = 'app', $suffix = false)$/;"	f
module	.\thinkphp\library\think\Config.php	/^            $module = Request::instance()->module();$/;"	v
module	.\thinkphp\library\think\Loader.php	/^                $module = Request::instance()->module();$/;"	v
module	.\thinkphp\library\think\Loader.php	/^            $module = Request::instance()->module();$/;"	v
module	.\thinkphp\library\think\Loader.php	/^        $module = '.' != $info['dirname'] ? $info['dirname'] : Request::instance()->controller();$/;"	v
module	.\thinkphp\library\think\Request.php	/^            $this->module = $module;$/;"	v
module	.\thinkphp\library\think\Request.php	/^    protected $module;$/;"	v
module	.\thinkphp\library\think\Request.php	/^    public function module($module = null)$/;"	f
module	.\thinkphp\library\think\Route.php	/^            $module = Config::get('app_multi_module') ? array_shift($path) : null;$/;"	v
module	.\thinkphp\library\think\Route.php	/^            if (empty($module) || isset($bind) && $module == $bind) {$/;"	v
module	.\thinkphp\library\think\Route.php	/^        $module           = Config::get('app_multi_module') && !empty($path) ? array_pop($path) : null;$/;"	v
module	.\thinkphp\library\think\Template.php	/^                $module = isset($module) ? $module : Request::instance()->module();$/;"	v
module	.\thinkphp\library\think\Url.php	/^                        $module    = '';$/;"	v
module	.\thinkphp\library\think\Url.php	/^                        $module = '';$/;"	v
module	.\thinkphp\library\think\Url.php	/^                $module     = empty($path) ? $module : array_pop($path) . '\/';$/;"	v
module	.\thinkphp\library\think\Url.php	/^            $module  = $request->module();$/;"	v
module	.\thinkphp\library\think\Url.php	/^            $module = $module ? $module . '\/' : '';$/;"	v
module	.\thinkphp\library\think\console\command\Make.php	/^                $module = 'common';$/;"	v
module	.\thinkphp\library\think\console\command\Make.php	/^            $module = null;$/;"	v
module	.\thinkphp\library\think\console\command\optimize\Config.php	/^            $module = $input->getArgument('module') . DS;$/;"	v
module	.\thinkphp\library\think\console\command\optimize\Config.php	/^            $module = '';$/;"	v
module	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $module = $input->getOption('module');$/;"	v
module	.\thinkphp\library\think\view\driver\Php.php	/^            $module = isset($module) ? $module : $request->module();$/;"	v
module	.\thinkphp\library\think\view\driver\Think.php	/^            $module = isset($module) ? $module : $request->module();$/;"	v
module	.\vendor\topthink\think-queue\src\queue\Job.php	/^                $module = '';$/;"	v
modulePath	.\thinkphp\library\think\App.php	/^    public static $modulePath;$/;"	v
modulePath	.\thinkphp\library\think\Build.php	/^            $modulePath = APP_PATH . $module . DS;$/;"	v
mongo	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->mongo = $this->linkRead;$/;"	v
mongo	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->mongo = $this->linkWrite;$/;"	v
mongo	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->mongo = $this->connect();$/;"	v
mongo	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->mongo     = null;$/;"	v
mongo	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $mongo; \/\/ MongoDb Object$/;"	v
month	.\vendor\topthink\think-helper\src\Time.php	/^    public static function month($everyDay = false)$/;"	f
morph	.\thinkphp\library\think\Model.php	/^            $morph = $relation;$/;"	v
morph	.\thinkphp\library\think\Model.php	/^            $morph = Loader::parseName($trace[1]['function']);$/;"	v
morph	.\thinkphp\library\think\Model.php	/^    public function morphMany($model, $morph = null, $type = '')$/;"	v
morph	.\thinkphp\library\think\Model.php	/^    public function morphOne($model, $morph = null, $type = '')$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^                $morphKey  => ['in', $range],$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^                $this->morphKey  => $result->$pk,$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $this->morphKey  => [$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected $morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $morphKey  => ['in', $range],$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $this->morphKey  => $pk,$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected $morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected $morphKey;$/;"	v
morphMany	.\thinkphp\library\think\Model.php	/^    public function morphMany($model, $morph = null, $type = '')$/;"	f
morphOne	.\thinkphp\library\think\Model.php	/^    public function morphOne($model, $morph = null, $type = '')$/;"	f
morphTo	.\thinkphp\library\think\Model.php	/^    public function morphTo($morph = null, $alias = [])$/;"	f
morphType	.\thinkphp\library\think\Model.php	/^            $morphType  = $morph . '_type';$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^                $morphType => $type,$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^                $this->morphType => $this->type,$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $this->morphType => $this->type,$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $morphType = $this->morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->morphType = $morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected $morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $morphType => $type,$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $this->morphType => $this->type,$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $morphType = $this->morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->morphType = $morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected $morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $morphType = $this->morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->morphType = $morphType;$/;"	v
morphType	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected $morphType;$/;"	v
move	.\thinkphp\library\think\File.php	/^    public function move($path, $savename = true, $replace = true)$/;"	f
msg	.\thinkphp\library\think\File.php	/^            $msg  = $this->error;$/;"	v
msg	.\thinkphp\library\think\Model.php	/^    public function validate($rule = true, $msg = [], $batch = false)$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^                    $msg = [];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^                    $msg = is_string($item[2]) ? explode('|', $item[2]) : $item[2];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^                $msg  = [];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute . '.' . $type];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute][$type];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = $title . Lang::get('not conform to the rules');$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = Lang::get($msg);$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = Lang::get(substr($msg, 2, -1));$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = self::$typeMsg[$type];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = self::$typeMsg['require'];$/;"	v
msg	.\thinkphp\library\think\Validate.php	/^            $msg = str_replace($/;"	v
msg	.\thinkphp\library\think\Validate.php	/^    public static function setTypeMsg($type, $msg = null)$/;"	v
msg	.\thinkphp\library\think\debug\Console.php	/^                    $msg    = json_encode($m);$/;"	v
msg	.\thinkphp\library\think\debug\Console.php	/^                    $msg    = str_replace("\\n", '\\n', $m);$/;"	v
msg	.\thinkphp\library\think\debug\Console.php	/^                    $msg    = str_replace("\\n", '\\n', json_encode($m));$/;"	v
msg	.\thinkphp\library\think\log\driver\File.php	/^                    $msg = var_export($msg, true);$/;"	v
msg	.\thinkphp\library\think\log\driver\Socket.php	/^                    $msg = var_export($msg, true);$/;"	v
msg	.\thinkphp\library\think\log\driver\Socket.php	/^        $msg     = @json_encode($logs);$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwibmFtZSI6ImZvbyJ9.Q4Kee9E8o0Xfo4ADXvYA8t7dN_X_bU9K5w6tXuiSjlUxx";$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = 'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.Iio6aHR0cDovL2FwcGxpY2F0aW9uL2NsaWNreT9ibGFoPTEuMjMmZi5vbz00NTYgQUMwMDAgMTIzIg.E_U8X2YpMT5K1cEiT_3-IvBYfrdIFIeVYeOqre_Z5Cg';$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = JWT::encode('abc', $keys['1'], 'HS256', '1');$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = JWT::encode('abc', $pkey, 'RS256');$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = JWT::encode('abc', $privKey, 'RS256');$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = JWT::encode('abc', 'my_key');$/;"	v
msg	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $msg = JWT::encode('abc', 'my_key', 'HS256', null, array('cty' => 'test-eit;v=1'));$/;"	v
mtime	.\thinkphp\library\think\cache\driver\Lite.php	/^            $mtime = filemtime($filename);$/;"	v
multiAggregate	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function multiAggregate($options, $extra)$/;"	f
multiAggregate	.\vendor\topthink\think-mongo\src\Query.php	/^    public function multiAggregate($aggregate, $groupBy)$/;"	f
multiConnect	.\thinkphp\library\think\db\Connection.php	/^    protected function multiConnect($master = false)$/;"	f
multiConnect	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function multiConnect($master = false)$/;"	f
multiselect	.\thinkphp\library\think\console\output\question\Choice.php	/^        $multiselect  = $this->multiselect;$/;"	v
multiselect	.\thinkphp\library\think\console\output\question\Choice.php	/^        $this->multiselect = $multiselect;$/;"	v
multiselect	.\thinkphp\library\think\console\output\question\Choice.php	/^    private $multiselect  = false;$/;"	v
multiselectChoices	.\thinkphp\library\think\console\output\question\Choice.php	/^            $multiselectChoices = [];$/;"	v
must	.\thinkphp\library\think\App.php	/^            $must   = !is_null(self::$routeMust) ? self::$routeMust : $config['url_route_must'];$/;"	v
must	.\thinkphp\library\think\App.php	/^    public static function route($route, $must = false)$/;"	v
must	.\thinkphp\library\think\template\TagLib.php	/^                $must = explode(',', $tag['must']);$/;"	v
mustRun	.\thinkphp\library\think\Process.php	/^    public function mustRun($callback = null)$/;"	f
n	.\thinkphp\library\think\process\pipes\Unix.php	/^        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {$/;"	v
n	.\thinkphp\library\think\process\pipes\Windows.php	/^        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {$/;"	v
name	.\thinkphp\base.php	/^        $name = ENV_PREFIX . strtoupper($key);$/;"	v
name	.\thinkphp\library\think\App.php	/^                $name = pathinfo($request->baseFile(), PATHINFO_FILENAME);$/;"	v
name	.\thinkphp\library\think\App.php	/^        $name  = $param->getName();$/;"	v
name	.\thinkphp\library\think\Cache.php	/^            $name = md5(serialize($options));$/;"	v
name	.\thinkphp\library\think\Config.php	/^                $name = explode('.', $name, 2);$/;"	v
name	.\thinkphp\library\think\Config.php	/^            $name = strtolower($name);$/;"	v
name	.\thinkphp\library\think\Config.php	/^        $name    = explode('.', $name, 2);$/;"	v
name	.\thinkphp\library\think\Config.php	/^        $name = explode('.', $name, 2);$/;"	v
name	.\thinkphp\library\think\Config.php	/^    public static function load($file, $name = '', $range = '')$/;"	v
name	.\thinkphp\library\think\Console.php	/^                $name  = 'help';$/;"	v
name	.\thinkphp\library\think\Console.php	/^            $name  = $this->defaultCommand;$/;"	v
name	.\thinkphp\library\think\Console.php	/^        $name = $this->getCommandName($input);$/;"	v
name	.\thinkphp\library\think\Console.php	/^        $this->name    = $name;$/;"	v
name	.\thinkphp\library\think\Console.php	/^        $this->name = $name;$/;"	v
name	.\thinkphp\library\think\Console.php	/^        foreach ($this->commands as $name => $command) {$/;"	v
name	.\thinkphp\library\think\Console.php	/^    private $name;$/;"	v
name	.\thinkphp\library\think\Cookie.php	/^        $name   = $prefix . $name;$/;"	v
name	.\thinkphp\library\think\Cookie.php	/^        $name = $config['prefix'] . $name;$/;"	v
name	.\thinkphp\library\think\Db.php	/^                $name = md5(serialize($config));$/;"	v
name	.\thinkphp\library\think\Db.php	/^            $name = md5(serialize($config));$/;"	v
name	.\thinkphp\library\think\Db.php	/^    public static function connect($config = [], $name = false)$/;"	v
name	.\thinkphp\library\think\Loader.php	/^            $name = preg_replace_callback('\/_([a-zA-Z])\/', function ($match) {$/;"	v
name	.\thinkphp\library\think\Loader.php	/^            \/\/ PEAR-like class name$/;"	c
name	.\thinkphp\library\think\Loader.php	/^            \/\/ namespace class name$/;"	c
name	.\thinkphp\library\think\Loader.php	/^        $name = $name ?: Config::get('default_validate');$/;"	v
name	.\thinkphp\library\think\Loader.php	/^    public static function db($config = [], $name = false)$/;"	v
name	.\thinkphp\library\think\Model.php	/^                $name     = $relation;$/;"	v
name	.\thinkphp\library\think\Model.php	/^                $name  = is_numeric($key) ? $name : $key;$/;"	v
name	.\thinkphp\library\think\Model.php	/^                $name = Loader::parseName($relation) . '_count';$/;"	v
name	.\thinkphp\library\think\Model.php	/^                $name = is_string($info) ? $info : $this->name;$/;"	v
name	.\thinkphp\library\think\Model.php	/^                $this->name = substr($this->name, 0, -strlen($suffix));$/;"	v
name	.\thinkphp\library\think\Model.php	/^                foreach ($relation as $name => $val) {$/;"	v
name	.\thinkphp\library\think\Model.php	/^            $name       = str_replace('\\\\', '\/', $this->class);$/;"	v
name	.\thinkphp\library\think\Model.php	/^            $name = basename(str_replace('\\\\', '\/', $name));$/;"	v
name	.\thinkphp\library\think\Model.php	/^            $name = explode(',', $name);$/;"	v
name	.\thinkphp\library\think\Model.php	/^            $this->name = basename($name);$/;"	v
name	.\thinkphp\library\think\Model.php	/^        $name       = Loader::parseName(basename(str_replace('\\\\', '\/', $model)));$/;"	v
name	.\thinkphp\library\think\Model.php	/^        foreach ($relation as $name => $val) {$/;"	v
name	.\thinkphp\library\think\Model.php	/^    protected $name;$/;"	v
name	.\thinkphp\library\think\Request.php	/^            $name = $this->action ?: '';$/;"	v
name	.\thinkphp\library\think\Request.php	/^            $name = explode(',', $name);$/;"	v
name	.\thinkphp\library\think\Request.php	/^        $name = (string) $name;$/;"	v
name	.\thinkphp\library\think\Request.php	/^        $name = str_replace('_', '-', strtolower($name));$/;"	v
name	.\thinkphp\library\think\Request.php	/^        foreach ($options as $name => $item) {$/;"	v
name	.\thinkphp\library\think\Request.php	/^    public function input($data = [], $name = '', $default = null, $filter = '')$/;"	v
name	.\thinkphp\library\think\Response.php	/^            foreach ($this->header as $name => $val) {$/;"	v
name	.\thinkphp\library\think\Route.php	/^                        $name      = substr($name, 0, -1);$/;"	v
name	.\thinkphp\library\think\Route.php	/^                        $name     = substr($name, 0, -1);$/;"	v
name	.\thinkphp\library\think\Route.php	/^                $name       = substr($val, 1);$/;"	v
name	.\thinkphp\library\think\Route.php	/^                $name = substr($val, 1);$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name   = isset($option['name']) ? $option['name'] : '';$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name  = strtolower($module . '\/' . Loader::parseName($controller, 1) . '\/' . $action);$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name = $currentGroup . ($name ? '\/' . ltrim($name, '\/') : '');$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name = $route;$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name = $rule[0];$/;"	v
name	.\thinkphp\library\think\Route.php	/^            $name = strtolower($name);$/;"	v
name	.\thinkphp\library\think\Route.php	/^    public static function name($name = '', $value = null)$/;"	f
name	.\thinkphp\library\think\Template.php	/^                                    $name    = "$fun($args[1])";$/;"	v
name	.\thinkphp\library\think\Template.php	/^                                    $name = "$fun($name)";$/;"	v
name	.\thinkphp\library\think\Template.php	/^                                    $name = "$fun($name,$args[1])";$/;"	v
name	.\thinkphp\library\think\Template.php	/^                            $name  = $array[0];$/;"	v
name	.\thinkphp\library\think\Template.php	/^                            $name = '(' . $name . ' ?: ' . $args[1] . ')';$/;"	v
name	.\thinkphp\library\think\Template.php	/^                            $name = '(isset(' . $name . ') && (' . $name . ' !== \\'\\')?' . $name . ':' . $args[1] . ')';$/;"	v
name	.\thinkphp\library\think\Template.php	/^                        $name = 'name';$/;"	v
name	.\thinkphp\library\think\Template.php	/^                    $name = 'file';$/;"	v
name	.\thinkphp\library\think\Template.php	/^                foreach ($baseBlocks as $name => $val) {$/;"	v
name	.\thinkphp\library\think\Template.php	/^            $name = array_shift($varArray);$/;"	v
name	.\thinkphp\library\think\Template.php	/^    public function parseAttr($str, $name = null)$/;"	v
name	.\thinkphp\library\think\Url.php	/^            $name = substr($url, 1, $pos - 1);$/;"	v
name	.\thinkphp\library\think\cache\driver\File.php	/^            $name = $this->options['prefix'] . DS . $name;$/;"	v
name	.\thinkphp\library\think\cache\driver\File.php	/^            $name = substr($name, 0, 2) . DS . substr($name, 2);$/;"	v
name	.\thinkphp\library\think\cache\driver\File.php	/^        $name = md5($name);$/;"	v
name	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $name = sqlite_escape_string($tag);$/;"	v
name	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $name   = $this->getCacheKey($name);$/;"	v
name	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $name  = $this->getCacheKey($name);$/;"	v
name	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $name = $this->getCacheKey($name);$/;"	v
name	.\thinkphp\library\think\console\Command.php	/^        $name = $this->name;$/;"	v
name	.\thinkphp\library\think\console\Command.php	/^        $this->name = $name;$/;"	v
name	.\thinkphp\library\think\console\Command.php	/^    private $name;$/;"	v
name	.\thinkphp\library\think\console\Input.php	/^        $name = substr($token, 1);$/;"	v
name	.\thinkphp\library\think\console\Input.php	/^        $name = substr($token, 2);$/;"	v
name	.\thinkphp\library\think\console\command\Make.php	/^            $name = str_replace('\/', '\\\\', $name);$/;"	v
name	.\thinkphp\library\think\console\command\Make.php	/^        $name = str_replace(App::$namespace . '\\\\', '', $name);$/;"	v
name	.\thinkphp\library\think\console\command\Make.php	/^        $name = trim($input->getArgument('name'));$/;"	v
name	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                    $name = 'xhp' . substr(str_replace(['-', ':'], ['_', '__'], $name), 1);$/;"	v
name	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                    $name = rtrim($name, ':');$/;"	v
name	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $name = $matches['name'][$i];$/;"	v
name	.\thinkphp\library\think\console\input\Argument.php	/^        $this->name        = $name;$/;"	v
name	.\thinkphp\library\think\console\input\Argument.php	/^    private $name;$/;"	v
name	.\thinkphp\library\think\console\input\Option.php	/^            $name = substr($name, 2);$/;"	v
name	.\thinkphp\library\think\console\input\Option.php	/^        $this->name        = $name;$/;"	v
name	.\thinkphp\library\think\console\input\Option.php	/^    private $name;$/;"	v
name	.\thinkphp\library\think\console\output\descriptor\Console.php	/^            foreach ($commands as $name => $command) {$/;"	v
name	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        foreach ($commands as $name => $command) {$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^                            $name = $alias . '.' . $key;$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^                            $name = $key;$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^            $name         = Loader::parseName(substr($method, 10));$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^            $name      = $name ?: $this->name;$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^        $this->name = $name;$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^    protected $name = '';$/;"	v
name	.\thinkphp\library\think\db\Query.php	/^    public function name($name)$/;"	f
name	.\thinkphp\library\think\debug\Console.php	/^            $name = strtolower($name);$/;"	v
name	.\thinkphp\library\think\debug\Console.php	/^        foreach ($this->config['trace_tabs'] as $name => $title) {$/;"	v
name	.\thinkphp\library\think\debug\Html.php	/^            $name = strtolower($name);$/;"	v
name	.\thinkphp\library\think\debug\Html.php	/^        foreach ($this->config['trace_tabs'] as $name => $title) {$/;"	v
name	.\thinkphp\library\think\exception\Handle.php	/^            $name    = strstr($message, ',', true);$/;"	v
name	.\thinkphp\library\think\exception\Handle.php	/^            $name    = strstr($message, ':', true);$/;"	v
name	.\thinkphp\library\think\model\Merge.php	/^                        $name  = is_int($key) ? $model : $key;$/;"	v
name	.\thinkphp\library\think\model\Merge.php	/^                    $name  = is_int($key) ? $model : $key;$/;"	v
name	.\thinkphp\library\think\model\Merge.php	/^            $name  = is_int($key) ? $model : $key;$/;"	v
name	.\thinkphp\library\think\model\Pivot.php	/^            $this->name = $table;$/;"	v
name	.\thinkphp\library\think\model\relation\OneToOne.php	/^        $name = Loader::parseName(basename(str_replace('\\\\', '\/', get_class($query->getModel()))));$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^                        $name = strtolower($match[2][0]);$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^                    $name  = $tags[1][$node['name']];$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^                $name  = $tags[0][strtolower($matches[1])];$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^            $name = '$' . $name;$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^            $name = substr($name, 1);$/;"	v
name	.\thinkphp\library\think\template\TagLib.php	/^        foreach ($this->tags as $name => $val) {$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^                    $name = $value;$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^            $name = $tag['value'];$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^            $name = $this->autoBuildVar($name);$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^            $name = $var;$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^            $name = '$_result';$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^            $name = 'isset(' . $name . ')';$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name       = 'i';$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name     = !empty($tag['expression']) ? $tag['expression'] : $tag['name'];$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name     = $tag['name'];$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name     = $this->autoBuildVar($name);$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name   = $tag['name'];$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name  = $tag['name'];$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name  = $this->autoBuildVar($name);$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name = !empty($tag['name']) ? $tag['name'] : 'func';$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name = $this->autoBuildVar($name);$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name = $this->autoBuildVar($tag['name']);$/;"	v
name	.\thinkphp\library\think\template\taglib\Cx.php	/^        $name = '\\'' . $tag['name'] . '\\'';$/;"	v
name	.\thinkphp\library\traits\model\SoftDelete.php	/^                $name   = is_numeric($key) ? $name : $key;$/;"	v
name	.\thinkphp\library\traits\model\SoftDelete.php	/^        $name = $this->getDeleteTimeField();$/;"	v
name	.\vendor\composer\ClassLoader.php	/^            \/\/ PEAR-like class name$/;"	c
name	.\vendor\composer\ClassLoader.php	/^            \/\/ namespaced class name$/;"	c
name	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                    foreach ((array) $extra['think-config'] as $name => $config) {$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^     * Add or replace a wrapper with a fully qualified class name.$/;"	c
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^     * Add or replace an adapter with a fully qualified class name.$/;"	c
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    foreach ($sizes as $name => $length) {$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        foreach ($indexes as $name => $index) {$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^         foreach ($indexes as $name => $index) {$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        foreach ($indexes as $name => $index) {$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->name = $name;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $name;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->name = $name;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $name;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        $this->name = $name;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    protected $name = null;$/;"	v
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^     * @param string $className         The class name.$/;"	c
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * Check if a migration class name is unique regardless of the$/;"	c
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * Check if a migration\/seed class name is valid.$/;"	c
name	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * This method takes a class name and a path to a migrations directory.$/;"	c
name	.\vendor\topthink\think-migration\src\command\Migrate.php	/^                    \/\/ convert the filename to a class name$/;"	c
name	.\vendor\topthink\think-migration\src\command\Seed.php	/^                    \/\/ convert the filename to a class name$/;"	c
name	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^            throw new \\InvalidArgumentException(sprintf('The migration class name "%s" already exists', $className));$/;"	c
name	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^            throw new \\InvalidArgumentException(sprintf('The migration class name "%s" is invalid. Please use CamelCase format.', $className));$/;"	c
name	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^            throw new \\InvalidArgumentException(sprintf('The seed class name "%s" is invalid. Please use CamelCase format', $className));$/;"	c
name	.\vendor\topthink\think-mongo\src\Query.php	/^                        $name = $name->__toString();$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^                    $name = $val[$key];$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^            $name         = Loader::parseName(substr($method, 10));$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^            $name      = $name ?: $this->name;$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->name = $name;$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $name = '';$/;"	v
name	.\vendor\topthink\think-mongo\src\Query.php	/^    public function name($name)$/;"	f
name	.\vendor\topthink\think-queue\src\queue\Job.php	/^            $name = Config::get('app_namespace') . ($module ? '\\\\' . strtolower($module) : '') . '\\\\job\\\\' . $name;$/;"	v
name2	.\thinkphp\library\think\Route.php	/^                $name2 = strtolower(Loader::parseName($controller, 1) . '\/' . $action);$/;"	v
name2	.\thinkphp\library\think\Route.php	/^            $name2 = '';$/;"	v
nameLength	.\thinkphp\library\think\console\output\Descriptor.php	/^            $nameLength = 4 + strlen($option->getName()) + 2; \/\/ - + shortcut + , + whitespace + name + --$/;"	v
names	.\thinkphp\library\think\console\output\descriptor\Console.php	/^            $names = [];$/;"	v
names	.\thinkphp\library\think\debug\Console.php	/^                        $names  = explode('|', $name);$/;"	v
names	.\thinkphp\library\think\debug\Html.php	/^                        $names  = explode('|', $name);$/;"	v
names	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * Gets an array of all the existing migration class names.$/;"	c
names	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * Migration & Seed class names must be in CamelCase format.$/;"	c
names	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^     * Migration class names must be in CamelCase format.$/;"	c
names	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        \/\/ inject the class names appropriate to this migration$/;"	c
names	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        \/\/ inject the class names appropriate to this seeder$/;"	c
namespace	.\thinkphp\library\think\App.php	/^    public static $namespace = 'app';$/;"	v
namespace	.\thinkphp\library\think\Loader.php	/^            $namespace = dirname($class);$/;"	v
namespace	.\thinkphp\library\think\Loader.php	/^            foreach ($map as $namespace => $path) {$/;"	v
namespace	.\thinkphp\library\think\console\command\Make.php	/^        $namespace = trim(implode('\\\\', array_slice(explode('\\\\', $name), 0, -1)), '\\\\');$/;"	v
namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $namespace = str_replace([' ', "\\t", "\\r", "\\n"], '', $matches['nsname'][$i]) . '\\\\';$/;"	v
namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $namespace = '';$/;"	v
namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($namespacesToScan as $namespace => $dir) {$/;"	v
namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($root_namespace as $namespace => $dir) {$/;"	v
namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function createMap($path, $namespace = null)$/;"	v
namespace	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->namespace = $namespace;$/;"	v
namespace	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        foreach ($this->sortCommands($all) as $namespace => $commands) {$/;"	v
namespace	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private $namespace;$/;"	v
namespace	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	v
namespace	.\vendor\composer\autoload_real.php	/^            foreach ($map as $namespace => $path) {$/;"	v
namespace	.\vendor\topthink\think-mongo\src\Connection.php	/^            $namespace = $this->dbName . '.' . $namespace;$/;"	v
namespaceAlias	.\thinkphp\library\think\Loader.php	/^    protected static $namespaceAlias = [];$/;"	v
namespaceFilter	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $namespaceFilter = $namespace === '' ? null : $namespace;$/;"	v
namespacedCommands	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $namespacedCommands = [];$/;"	v
namespaces	.\thinkphp\library\think\Console.php	/^                $namespaces = array_merge($/;"	v
namespaces	.\thinkphp\library\think\Console.php	/^            $namespaces = array_merge($/;"	v
namespaces	.\thinkphp\library\think\Console.php	/^        $namespaces    = preg_grep('{^' . $expr . '}', $allNamespaces);$/;"	v
namespaces	.\thinkphp\library\think\Console.php	/^        $namespaces = [];$/;"	v
namespaces	.\thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->namespaces = [];$/;"	v
namespaces	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private $namespaces;$/;"	v
namespacesToScan	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $namespacesToScan = [$/;"	v
needle	.\vendor\topthink\think-helper\src\Str.php	/^            if ((string) $needle === static::substr($haystack, -static::length($needle))) {$/;"	v
newColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $newColumn = $newColumnType;$/;"	v
newColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $newColumn = new Column();$/;"	v
newColumnType	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function changeColumn($columnName, $newColumnType = null, $options = [])$/;"	v
newConstraintName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $newConstraintName = "DF_{$tableName}_{$newColumnName}";$/;"	v
newInstance	.\thinkphp\library\think\Model.php	/^    public function newInstance($data = [], $isUpdate = false, $where = null)$/;"	f
newLine	.\thinkphp\library\think\console\Output.php	/^    public function newLine($count = 1)$/;"	f
newPivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function newPivot($data = [], $isUpdate = false)$/;"	f
newh	.\vendor\topthink\think-image\src\Image.php	/^                $newh = $h * $scale;$/;"	v
newline	.\thinkphp\library\think\console\Output.php	/^    public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)$/;"	v
newline	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	v
newline	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function write($messages, $newline = false, $type = Output::OUTPUT_NORMAL, $stream = null)$/;"	v
newline	.\thinkphp\library\think\console\output\driver\Nothing.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	v
neww	.\vendor\topthink\think-image\src\Image.php	/^                $neww = $w * $scale;$/;"	v
next	.\thinkphp\library\think\console\Input.php	/^            $next = array_shift($this->parsed);$/;"	v
next	.\vendor\topthink\think-image\src\Image.php	/^        $next = $this->gif->nextImage();$/;"	v
nextImage	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    public function nextImage()$/;"	f
nextItem	.\thinkphp\library\think\Paginator.php	/^                $this->nextItem = $items->slice($this->listRows, 1);$/;"	v
nextItem	.\thinkphp\library\think\Paginator.php	/^    protected $nextItem;$/;"	v
noCursorTimeout	.\vendor\topthink\think-mongo\src\Query.php	/^    public function noCursorTimeout($noCursorTimeout)$/;"	f
noLimits	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $noLimits = array($/;"	v
nodes	.\thinkphp\library\think\template\TagLib.php	/^            $nodes = [];$/;"	v
noiseColor	.\vendor\topthink\think-captcha\src\Captcha.php	/^            $noiseColor = imagecolorallocate($this->_image, mt_rand(150, 225), mt_rand(150, 225), mt_rand(150, 225));$/;"	v
normalizeAction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected function normalizeAction($action)$/;"	f
normalizePath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function normalizePath($path)$/;"	f
normalizer	.\thinkphp\library\think\console\output\Question.php	/^        $this->normalizer = $normalizer;$/;"	v
normalizer	.\thinkphp\library\think\console\output\Question.php	/^    private $normalizer;$/;"	v
notBetween	.\thinkphp\library\think\Validate.php	/^    protected function notBetween($value, $rule)$/;"	f
notFound	.\thinkphp\library\think\Model.php	/^            $notFound = false;$/;"	v
notFound	.\thinkphp\library\think\Model.php	/^            $notFound = true;$/;"	v
notIn	.\thinkphp\library\think\Validate.php	/^    protected function notIn($value, $rule)$/;"	f
now	.\thinkphp\library\think\log\driver\File.php	/^            $now     = date($this->config['time_format']);$/;"	v
now	.\vendor\topthink\think-helper\src\Time.php	/^    public static function dayToNow($day = 1, $now = true)$/;"	v
nowTime	.\vendor\topthink\think-helper\src\Time.php	/^        $nowTime = time();$/;"	v
null	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $null = ($row['Null'] == 'NO') ? 'NOT NULL' : 'NULL';$/;"	v
null	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->null = (bool) $null;$/;"	v
null	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $null = false;$/;"	v
nullstream	.\thinkphp\library\think\process\pipes\Unix.php	/^            $nullstream = fopen('\/dev\/null', 'c');$/;"	v
nullstream	.\thinkphp\library\think\process\pipes\Windows.php	/^            $nullstream = fopen('NUL', 'c');$/;"	v
numMatches	.\thinkphp\library\think\console\output\Ask.php	/^                    $numMatches = 0;$/;"	v
numMatches	.\thinkphp\library\think\console\output\Ask.php	/^                    $numMatches = count($matches);$/;"	v
numMatches	.\thinkphp\library\think\console\output\Ask.php	/^                $numMatches = 0;$/;"	v
numMatches	.\thinkphp\library\think\console\output\Ask.php	/^        $numMatches = count($matches);$/;"	v
numRows	.\thinkphp\library\think\db\Connection.php	/^            $this->numRows = $this->PDOStatement->rowCount();$/;"	v
numRows	.\thinkphp\library\think\db\Connection.php	/^        $this->numRows = count($item);$/;"	v
numRows	.\thinkphp\library\think\db\Connection.php	/^        $this->numRows = count($result);$/;"	v
numRows	.\thinkphp\library\think\db\Connection.php	/^    protected $numRows = 0;$/;"	v
numRows	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->numRows = $writeResult->getMatchedCount();$/;"	v
numRows	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->numRows = count($result);$/;"	v
numRows	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $numRows = 0;$/;"	v
obj	.\extend\php-jwt-master\src\JWT.php	/^            $obj = json_decode($input, false, 512, JSON_BIGINT_AS_STRING);$/;"	v
obj	.\extend\php-jwt-master\src\JWT.php	/^            $obj = json_decode($json_without_bigints);$/;"	v
obj	.\thinkphp\library\think\Hook.php	/^            $obj    = new $class();$/;"	v
obj	.\thinkphp\library\think\Request.php	/^    public function bind($name, $obj = null)$/;"	v
obj	.\thinkphp\library\think\model\relation\MorphTo.php	/^                $obj   = new $model;$/;"	v
obj	.\vendor\firebase\php-jwt\src\JWT.php	/^            $obj = json_decode($input, false, 512, JSON_BIGINT_AS_STRING);$/;"	v
obj	.\vendor\firebase\php-jwt\src\JWT.php	/^            $obj = json_decode($json_without_bigints);$/;"	v
objects	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $objects = new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($path), \\RecursiveIteratorIterator::SELF_FIRST);$/;"	v
offset	.\thinkphp\library\think\Process.php	/^            foreach ($this->processPipes->getFiles() as $offset => $filename) {$/;"	v
offset	.\thinkphp\library\think\console\output\Formatter.php	/^            $offset = $pos + strlen($text);$/;"	v
offset	.\thinkphp\library\think\console\output\Formatter.php	/^        $offset   = 0;$/;"	v
offset	.\thinkphp\library\think\db\Query.php	/^            $offset                = $listRows * ($page - 1);$/;"	v
offset	.\thinkphp\library\think\process\pipes\Windows.php	/^            foreach ($this->files as $offset => $file) {$/;"	v
offset	.\thinkphp\library\think\template\taglib\Cx.php	/^        $offset = !empty($tag['offset']) && is_numeric($tag['offset']) ? intval($tag['offset']) : 0;$/;"	v
offset	.\vendor\topthink\think-image\src\Image.php	/^            $offset        = array_map('intval', $offset);$/;"	v
offset	.\vendor\topthink\think-image\src\Image.php	/^            $offset = intval($offset);$/;"	v
offset	.\vendor\topthink\think-mongo\src\Query.php	/^                $offset = 0;$/;"	v
offset	.\vendor\topthink\think-mongo\src\Query.php	/^            $offset                = $listRows * ($page - 1);$/;"	v
offsetExists	.\thinkphp\library\think\Collection.php	/^    public function offsetExists($offset)$/;"	f
offsetExists	.\thinkphp\library\think\Model.php	/^    public function offsetExists($name)$/;"	f
offsetExists	.\thinkphp\library\think\Paginator.php	/^    public function offsetExists($offset)$/;"	f
offsetGet	.\thinkphp\library\think\Collection.php	/^    public function offsetGet($offset)$/;"	f
offsetGet	.\thinkphp\library\think\Model.php	/^    public function offsetGet($name)$/;"	f
offsetGet	.\thinkphp\library\think\Paginator.php	/^    public function offsetGet($offset)$/;"	f
offsetSet	.\thinkphp\library\think\Collection.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetSet	.\thinkphp\library\think\Model.php	/^    public function offsetSet($name, $value)$/;"	f
offsetSet	.\thinkphp\library\think\Paginator.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetUnset	.\thinkphp\library\think\Collection.php	/^    public function offsetUnset($offset)$/;"	f
offsetUnset	.\thinkphp\library\think\Model.php	/^    public function offsetUnset($name)$/;"	f
offsetUnset	.\thinkphp\library\think\Paginator.php	/^    public function offsetUnset($offset)$/;"	f
ofs	.\thinkphp\library\think\console\output\Ask.php	/^                        $ofs = 0;$/;"	v
ofs	.\thinkphp\library\think\console\output\Ask.php	/^                    $ofs        = -1;$/;"	v
ofs	.\thinkphp\library\think\console\output\Ask.php	/^                    $ofs = ($numMatches + $ofs) % $numMatches;$/;"	v
ofs	.\thinkphp\library\think\console\output\Ask.php	/^                $ofs        = 0;$/;"	v
ofs	.\thinkphp\library\think\console\output\Ask.php	/^        $ofs        = -1;$/;"	v
oldConstraintName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $oldConstraintName = "DF_{$tableName}_{$columnName}";$/;"	v
onDelete	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->onDelete = $this->normalizeAction($onDelete);$/;"	v
onDelete	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $onDelete;$/;"	v
onUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->onUpdate = $this->normalizeAction($onUpdate);$/;"	v
onUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $onUpdate;$/;"	v
only	.\thinkphp\library\think\Request.php	/^    public function only($name, $type = 'param')$/;"	f
onlyTrashed	.\thinkphp\library\traits\model\SoftDelete.php	/^    public static function onlyTrashed()$/;"	f
op	.\thinkphp\library\think\Db.php	/^ * @method Query where(mixed $field, string $op = null, mixed $condition = null) static 查询条件$/;"	v
op	.\thinkphp\library\think\db\Query.php	/^            $op = is_array($range) ? 'between' : '>';$/;"	v
op	.\thinkphp\library\think\db\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	v
op	.\thinkphp\library\think\db\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	v
op	.\thinkphp\library\think\db\Query.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	v
op	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	v
op	.\vendor\topthink\think-mongo\src\Query.php	/^            $op = is_array($range) ? 'between' : '>';$/;"	v
op	.\vendor\topthink\think-mongo\src\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	v
op	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNor($field, $op = null, $condition = null)$/;"	v
op	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	v
open	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function open($savePath, $sessName)$/;"	f
open	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function open($savePath, $sessName)$/;"	f
open	.\thinkphp\library\think\session\driver\Redis.php	/^    public function open($savePath, $sessName)$/;"	f
open	.\vendor\topthink\think-image\src\Image.php	/^    public static function open($file)$/;"	f
openErrorStream	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function openErrorStream()$/;"	f
openOutputStream	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function openOutputStream()$/;"	f
opensslVerifyReturnValue	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public static $opensslVerifyReturnValue;$/;"	v
openssl_verify	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^function openssl_verify($msg, $signature, $key, $algorithm)$/;"	f
operator	.\thinkphp\library\think\Model.php	/^    public static function has($relation, $operator = '>=', $count = 1, $id = '*')$/;"	v
oplogReplay	.\vendor\topthink\think-mongo\src\Query.php	/^    public function oplogReplay($oplogReplay)$/;"	f
option	.\thinkphp\library\think\Cookie.php	/^                $option = ['expire' => $option];$/;"	v
option	.\thinkphp\library\think\Cookie.php	/^            $option = [];$/;"	v
option	.\thinkphp\library\think\Model.php	/^                $option = !empty($param) ? (int) $param : JSON_UNESCAPED_UNICODE;$/;"	v
option	.\thinkphp\library\think\Route.php	/^            $option  = $item['option'];$/;"	v
option	.\thinkphp\library\think\Route.php	/^            $option  = array_merge(self::getGroup('option'), $option);$/;"	v
option	.\thinkphp\library\think\Route.php	/^            $option = $name;$/;"	v
option	.\thinkphp\library\think\Route.php	/^    private static $option = [];$/;"	v
option	.\thinkphp\library\think\Route.php	/^    private static function parseRule($rule, $route, $pathinfo, $option = [], $matches = [])$/;"	v
option	.\thinkphp\library\think\Route.php	/^    public static function group($name, $routes, $option = [], $pattern = [])$/;"	v
option	.\thinkphp\library\think\Route.php	/^    public static function setGroup($name, $option = [], $pattern = [])$/;"	v
option	.\thinkphp\library\think\console\Input.php	/^            $option = $this->definition->getOptionForShortcut($name[$i]);$/;"	v
option	.\thinkphp\library\think\console\Input.php	/^        $option = $this->definition->getOption($name);$/;"	v
option	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^                $option = $aliasOptions[$option];$/;"	v
option	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        foreach ($options as $option => $value) {$/;"	v
option	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        foreach ($options as $option => $value) {$/;"	v
option	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        foreach ($options as $option => $value) {$/;"	v
option1	.\thinkphp\library\think\Route.php	/^                        $option1  = array_merge($option, isset($val[1]) ? $val[1] : []);$/;"	v
option1	.\thinkphp\library\think\Route.php	/^                    $option1  = array_merge($option, $val[1]);$/;"	v
option1	.\thinkphp\library\think\Route.php	/^                    $option1  = null;$/;"	v
optional	.\thinkphp\library\think\Route.php	/^                        $optional = false;$/;"	v
optional	.\thinkphp\library\think\Route.php	/^                        $optional = true;$/;"	v
optional	.\thinkphp\library\think\Route.php	/^                $optional = false;$/;"	v
optional	.\thinkphp\library\think\Route.php	/^                $optional = true;$/;"	v
optional	.\thinkphp\library\think\Route.php	/^            $optional = false;$/;"	v
options	.\thinkphp\library\think\Cache.php	/^                $options = Config::get('cache');$/;"	v
options	.\thinkphp\library\think\Cache.php	/^                $options = Config::get('cache.' . $default['type']) ?: $default;$/;"	v
options	.\thinkphp\library\think\Cache.php	/^    public static function connect(array $options = [], $name = false)$/;"	v
options	.\thinkphp\library\think\Cache.php	/^    public static function init(array $options = [])$/;"	v
options	.\thinkphp\library\think\Controller.php	/^    protected function beforeAction($method, $options = [])$/;"	v
options	.\thinkphp\library\think\Db.php	/^            $options = self::parseConfig($config);$/;"	v
options	.\thinkphp\library\think\Paginator.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\Paginator.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\Process.php	/^        $this->options                      = array_replace([$/;"	v
options	.\thinkphp\library\think\Process.php	/^        $this->options = $options;$/;"	v
options	.\thinkphp\library\think\Process.php	/^    private $options;$/;"	v
options	.\thinkphp\library\think\Request.php	/^        $options                      = [];$/;"	v
options	.\thinkphp\library\think\Response.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\Response.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\Response.php	/^    protected $options = [];$/;"	v
options	.\thinkphp\library\think\Response.php	/^    public function options($options = [])$/;"	f
options	.\thinkphp\library\think\Route.php	/^                    $options  = isset($option1) ? $option1 : $option;$/;"	v
options	.\thinkphp\library\think\View.php	/^            $options = [];$/;"	v
options	.\thinkphp\library\think\cache\Driver.php	/^    protected $options = [];$/;"	v
options	.\thinkphp\library\think\cache\driver\File.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\File.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Lite.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Lite.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Memcache.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Memcached.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Memcached.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Redis.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Redis.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Wincache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Wincache.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\cache\driver\Xcache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\thinkphp\library\think\cache\driver\Xcache.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\console\Input.php	/^        $this->options    = [];$/;"	v
options	.\thinkphp\library\think\console\Input.php	/^    protected $options = [];$/;"	v
options	.\thinkphp\library\think\console\Output.php	/^        $options    = array_merge([$/;"	v
options	.\thinkphp\library\think\console\Output.php	/^    public function describe($object, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\input\Definition.php	/^        $options   = [];$/;"	v
options	.\thinkphp\library\think\console\input\Definition.php	/^        $this->options   = [];$/;"	v
options	.\thinkphp\library\think\console\input\Definition.php	/^    private $options;$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	v
options	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $this->options = [];$/;"	v
options	.\thinkphp\library\think\console\output\formatter\Style.php	/^    private $options = [];$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseDateTime($value, $key, $options = [], $bindName = null, $bindType = null)$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseField($fields, $options = [])$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseJoin($join, $options = [])$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseOrder($order, $options = [])$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    protected function parseTable($tables, $options = [])$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    public function insert(array $data, $options = [], $replace = false)$/;"	v
options	.\thinkphp\library\think\db\Builder.php	/^    public function insertAll($dataSet, $options = [], $replace = false)$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^                $this->options = [];$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^            $options = $this->getOptions();$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^            $this->options = [];$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^        $options = $this->getOptions();$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^        $options = $this->options;$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^        $options = $this->parseExpress();$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^        $this->options = $options;$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^        $this->options = [];$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^    protected $options = [];$/;"	v
options	.\thinkphp\library\think\db\Query.php	/^    protected function options(array $options)$/;"	f
options	.\thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	v
options	.\thinkphp\library\think\db\builder\Mysql.php	/^    public function insertAll($dataSet, $options = [], $replace = false)$/;"	v
options	.\thinkphp\library\think\db\builder\Pgsql.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	v
options	.\thinkphp\library\think\db\builder\Sqlite.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	v
options	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	v
options	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseOrder($order, $options = [])$/;"	v
options	.\thinkphp\library\think\process\Builder.php	/^        $options = $this->options;$/;"	v
options	.\thinkphp\library\think\process\Builder.php	/^    private $options        = [];$/;"	v
options	.\thinkphp\library\think\response\Json.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\response\Jsonp.php	/^    protected $options = [$/;"	v
options	.\thinkphp\library\think\response\Redirect.php	/^    protected $options = [];$/;"	v
options	.\thinkphp\library\think\response\View.php	/^    protected $options     = [];$/;"	v
options	.\thinkphp\library\think\response\Xml.php	/^    protected $options = [$/;"	v
options	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    public function check($value, $hashedValue, array $options = [])$/;"	v
options	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    public function make($value, array $options = [])$/;"	v
options	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    public function check($value, $hashedValue, array $options = [])$/;"	v
options	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    public function make($value, array $options = [])$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function createDatabase($name, $options = array());$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $options = array_merge($defaultOptions, $table->getOptions());$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^            $options = array($/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->options = $options;$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $options = array();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $options = $table->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function hasColumn($tableName, $columnName, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $options = $table->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $options = $table->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function createDatabase($name, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function hasColumn($tableName, $columnName, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function dropIndex($tableName, $columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $this->options = $options;$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    protected $options = array();$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function __construct($name, $options = array(), AdapterInterface $adapter = null)$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addIndex($columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function changeColumn($columnName, $newColumnType, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasColumn($columnName, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function hasIndex($columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function removeIndex($columns, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function table($tableName, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function table($tableName, $options = array())$/;"	v
options	.\vendor\topthink\think-migration\src\Command.php	/^        $options = $this->getDbConfig();$/;"	v
options	.\vendor\topthink\think-migration\src\Migrator.php	/^    public function table($tableName, $options = [])$/;"	v
options	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function make($name, $type, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected $options = [];$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function log($type, $data, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function insert(array $data, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function insertAll($dataSet, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function parseWhere($where, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function update($data, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->options = $options;$/;"	v
options	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $options = [];$/;"	v
options	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function trigger($sql, $runtime, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function log($type, $data, $options = [])$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^            $options = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^            $options = $this->parseExpress();$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^            $this->options = [];$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^        $options   = $this->getOptions();$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^        $options = $this->options;$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^        $options = $this->parseExpress();$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->options = $options;$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->options = [];$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $options = [];$/;"	v
options	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function options(array $options)$/;"	f
options	.\vendor\topthink\think-queue\src\Queue.php	/^        $options = Config::get('queue');$/;"	v
options	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    protected $options = [];$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected $options = [$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected $options = [$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $options = [$/;"	v
optionsStr	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $optionsStr = sprintf('ENGINE = %s', $options['engine']);$/;"	v
optionsStr	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $optionsStr = 'ENGINE = InnoDB';$/;"	v
or	.\vendor\composer\ClassLoader.php	/^     * Loads the given class or interface.$/;"	c
order	.\thinkphp\library\think\Db.php	/^ * @method Query order(mixed $field, string $order = null) static 查询ORDER$/;"	v
order	.\thinkphp\library\think\db\Builder.php	/^        $order = implode(',', $array);$/;"	v
order	.\thinkphp\library\think\db\Query.php	/^    public function order($field, $order = null)$/;"	f
order	.\thinkphp\library\think\db\Query.php	/^    public function order($field, $order = null)$/;"	v
order	.\vendor\topthink\think-mongo\src\Query.php	/^    public function order($field, $order = '')$/;"	f
order	.\vendor\topthink\think-mongo\src\Query.php	/^    public function order($field, $order = '')$/;"	v
orderRaw	.\thinkphp\library\think\db\Query.php	/^    public function orderRaw($field, array $bind = [])$/;"	f
origin	.\thinkphp\library\think\Model.php	/^        $this->origin = $this->data;$/;"	v
origin	.\thinkphp\library\think\Model.php	/^        $this->origin = [];$/;"	v
origin	.\thinkphp\library\think\Model.php	/^    protected $origin = [];$/;"	v
origin	.\thinkphp\library\think\model\Merge.php	/^            $this->origin = $this->data;$/;"	v
origin	.\thinkphp\library\traits\model\SoftDelete.php	/^        $this->origin = [];$/;"	v
original	.\thinkphp\library\think\Loader.php	/^                $original = self::$namespaceAlias[$namespace] . '\\\\' . basename($class);$/;"	v
original	.\thinkphp\library\think\Loader.php	/^    public static function addNamespaceAlias($namespace, $original = '')$/;"	v
original	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $original = $queue ?: $this->options['default'];$/;"	v
out	.\thinkphp\library\think\Process.php	/^        $out      = self::OUT;$/;"	v
out	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^            $out = curl_exec($this->curl);$/;"	v
outArr	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^                $outArr = array();$/;"	v
output	.\thinkphp\library\think\App.php	/^                    $output = ob_get_clean();$/;"	v
output	.\thinkphp\library\think\Console.php	/^        $output = new Output($driver);$/;"	v
output	.\thinkphp\library\think\Console.php	/^        $output = new Output();$/;"	v
output	.\thinkphp\library\think\Debug.php	/^                $output = htmlspecialchars($output, $flags);$/;"	v
output	.\thinkphp\library\think\Debug.php	/^            $output = $trace->output($response, Log::getLog());$/;"	v
output	.\thinkphp\library\think\Debug.php	/^            $output = '<pre>' . $label . $output . '<\/pre>';$/;"	v
output	.\thinkphp\library\think\Debug.php	/^            $output = PHP_EOL . $label . $output . PHP_EOL;$/;"	v
output	.\thinkphp\library\think\Debug.php	/^        $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', ob_get_clean());$/;"	v
output	.\thinkphp\library\think\Response.php	/^    protected function output($data)$/;"	f
output	.\thinkphp\library\think\console\Command.php	/^        $this->output = $output;$/;"	v
output	.\thinkphp\library\think\console\Command.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\command\optimize\Config.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\command\optimize\Route.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\command\optimize\Schema.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\output\Ask.php	/^        $this->output   = $output;$/;"	v
output	.\thinkphp\library\think\console\output\Ask.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\output\Descriptor.php	/^        $this->output = $output;$/;"	v
output	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected $output;$/;"	v
output	.\thinkphp\library\think\console\output\Formatter.php	/^        $output   = '';$/;"	v
output	.\thinkphp\library\think\console\output\driver\Console.php	/^        $this->output    = $output;$/;"	v
output	.\thinkphp\library\think\console\output\driver\Console.php	/^    private $output;$/;"	v
output	.\thinkphp\library\think\debug\Console.php	/^    public function output(Response $response, array $log = [])$/;"	f
output	.\thinkphp\library\think\debug\Html.php	/^    public function output(Response $response, array $log = [])$/;"	f
output	.\thinkphp\library\think\response\Json.php	/^    protected function output($data)$/;"	f
output	.\thinkphp\library\think\response\Jsonp.php	/^    protected function output($data)$/;"	f
output	.\thinkphp\library\think\response\Redirect.php	/^    protected function output($data)$/;"	f
output	.\thinkphp\library\think\response\View.php	/^    protected function output($data)$/;"	f
output	.\thinkphp\library\think\response\Xml.php	/^    protected function output($data)$/;"	f
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^            $output = new OutputInterface('nothing');$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->output = $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^        $this->output = $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    protected $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^        $this->output = $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    protected $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^        $this->output = $output;$/;"	v
output	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    protected $output;$/;"	v
output	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^        $output     = $this->output;$/;"	v
output	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function output($response)$/;"	f
outputDisabled	.\thinkphp\library\think\Process.php	/^        $this->outputDisabled = false;$/;"	v
outputDisabled	.\thinkphp\library\think\Process.php	/^        $this->outputDisabled = true;$/;"	v
outputDisabled	.\thinkphp\library\think\Process.php	/^    private $outputDisabled = false;$/;"	v
outputDisabled	.\thinkphp\library\think\process\Builder.php	/^        $this->outputDisabled = false;$/;"	v
outputDisabled	.\thinkphp\library\think\process\Builder.php	/^        $this->outputDisabled = true;$/;"	v
outputDisabled	.\thinkphp\library\think\process\Builder.php	/^    private $outputDisabled = false;$/;"	v
outputHandler	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $this->outputHandler = $outputHandler;$/;"	v
outputHandler	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected $outputHandler;$/;"	v
outstandingMigrations	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $outstandingMigrations = array_filter($versions, function ($version) use ($dateString) {$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function afterDelete($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function afterInsert($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function afterUpdate($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function afterWrite($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function beforeDelete($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function beforeInsert($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function beforeUpdate($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    protected static function beforeWrite($callback, $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    public function append($append = [], $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    public function hidden($hidden = [], $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    public function visible($visible = [], $override = false)$/;"	v
override	.\thinkphp\library\think\Model.php	/^    public static function event($event, $callback, $override = false)$/;"	v
override	.\thinkphp\library\think\model\Collection.php	/^    public function append($append = [], $override = false)$/;"	v
override	.\thinkphp\library\think\model\Collection.php	/^    public function hidden($hidden = [], $override = false)$/;"	v
override	.\thinkphp\library\think\model\Collection.php	/^    public function visible($visible = [], $override = false)$/;"	v
ox	.\vendor\topthink\think-image\src\Image.php	/^            $ox     = $oy     = $offset;$/;"	v
padlen	.\extend\php-jwt-master\src\JWT.php	/^            $padlen = 4 - $remainder;$/;"	v
padlen	.\vendor\firebase\php-jwt\src\JWT.php	/^            $padlen = 4 - $remainder;$/;"	v
page	.\thinkphp\library\think\Paginator.php	/^            $page = 1;$/;"	v
page	.\thinkphp\library\think\Paginator.php	/^        $page = (int) Request::instance()->param($varPage);$/;"	v
page	.\thinkphp\library\think\db\Query.php	/^            $page                  = $page > 0 ? $page : 1;$/;"	v
page	.\thinkphp\library\think\db\Query.php	/^        $page  = isset($config['page']) ? (int) $config['page'] : call_user_func([$/;"	v
page	.\thinkphp\library\think\db\Query.php	/^        $page = $page < 1 ? 1 : $page;$/;"	v
page	.\thinkphp\library\think\db\Query.php	/^    public function page($page, $listRows = null)$/;"	f
page	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        foreach ($urls as $page => $url) {$/;"	v
page	.\vendor\topthink\think-mongo\src\Query.php	/^            $page                  = $page > 0 ? $page : 1;$/;"	v
page	.\vendor\topthink\think-mongo\src\Query.php	/^        $page     = isset($config['page']) ? (int) $config['page'] : call_user_func([$/;"	v
page	.\vendor\topthink\think-mongo\src\Query.php	/^        $page = $page < 1 ? 1 : $page;$/;"	v
page	.\vendor\topthink\think-mongo\src\Query.php	/^    public function page($page, $listRows = null)$/;"	f
paginate	.\thinkphp\library\think\db\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	f
paginate	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	f
paginate	.\vendor\topthink\think-mongo\src\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	f
panDomain	.\thinkphp\library\think\Route.php	/^                            $panDomain = $domain2;$/;"	v
panDomain	.\thinkphp\library\think\Route.php	/^                        $panDomain = $domain3;$/;"	v
param	.\thinkphp\library\think\Request.php	/^                $param = $param[$val];$/;"	v
param	.\thinkphp\library\think\Request.php	/^                $param = $this->param();$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $param = $this->$type();$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $param = $this->$type;$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $this->param          = [];$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $this->param        = [];$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $this->param       = [];$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $this->param      = [];$/;"	v
param	.\thinkphp\library\think\Request.php	/^            $this->param = array_merge($this->get(false), $vars, $this->route(false));$/;"	v
param	.\thinkphp\library\think\Request.php	/^        $param = $this->$type();$/;"	v
param	.\thinkphp\library\think\Request.php	/^    protected $param   = [];$/;"	v
param	.\thinkphp\library\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	f
param	.\thinkphp\library\think\Template.php	/^        $param = implode('.', $vars);$/;"	v
param	.\thinkphp\library\think\Validate.php	/^            $param = isset($rule[1]) ? $rule[1] : null;$/;"	v
param	.\thinkphp\library\think\Validate.php	/^            $param = null;$/;"	v
param	.\thinkphp\library\think\db\Connection.php	/^                $param = array_shift($val);$/;"	v
param	.\thinkphp\library\think\db\Connection.php	/^            $param = is_numeric($key) ? $key + 1 : ':' . $key;$/;"	v
param	.\thinkphp\library\think\db\Query.php	/^        $param = func_get_args();$/;"	v
param	.\thinkphp\library\think\db\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [], $strict = false)$/;"	v
param	.\vendor\topthink\think-mongo\src\Query.php	/^        $param = func_get_args();$/;"	v
param	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [])$/;"	v
paramType	.\thinkphp\library\think\Url.php	/^                $paramType = Config::get('url_param_type');$/;"	v
parameters	.\thinkphp\library\think\Console.php	/^    public static function call($command, array $parameters = [], $driver = 'buffer')$/;"	v
parameters	.\thinkphp\library\think\Paginator.php	/^            $parameters = [$this->options['var_page'] => $page];$/;"	v
parameters	.\thinkphp\library\think\Paginator.php	/^            $parameters = [];$/;"	v
parameters	.\thinkphp\library\think\Paginator.php	/^            $parameters = array_merge($this->options['query'], $parameters);$/;"	v
params	.\thinkphp\helper.php	/^            $params = [];$/;"	v
params	.\thinkphp\helper.php	/^    function redirect($url = [], $params = [], $code = 302, $with = [])$/;"	v
params	.\thinkphp\library\think\Model.php	/^        $params = func_get_args();$/;"	v
params	.\thinkphp\library\think\Request.php	/^                $params      = $query;$/;"	v
params	.\thinkphp\library\think\Request.php	/^                $params      = array_replace($query, $params);$/;"	v
params	.\thinkphp\library\think\Template.php	/^                                    $params = '\\'' . $params . '\\'';$/;"	v
params	.\thinkphp\library\think\Template.php	/^                                $params = '';$/;"	v
params	.\thinkphp\library\think\Template.php	/^                                $params = implode('.', $vars);$/;"	v
params	.\thinkphp\library\think\db\Connection.php	/^                $params = $config['params'] + $this->params;$/;"	v
params	.\thinkphp\library\think\db\Connection.php	/^                $params = $this->params;$/;"	v
params	.\thinkphp\library\think\db\Connection.php	/^    protected $params = [$/;"	v
params	.\thinkphp\library\think\db\Query.php	/^    protected function trigger($event, $params = [])$/;"	v
params	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected $params = [$/;"	v
params	.\thinkphp\library\think\response\Redirect.php	/^        $this->params = $params;$/;"	v
params	.\thinkphp\library\think\response\Redirect.php	/^    protected $params = [];$/;"	v
params	.\thinkphp\library\think\response\Redirect.php	/^    public function params($params = [])$/;"	f
params	.\thinkphp\library\traits\controller\Jump.php	/^            $params = [];$/;"	v
params	.\thinkphp\library\traits\controller\Jump.php	/^    protected function redirect($url, $params = [], $code = 302, $with = [])$/;"	v
params	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function trigger($event, $params = [])$/;"	v
params	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected function apiCall($type, $url, $params = [])$/;"	v
parent	.\thinkphp\library\think\Model.php	/^        $this->parent = $model;$/;"	v
parent	.\thinkphp\library\think\Model.php	/^    protected $parent;$/;"	v
parent	.\thinkphp\library\think\Template.php	/^                            $parent = $val['parent'];$/;"	v
parent	.\thinkphp\library\think\model\Pivot.php	/^        $this->parent = $parent;$/;"	v
parent	.\thinkphp\library\think\model\Pivot.php	/^    public $parent;$/;"	v
parent	.\thinkphp\library\think\model\Pivot.php	/^    public function __construct($data = [], Model $parent = null, $table = '')$/;"	v
parent	.\thinkphp\library\think\model\Relation.php	/^    protected $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->parent     = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->parent     = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\HasMany.php	/^        $parent = clone $this->parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\HasMany.php	/^        $this->parent     = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->parent     = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->parent     = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $parent = clone $this->parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->parent    = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->parent    = $parent;$/;"	v
parent	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->parent    = $parent;$/;"	v
parse	.\thinkphp\library\think\Config.php	/^    public static function parse($config, $type = '', $name = '', $range = '')$/;"	f
parse	.\thinkphp\library\think\Template.php	/^    public function parse(&$content)$/;"	f
parse	.\thinkphp\library\think\config\driver\Ini.php	/^    public function parse($config)$/;"	f
parse	.\thinkphp\library\think\config\driver\Json.php	/^    public function parse($config)$/;"	f
parse	.\thinkphp\library\think\config\driver\Xml.php	/^    public function parse($config)$/;"	f
parse	.\thinkphp\library\think\console\Input.php	/^    protected function parse()$/;"	f
parse	.\thinkphp\library\think\template\TagLib.php	/^    protected $parse = [];$/;"	v
parseArgument	.\thinkphp\library\think\console\Input.php	/^    private function parseArgument($token)$/;"	f
parseAttr	.\thinkphp\library\think\Model.php	/^    protected function parseAttr($attrs, &$result, $visible = true)$/;"	f
parseAttr	.\thinkphp\library\think\Template.php	/^    public function parseAttr($str, $name = null)$/;"	f
parseAttr	.\thinkphp\library\think\template\TagLib.php	/^    public function parseAttr($str, $name, $alias = '')$/;"	f
parseBlock	.\thinkphp\library\think\Template.php	/^    private function parseBlock(&$content, $sort = false)$/;"	f
parseClass	.\thinkphp\library\think\Loader.php	/^    public static function parseClass($module, $layer, $name, $appendSuffix = false)$/;"	f
parseClosure	.\thinkphp\library\think\db\Builder.php	/^    protected function parseClosure($call, $show = true)$/;"	f
parseComment	.\thinkphp\library\think\db\Builder.php	/^    protected function parseComment($comment)$/;"	f
parseCondition	.\thinkphp\library\think\template\TagLib.php	/^    public function parseCondition($condition)$/;"	f
parseConfig	.\thinkphp\library\think\Db.php	/^    private static function parseConfig($config)$/;"	f
parseData	.\thinkphp\library\think\db\Builder.php	/^    protected function parseData($data, $options)$/;"	f
parseData	.\thinkphp\library\think\model\Merge.php	/^    protected function parseData($model, $data)$/;"	f
parseData	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseData($data, $options)$/;"	f
parseDateTime	.\thinkphp\library\think\db\Builder.php	/^    protected function parseDateTime($value, $key, $options = [], $bindName = null, $bindType = null)$/;"	f
parseDateTime	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseDateTime($value, $key)$/;"	f
parseDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function parseDefault($default)$/;"	f
parseDistinct	.\thinkphp\library\think\db\Builder.php	/^    protected function parseDistinct($distinct)$/;"	f
parseDomain	.\thinkphp\library\think\Url.php	/^    protected static function parseDomain(&$url, $domain)$/;"	f
parseDsn	.\thinkphp\library\think\Db.php	/^    private static function parseDsn($dsnStr)$/;"	f
parseDsn	.\thinkphp\library\think\db\Connection.php	/^    abstract protected function parseDsn($config);$/;"	f
parseDsn	.\thinkphp\library\think\db\connector\Mysql.php	/^    protected function parseDsn($config)$/;"	f
parseDsn	.\thinkphp\library\think\db\connector\Pgsql.php	/^    protected function parseDsn($config)$/;"	f
parseDsn	.\thinkphp\library\think\db\connector\Sqlite.php	/^    protected function parseDsn($config)$/;"	f
parseDsn	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected function parseDsn($config)$/;"	f
parseExpress	.\thinkphp\library\think\db\Query.php	/^    protected function parseExpress()$/;"	f
parseExpress	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function parseExpress()$/;"	f
parseExtend	.\thinkphp\library\think\Template.php	/^    private function parseExtend(&$content)$/;"	f
parseField	.\thinkphp\library\think\db\Builder.php	/^    protected function parseField($fields, $options = [])$/;"	f
parseForce	.\thinkphp\library\think\db\Builder.php	/^    protected function parseForce($index)$/;"	f
parseGroup	.\thinkphp\library\think\db\Builder.php	/^    protected function parseGroup($group)$/;"	f
parseHaving	.\thinkphp\library\think\db\Builder.php	/^    protected function parseHaving($having)$/;"	f
parseInclude	.\thinkphp\library\think\Template.php	/^    private function parseInclude(&$content)$/;"	f
parseJob	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected function parseJob($job)$/;"	f
parseJoin	.\thinkphp\library\think\db\Builder.php	/^    protected function parseJoin($join, $options = [])$/;"	f
parseKey	.\thinkphp\library\think\db\Builder.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	f
parseKey	.\thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	f
parseKey	.\thinkphp\library\think\db\builder\Pgsql.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	f
parseKey	.\thinkphp\library\think\db\builder\Sqlite.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	f
parseKey	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseKey($key, $options = [], $strict = false)$/;"	f
parseKey	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseKey($key)$/;"	f
parseLayout	.\thinkphp\library\think\Template.php	/^    private function parseLayout(&$content)$/;"	f
parseLimit	.\thinkphp\library\think\db\Builder.php	/^    protected function parseLimit($limit)$/;"	f
parseLimit	.\thinkphp\library\think\db\builder\Pgsql.php	/^    public function parseLimit($limit)$/;"	f
parseLimit	.\thinkphp\library\think\db\builder\Sqlite.php	/^    public function parseLimit($limit)$/;"	f
parseLimit	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseLimit($limit)$/;"	f
parseLiteral	.\thinkphp\library\think\Template.php	/^    private function parseLiteral(&$content, $restore = false)$/;"	f
parseLock	.\thinkphp\library\think\db\Builder.php	/^    protected function parseLock($lock = false)$/;"	f
parseLongOption	.\thinkphp\library\think\console\Input.php	/^    private function parseLongOption($token)$/;"	f
parseModel	.\thinkphp\library\think\Model.php	/^    protected function parseModel($model)$/;"	f
parseModel	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected function parseModel($model)$/;"	f
parseModule	.\thinkphp\library\think\Route.php	/^    private static function parseModule($url, $convert = false)$/;"	f
parseName	.\thinkphp\library\think\Loader.php	/^    public static function parseName($name, $type = 0, $ucfirst = true)$/;"	f
parseOptions	.\thinkphp\library\think\console\Input.php	/^                $parseOptions = false;$/;"	v
parseOptions	.\thinkphp\library\think\console\Input.php	/^        $parseOptions = true;$/;"	v
parseOrder	.\thinkphp\library\think\db\Builder.php	/^    protected function parseOrder($order, $options = [])$/;"	f
parseOrder	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseOrder($order, $options = [])$/;"	f
parsePhp	.\thinkphp\library\think\Template.php	/^    private function parsePhp(&$content)$/;"	f
parsePkWhere	.\thinkphp\library\think\db\Query.php	/^    protected function parsePkWhere($data, &$options)$/;"	f
parsePkWhere	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function parsePkWhere($data, &$options)$/;"	f
parseQuery	.\thinkphp\library\think\Model.php	/^    protected static function parseQuery(&$data, $with, $cache)$/;"	f
parseRand	.\thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseRand()$/;"	f
parseRand	.\thinkphp\library\think\db\builder\Pgsql.php	/^    protected function parseRand()$/;"	f
parseRand	.\thinkphp\library\think\db\builder\Sqlite.php	/^    protected function parseRand()$/;"	f
parseRand	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseRand()$/;"	f
parseRule	.\thinkphp\library\think\Route.php	/^    private static function parseRule($rule, $route, $pathinfo, $option = [], $matches = [])$/;"	f
parseSavepoint	.\thinkphp\library\think\db\Connection.php	/^    protected function parseSavepoint($name)$/;"	f
parseSavepointRollBack	.\thinkphp\library\think\db\Connection.php	/^    protected function parseSavepointRollBack($name)$/;"	f
parseSet	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseSet($data, $options)$/;"	f
parseShortOption	.\thinkphp\library\think\console\Input.php	/^    private function parseShortOption($token)$/;"	f
parseShortOptionSet	.\thinkphp\library\think\console\Input.php	/^    private function parseShortOptionSet($name)$/;"	f
parseSqlTable	.\thinkphp\library\think\db\Builder.php	/^    protected function parseSqlTable($sql)$/;"	f
parseSqlTable	.\thinkphp\library\think\db\Query.php	/^    public function parseSqlTable($sql)$/;"	f
parseSqlTable	.\vendor\topthink\think-mongo\src\Query.php	/^    public function parseSqlTable($sql)$/;"	f
parseStr	.\thinkphp\library\think\Template.php	/^                                    $parseStr = $first . '->' . implode('->', $vars);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                                    $parseStr = $first . '[\\'' . implode('\\'][\\'', $vars) . '\\']';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                                    $parseStr = '(is_array(' . $first . ')?' . $first . '[\\'' . implode('\\'][\\'', $vars) . '\\']:' . $first . '->' . implode('->', $vars) . ')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                            $parseStr = $this->parseThinkVar($vars);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                            $parseStr = '\\think\\Request::instance()->' . $method . '(' . $params . ')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                        $parseStr = $type;$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                        $parseStr = '';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                        $parseStr = str_replace(':', '->', $match[0]);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                        $parseStr = str_replace('[' . $k . ']', $v, $parseStr);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = "date('Y-m-d g:i a',time())";$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = $_varParseList[$match[0]];$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = $this->parseTemplateName($file);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = 'THINK_VERSION';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\'' . ltrim($this->config['tpl_begin'], '\\\\') . '\\'';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\'' . ltrim($this->config['tpl_end'], '\\\\') . '\\'';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\'\\'';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Config::get(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Cookie::get(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Lang::get(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Request::instance()->env(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Request::instance()->get(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Request::instance()->post(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Request::instance()->request(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Request::instance()->server(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = '\\\\think\\\\Session::get(\\'' . $param . '\\')';$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^                    $parseStr = strtoupper($param);$/;"	v
parseStr	.\thinkphp\library\think\Template.php	/^        $parseStr = '';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr   = '<?php foreach(' . $expression . '): ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php $_RANGE_VAR_=' . $str . ';if(' . $name . '<$_RANGE_VAR_[0] || ' . $name . '>$_RANGE_VAR_[1]):?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php $_RANGE_VAR_=' . $str . ';if(' . $name . '>= $_RANGE_VAR_[0] && ' . $name . '<= $_RANGE_VAR_[1]):?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php if(' . $fun . '((' . $name . '), ' . $str . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr  = '<?php elseif(' . $condition . '): ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr  = '<?php if(' . $condition . '): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php $' . $name . '=function(' . $vars . ') use(' . implode(',', $use) . ') {';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php $__FOR_START_' . $rand . '__=' . $start . ';$__FOR_END_' . $rand . '__=' . $end . ';';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $content . ' ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $name . ' = ' . $value . '; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $value . ' ?>' . $content;$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php default: ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php define(' . $name . ', ' . $value . '); ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php else: ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!(empty(' . $name . ') || ((' . $name . ' instanceof \\think\\Collection || ' . $name . ' instanceof \\think\\Paginator ) && ' . $name . '->isEmpty()))): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!defined("' . $name . '")): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!isset(' . $name . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(' . $name . ' ' . $type . ' ' . $value . '): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(defined("' . $name . '")): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(empty(' . $name . ') || ((' . $name . ' instanceof \\think\\Collection || ' . $name . ' instanceof \\think\\Paginator ) && ' . $name . '->isEmpty())): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(isset(' . $name . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	.\thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php switch(' . $name . '): ?>' . $content . '<?php endswitch; ?>';$/;"	v
parseSuffix	.\thinkphp\library\think\Url.php	/^    protected static function parseSuffix($suffix)$/;"	f
parseTable	.\thinkphp\library\think\db\Builder.php	/^    protected function parseTable($tables, $options = [])$/;"	f
parseTag	.\thinkphp\library\think\Template.php	/^    private function parseTag(&$content)$/;"	f
parseTag	.\thinkphp\library\think\template\TagLib.php	/^    public function parseTag(&$content, $lib = '')$/;"	f
parseTagLib	.\thinkphp\library\think\Template.php	/^    public function parseTagLib($tagLib, &$content, $hide = false)$/;"	f
parseTemplate	.\thinkphp\library\think\view\driver\Php.php	/^    private function parseTemplate($template)$/;"	f
parseTemplate	.\thinkphp\library\think\view\driver\Think.php	/^    private function parseTemplate($template)$/;"	f
parseTemplateFile	.\thinkphp\library\think\Template.php	/^    private function parseTemplateFile($template)$/;"	f
parseTemplateName	.\thinkphp\library\think\Template.php	/^    private function parseTemplateName($templateName)$/;"	f
parseThinkVar	.\thinkphp\library\think\Template.php	/^    public function parseThinkVar($vars)$/;"	f
parseUnion	.\thinkphp\library\think\db\Builder.php	/^    protected function parseUnion($union)$/;"	f
parseUrl	.\thinkphp\library\think\Route.php	/^    public static function parseUrl($url, $depr = '\/', $autoSearch = false)$/;"	f
parseUrl	.\thinkphp\library\think\Url.php	/^    protected static function parseUrl($url, &$domain)$/;"	f
parseUrlParams	.\thinkphp\library\think\Route.php	/^    private static function parseUrlParams($url, &$var = [])$/;"	f
parseUrlPath	.\thinkphp\library\think\Route.php	/^    private static function parseUrlPath($url)$/;"	f
parseValue	.\thinkphp\library\think\db\Builder.php	/^    protected function parseValue($value, $field = '')$/;"	f
parseValue	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseValue($value, $field = '')$/;"	f
parseVar	.\thinkphp\library\think\Route.php	/^    private static function parseVar($rule)$/;"	f
parseVar	.\thinkphp\library\think\Template.php	/^    public function parseVar(&$varStr)$/;"	f
parseVarFunction	.\thinkphp\library\think\Template.php	/^    public function parseVarFunction(&$varStr)$/;"	f
parseWhere	.\thinkphp\library\think\db\Builder.php	/^    protected function parseWhere($where, $options)$/;"	f
parseWhere	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function parseWhere($where, $options = [])$/;"	f
parseWhereExp	.\thinkphp\library\think\db\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [], $strict = false)$/;"	f
parseWhereExp	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [])$/;"	f
parseWhereItem	.\thinkphp\library\think\db\Builder.php	/^    protected function parseWhereItem($field, $val, $rule = '', $options = [], $binds = [], $bindName = null)$/;"	f
parseWhereItem	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected function parseWhereItem($field, $val)$/;"	f
parsed	.\thinkphp\library\think\console\Input.php	/^        $this->parsed = $this->tokens;$/;"	v
parsed	.\thinkphp\library\think\console\Input.php	/^    private $parsed;$/;"	v
partial	.\vendor\topthink\think-mongo\src\Query.php	/^    public function partial($partial)$/;"	f
partition	.\thinkphp\library\think\db\Query.php	/^    public function partition($data, $field, $rule = [])$/;"	f
parts	.\thinkphp\library\think\Console.php	/^        $parts = explode(':', $name);$/;"	v
parts	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $parts    = [];$/;"	v
patch	.\thinkphp\library\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	f
patch	.\thinkphp\library\think\Route.php	/^    public static function patch($rule, $route = '', $option = [], $pattern = [])$/;"	f
path	.\thinkphp\library\think\App.php	/^            $path = APP_PATH . $module;$/;"	v
path	.\thinkphp\library\think\App.php	/^        $path   = $request->path();$/;"	v
path	.\thinkphp\library\think\Build.php	/^        foreach ($list as $path => $file) {$/;"	v
path	.\thinkphp\library\think\File.php	/^        $path = rtrim($path, DS) . DS;$/;"	v
path	.\thinkphp\library\think\Loader.php	/^        $path  = $array ? implode('\\\\', $array) . '\\\\' : '';$/;"	v
path	.\thinkphp\library\think\Loader.php	/^    public static function addNamespace($namespace, $path = '')$/;"	v
path	.\thinkphp\library\think\Model.php	/^            $path = explode('\\\\', get_called_class());$/;"	v
path	.\thinkphp\library\think\Paginator.php	/^            $path       = $this->options['path'];$/;"	v
path	.\thinkphp\library\think\Paginator.php	/^            $path       = str_replace('[PAGE]', $page, $this->options['path']);$/;"	v
path	.\thinkphp\library\think\Request.php	/^                $this->path = $pathinfo;$/;"	v
path	.\thinkphp\library\think\Request.php	/^                $this->path = preg_replace('\/\\.' . $this->ext() . '$\/i', '', $pathinfo);$/;"	v
path	.\thinkphp\library\think\Request.php	/^                $this->path = preg_replace('\/\\.(' . ltrim($suffix, '.') . ')$\/i', '', $pathinfo);$/;"	v
path	.\thinkphp\library\think\Request.php	/^    protected $path;$/;"	v
path	.\thinkphp\library\think\Request.php	/^    public function path()$/;"	f
path	.\thinkphp\library\think\Route.php	/^                    $path       = array_slice($path, count($item));$/;"	v
path	.\thinkphp\library\think\Route.php	/^            $path = [$url];$/;"	v
path	.\thinkphp\library\think\Route.php	/^            $path = explode('\/', $info['path']);$/;"	v
path	.\thinkphp\library\think\Route.php	/^            $path = explode('\/', $url);$/;"	v
path	.\thinkphp\library\think\Template.php	/^                $path   = $this->config['view_base'] . ($module ? $module . DS : '');$/;"	v
path	.\thinkphp\library\think\Template.php	/^                $path = isset($module) ? APP_PATH . $module . DS . basename($this->config['view_path']) . DS : $this->config['view_path'];$/;"	v
path	.\thinkphp\library\think\Template.php	/^        foreach ($includeFile as $path => $time) {$/;"	v
path	.\thinkphp\library\think\Url.php	/^                $path       = explode('\/', $url);$/;"	v
path	.\thinkphp\library\think\console\command\Clear.php	/^        $path  = realpath($path) . DS;$/;"	v
path	.\thinkphp\library\think\console\command\Clear.php	/^        $path = $input->getOption('path') ?: RUNTIME_PATH;$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $path = [];$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $path = [new \\SplFileInfo($path)];$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path     = substr($path, 1);$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($appPath) + 1);$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($extendPath) + 1);$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($rootPath) + 1);$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen(LIB_PATH));$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path   = substr($path, strlen($prefix));$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $path       = $this->normalizePath($path);$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $path     = strtr($path, '\\\\', '\/');$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Config.php	/^        $path    = realpath(APP_PATH . $module) . DS;$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $path = APP_PATH . $module . DS . 'model';$/;"	v
path	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $path = APP_PATH . 'model';$/;"	v
path	.\thinkphp\library\think\log\driver\File.php	/^        $path = dirname($destination);$/;"	v
path	.\thinkphp\library\think\model\relation\MorphTo.php	/^            $path = explode('\\\\', get_class($this->parent));$/;"	v
path	.\thinkphp\library\think\view\driver\Php.php	/^            $path   = $this->config['view_base'] . ($module ? $module . DS : '');$/;"	v
path	.\thinkphp\library\think\view\driver\Php.php	/^            $path = isset($module) ? APP_PATH . $module . DS . 'view' . DS : $this->config['view_path'];$/;"	v
path	.\thinkphp\library\think\view\driver\Think.php	/^            $path   = $this->config['view_base'] . ($module ? $module . DS : '');$/;"	v
path	.\thinkphp\library\think\view\driver\Think.php	/^            $path = isset($module) ? APP_PATH . $module . DS . 'view' . DS : $this->config['view_path'];$/;"	v
path	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $path = dirname(__FILE__) . '\/verify\/bgs\/';$/;"	v
path	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $path      = realpath($path);$/;"	v
path	.\vendor\topthink\think-migration\src\command\migrate\Create.php	/^        $path = $this->getPath();$/;"	v
path	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $path = $this->getPath();$/;"	v
path	.\vendor\topthink\think-migration\src\command\seed\Create.php	/^        $path = realpath($path);$/;"	v
pathCode	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $pathCode = $this->getPathCode($path) . ",\\n";$/;"	v
pathinfo	.\thinkphp\library\think\Request.php	/^            $pathinfo = $this->pathinfo();$/;"	v
pathinfo	.\thinkphp\library\think\Request.php	/^            $this->pathinfo = empty($_SERVER['PATH_INFO']) ? '\/' : ltrim($_SERVER['PATH_INFO'], '\/');$/;"	v
pathinfo	.\thinkphp\library\think\Request.php	/^    protected $pathinfo;$/;"	v
pathinfo	.\thinkphp\library\think\Request.php	/^    public function pathinfo()$/;"	f
pathname	.\thinkphp\library\think\console\command\Make.php	/^        $pathname = $this->getPathName($classname);$/;"	v
pathname	.\vendor\topthink\think-image\tests\CropTest.php	/^        $pathname = TEST_PATH . 'tmp\/crop.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\CropTest.php	/^        $pathname = TEST_PATH . 'tmp\/crop.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\CropTest.php	/^        $pathname = TEST_PATH . 'tmp\/crop.png';$/;"	v
pathname	.\vendor\topthink\think-image\tests\FlipTest.php	/^        $pathname = TEST_PATH . 'tmp\/flip.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\FlipTest.php	/^        $pathname = TEST_PATH . 'tmp\/flip.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\RotateTest.php	/^        $pathname = TEST_PATH . 'tmp\/rotate.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\RotateTest.php	/^        $pathname = TEST_PATH . 'tmp\/rotate.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\TextTest.php	/^        $pathname = TEST_PATH . 'tmp\/text.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\TextTest.php	/^        $pathname = TEST_PATH . 'tmp\/text.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\TextTest.php	/^        $pathname = TEST_PATH . 'tmp\/text.png';$/;"	v
pathname	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $pathname = TEST_PATH . 'tmp\/thumb.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $pathname = TEST_PATH . 'tmp\/thumb.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\ThumbTest.php	/^        $pathname = TEST_PATH . 'tmp\/thumb.png';$/;"	v
pathname	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $pathname = TEST_PATH . 'tmp\/water.gif';$/;"	v
pathname	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $pathname = TEST_PATH . 'tmp\/water.jpg';$/;"	v
pathname	.\vendor\topthink\think-image\tests\WaterTest.php	/^        $pathname = TEST_PATH . 'tmp\/water.png';$/;"	v
paths	.\thinkphp\library\think\Route.php	/^            $paths = explode('|', $pathinfo);$/;"	v
pattern	.\thinkphp\library\think\Route.php	/^            $pattern = $item['pattern'];$/;"	v
pattern	.\thinkphp\library\think\Route.php	/^            $pattern = array_merge(self::$rules['pattern'], $pattern);$/;"	v
pattern	.\thinkphp\library\think\Route.php	/^            $pattern = array_merge(self::getGroup('pattern'), $pattern);$/;"	v
pattern	.\thinkphp\library\think\Route.php	/^    public static function pattern($name = null, $rule = '')$/;"	f
pattern1	.\thinkphp\library\think\Route.php	/^                        $pattern1 = array_merge($pattern, isset($val[2]) ? $val[2] : []);$/;"	v
pattern1	.\thinkphp\library\think\Route.php	/^                    $pattern1 = array_merge($pattern, isset($val[2]) ? $val[2] : []);$/;"	v
pattern1	.\thinkphp\library\think\Route.php	/^                    $pattern1 = null;$/;"	v
patterns	.\thinkphp\library\think\Route.php	/^                    $patterns = isset($pattern1) ? $pattern1 : $pattern;$/;"	v
pause	.\thinkphp\library\think\Session.php	/^    public static function pause()$/;"	f
payload	.\extend\php-jwt-master\src\JWT.php	/^        if (null === $payload = static::jsonDecode(static::urlsafeB64Decode($bodyb64))) {$/;"	v
payload	.\vendor\firebase\php-jwt\src\JWT.php	/^        if (null === $payload = static::jsonDecode(static::urlsafeB64Decode($bodyb64))) {$/;"	v
payload	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $payload = array($/;"	v
payload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^            $payload = json_encode($this->createPlainPayload($job, $data));$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^            $payload = json_encode([$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^        $payload       = json_decode($payload, true);$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\Connector.php	/^        $payload       = json_encode($payload);$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\Job.php	/^        $payload = json_decode($this->getRawBody(), true);$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $payload = $this->createPayload($job, $data);$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $payload = $this->setMeta($/;"	v
payload	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $payload = $this->setMeta($payload, 'attempts', $attempts);$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^        $this->payload = $payload;$/;"	v
payload	.\vendor\topthink\think-queue\src\queue\job\Sync.php	/^    protected $payload;$/;"	v
pdo	.\thinkphp\library\think\db\Query.php	/^            $pdo = $this->field($field)->getPdo();$/;"	v
pdo	.\thinkphp\library\think\db\Query.php	/^            $pdo = $this->field($field)->limit(1)->getPdo();$/;"	v
pdo	.\thinkphp\library\think\db\connector\Mysql.php	/^        $pdo    = $this->linkID->query("EXPLAIN " . $sql);$/;"	v
pdo	.\thinkphp\library\think\db\connector\Mysql.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
pdo	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
pdo	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
pdo	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
pdo	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $pdo = $this->linkID->query($sql);$/;"	v
pgsql_type	.\thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION pgsql_type(a_type varchar) RETURNS varchar AS$/;"	f
phinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $phinxType = $this->getPhinxType($columnInfo['Type']);$/;"	v
phinxType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $phinxType = $this->getPhinxType($type);$/;"	v
phpFiles	.\vendor\topthink\think-migration\phinx\src\Phinx\Util\Util.php	/^        $phpFiles = glob($path . DIRECTORY_SEPARATOR . '*.php');$/;"	v
phpFiles	.\vendor\topthink\think-migration\src\command\Migrate.php	/^            $phpFiles = glob($this->getPath() . DS . '*.php', defined('GLOB_BRACE') ? GLOB_BRACE : 0);$/;"	v
phpFiles	.\vendor\topthink\think-migration\src\command\Seed.php	/^            $phpFiles = glob($this->getPath() . DS . '*.php', defined('GLOB_BRACE') ? GLOB_BRACE : 0);$/;"	v
pids	.\thinkphp\library\think\Process.php	/^                $pids = preg_split('\/\\s+\/', `ps -o pid --no-heading --ppid {$this->getPid()}`);$/;"	v
pipeline	.\vendor\topthink\think-mongo\src\Builder.php	/^        $pipeline          = [$/;"	v
pipeline	.\vendor\topthink\think-mongo\src\Builder.php	/^        $pipeline = [$/;"	v
pipes	.\thinkphp\library\think\process\pipes\Pipes.php	/^        $this->pipes = [];$/;"	v
pipes	.\thinkphp\library\think\process\pipes\Pipes.php	/^    public $pipes = [];$/;"	v
pipes	.\thinkphp\library\think\process\pipes\Unix.php	/^                $this->pipes = [];$/;"	v
pipes	.\thinkphp\library\think\process\pipes\Windows.php	/^                $this->pipes = [];$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pivot = [];$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pivot = new $class($data, $this->parent, $this->middle);$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->pivot = $this->newPivot();$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $pivot;$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function attach($data, $pivot = [])$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function pivot($pivot)$/;"	f
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	v
pivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function saveAll(array $dataSet, array $pivot = [], $samePivot = false)$/;"	v
pivotData	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $pivotData = $pivot;$/;"	v
pivotData	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $pivotData = isset($pivot[$key]) ? $pivot[$key] : [];$/;"	v
pivotName	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->pivotName = $table;$/;"	v
pivotName	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->pivotName = $pivot;$/;"	v
pivotName	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $pivotName;$/;"	v
pk	.\thinkphp\library\think\Model.php	/^            $pk = $this->getPk();$/;"	v
pk	.\thinkphp\library\think\Model.php	/^            $this->pk = $this->getQuery()->getPk();$/;"	v
pk	.\thinkphp\library\think\Model.php	/^        $pk = $this->getPk();$/;"	v
pk	.\thinkphp\library\think\Model.php	/^        if (is_string($pk) && $pk == $key) {$/;"	v
pk	.\thinkphp\library\think\Model.php	/^    protected $pk;$/;"	v
pk	.\thinkphp\library\think\Validate.php	/^        $pk = isset($rule[3]) ? $rule[3] : $db->getPk();$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^                $pk = $this->getPk($options);$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^                $pk = count($pk) > 1 ? $pk : $pk[0];$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^                $pk = null;$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^            $pk = $this->getTableInfo(is_array($options) ? $options['table'] : $options, 'pk');$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^            $pk = $this->pk;$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^        $pk      = $this->getPk($options);$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^        $pk = $this->getPk($options);$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^        $this->pk = $pk;$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^    protected $pk;$/;"	v
pk	.\thinkphp\library\think\db\Query.php	/^    public function pk($pk)$/;"	f
pk	.\thinkphp\library\think\model\Merge.php	/^                $pk = $this->data[$this->getPk()];$/;"	v
pk	.\thinkphp\library\think\model\Merge.php	/^        $pk = $this->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $pk         = $model->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk                     = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk    = $result->$pk;$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk    = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk = $result->$pk;$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk                     = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk         = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk      = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk    = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk    = $resultSet[0]->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $pk           = (new $through)->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $pk                    = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $pk = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $pk    = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $pk = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $pk = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $pk                    = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $pk   = $result->$pk;$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphOne.php	/^            $pk = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $pk = $result->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $pk = $this->parent->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphTo.php	/^                $pk    = $obj->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $pk            = $this->parent->$morphKey;$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $pk        = $model->getPk();$/;"	v
pk	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $pk   = $this->parent->{$this->morphKey};$/;"	v
pk	.\thinkphp\library\traits\model\SoftDelete.php	/^            $pk         = $this->getPk();$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^                    $pk = $key;$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^                $pk        = $this->getPk();$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^                $pk = null;$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^        $pk      = $this->getPk();$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^        $pk = $this->getPk();$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->pk = $pk;$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $pk;$/;"	v
pk	.\vendor\topthink\think-mongo\src\Query.php	/^    public function pk($pk)$/;"	f
pkSql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $pkSql = sprintf('CONSTRAINT PK_%s PRIMARY KEY (', $table->getName());$/;"	v
pkey	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $pkey = openssl_pkey_new();$/;"	v
placeholders	.\thinkphp\library\think\console\Command.php	/^        $placeholders = [$/;"	v
pool	.\vendor\topthink\think-helper\src\Str.php	/^        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';$/;"	v
pop	.\thinkphp\library\think\Collection.php	/^    public function pop()$/;"	f
pop	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null)$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    abstract public function pop($queue = null);$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    public function pop($queue = null, $delay = 0, $sleep = 3, $maxTries = 0)$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function pop($queue = null)$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function pop($queue = null)$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    public function pop($queue = null)$/;"	f
pop	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function pop($queue = null)$/;"	f
port	.\thinkphp\library\think\Request.php	/^    public function port()$/;"	f
port	.\thinkphp\library\think\cache\driver\Memcache.php	/^            $port = isset($ports[$i]) ? $ports[$i] : $ports[0];$/;"	v
port	.\thinkphp\library\think\log\driver\Socket.php	/^    public $port = 1116; \/\/SocketLog 服务的http的端口号$/;"	v
port	.\thinkphp\library\think\session\driver\Memcache.php	/^            $port = isset($ports[$i]) ? $ports[$i] : $ports[0];$/;"	v
portList	.\vendor\topthink\think-mongo\src\Connection.php	/^        $portList = explode(',', $this->config['hostport']);$/;"	v
ports	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $ports = explode(',', $this->options['port']);$/;"	v
ports	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $ports = explode(',', $this->options['port']);$/;"	v
ports	.\thinkphp\library\think\session\driver\Memcache.php	/^        $ports = explode(',', $this->config['port']);$/;"	v
ports	.\thinkphp\library\think\session\driver\Memcached.php	/^        $ports = explode(',', $this->config['port']);$/;"	v
pos	.\thinkphp\library\think\Debug.php	/^                $pos = strripos($content, '<\/body>');$/;"	v
pos	.\thinkphp\library\think\Debug.php	/^        $pos  = 0;$/;"	v
pos	.\thinkphp\library\think\Loader.php	/^        if (false !== $pos = strrpos($class, '\\\\')) {$/;"	v
pos	.\thinkphp\library\think\Request.php	/^                $pos = array_search('unknown', $arr);$/;"	v
pos	.\thinkphp\library\think\Route.php	/^                            $pos = array_search('*', $params);$/;"	v
pos	.\thinkphp\library\think\Route.php	/^                $pos = strpos(str_replace('<', ':', $key), ':');$/;"	v
pos	.\thinkphp\library\think\Template.php	/^                        if (false !== $pos = strpos($str, '?')) {$/;"	v
pos	.\thinkphp\library\think\Url.php	/^                $pos     = [];$/;"	v
pos	.\thinkphp\library\think\Url.php	/^        if (0 === strpos($url, '[') && $pos = strpos($url, ']')) {$/;"	v
pos	.\thinkphp\library\think\console\Input.php	/^                    if (false !== $pos = strpos($token, '=')) {$/;"	v
pos	.\thinkphp\library\think\console\Input.php	/^        if (false !== $pos = strpos($name, '=')) {$/;"	v
pos	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $pos = strrpos($contents, '?>');$/;"	v
pos	.\thinkphp\library\think\console\output\Formatter.php	/^            $pos  = $match[1];$/;"	v
pos	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $pos = array_search(static::$availableOptions[$option], $this->options);$/;"	v
pos	.\thinkphp\library\think\db\Builder.php	/^            if (isset($options['alias']) && $pos = array_search($table, $options['alias'])) {$/;"	v
pos	.\thinkphp\library\think\template\TagLib.php	/^                foreach ($nodes as $pos => $node) {$/;"	v
pos	.\vendor\composer\ClassLoader.php	/^        if (false !== $pos = strrpos($class, '\\\\')) {$/;"	v
post	.\thinkphp\library\think\Request.php	/^                $this->post = $_POST;$/;"	v
post	.\thinkphp\library\think\Request.php	/^                $this->post = (array) json_decode($content, true);$/;"	v
post	.\thinkphp\library\think\Request.php	/^            return $this->post = array_merge($this->post, $name);$/;"	v
post	.\thinkphp\library\think\Request.php	/^    protected $post    = [];$/;"	v
post	.\thinkphp\library\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	f
post	.\thinkphp\library\think\Route.php	/^    public static function post($rule, $route = '', $option = [], $pattern = [])$/;"	f
postMigrationCreation	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function postMigrationCreation($migrationFilename, $className, $baseClassName);$/;"	f
posx	.\vendor\topthink\think-image\src\Image.php	/^                $posx = ($width - $w * $scale) \/ 2;$/;"	v
posy	.\vendor\topthink\think-image\src\Image.php	/^                $posy = ($height - $h * $scale) \/ 2;$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $precision = (int) $matches[5];$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $precision = null;$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $precision = $matches[5];$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $precision = null;$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->precision = $precision;$/;"	v
precision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $precision;$/;"	v
precision	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function decimal($name, $precision = 8, $scale = 2)$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^        $prefix = !is_null($prefix) ? $prefix : $config['prefix'];$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^        $prefix = !is_null($prefix) ? $prefix : self::$config['prefix'];$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^    public static function delete($name, $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^    public static function get($name = '', $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^    public static function has($name, $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Cookie.php	/^    public static function prefix($prefix = '')$/;"	f
prefix	.\thinkphp\library\think\Loader.php	/^            foreach ($namespace as $prefix => $paths) {$/;"	v
prefix	.\thinkphp\library\think\Loader.php	/^            foreach (self::$prefixLengthsPsr4[$first] as $prefix => $length) {$/;"	v
prefix	.\thinkphp\library\think\Loader.php	/^            foreach (self::$prefixesPsr0[$first] as $prefix => $dirs) {$/;"	v
prefix	.\thinkphp\library\think\Route.php	/^    public static function setMethodPrefix($method, $prefix = '')$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^        $prefix = !is_null($prefix) ? $prefix : self::$prefix;$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^    protected static $prefix = '';$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^    public static function delete($name, $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^    public static function get($name = '', $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^    public static function has($name, $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\Session.php	/^    public static function prefix($prefix = '')$/;"	f
prefix	.\thinkphp\library\think\Session.php	/^    public static function pull($name, $prefix = null)$/;"	v
prefix	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^            $prefix = $match[1];$/;"	v
prefix	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $prefix   = '';$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^                $prefix = $this->prefix;$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^            $prefix = $prefix ?: $tableName;$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^            $prefix = $this->prefix;$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^        $prefix = $this->connection->getConfig('database') . '.';$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^        $this->prefix     = $this->connection->getConfig('prefix');$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^        $this->prefix = $this->connection->getConfig('prefix');$/;"	v
prefix	.\thinkphp\library\think\db\Query.php	/^    protected $prefix = '';$/;"	v
prefix	.\thinkphp\library\think\process\Builder.php	/^        $this->prefix = is_array($prefix) ? $prefix : [$prefix];$/;"	v
prefix	.\thinkphp\library\think\process\Builder.php	/^    private $prefix         = [];$/;"	v
prefix	.\vendor\composer\ClassLoader.php	/^            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {$/;"	v
prefix	.\vendor\topthink\think-mongo\src\Query.php	/^            $prefix = $this->prefix;$/;"	v
prefix	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->prefix     = $this->connection->getConfig('prefix');$/;"	v
prefix	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $prefix = '';$/;"	v
prefixDirsPsr4	.\thinkphp\library\think\Loader.php	/^    private static $prefixDirsPsr4 = [];$/;"	v
prefixDirsPsr4	.\vendor\composer\ClassLoader.php	/^    private $prefixDirsPsr4 = array();$/;"	v
prefixDirsPsr4	.\vendor\composer\autoload_static.php	/^    public static $prefixDirsPsr4 = array ($/;"	v
prefixLengthsPsr4	.\thinkphp\library\think\Loader.php	/^    private static $prefixLengthsPsr4 = [];$/;"	v
prefixLengthsPsr4	.\vendor\composer\ClassLoader.php	/^    private $prefixLengthsPsr4 = array();$/;"	v
prefixLengthsPsr4	.\vendor\composer\autoload_static.php	/^    public static $prefixLengthsPsr4 = array ($/;"	v
prefixesPsr0	.\thinkphp\library\think\Loader.php	/^    private static $prefixesPsr0 = [];$/;"	v
prefixesPsr0	.\vendor\composer\ClassLoader.php	/^    private $prefixesPsr0 = array();$/;"	v
prepend	.\thinkphp\library\think\Loader.php	/^    private static function addPsr0($prefix, $paths, $prepend = false)$/;"	v
prepend	.\thinkphp\library\think\Loader.php	/^    private static function addPsr4($prefix, $paths, $prepend = false)$/;"	v
prepend	.\vendor\composer\ClassLoader.php	/^    public function add($prefix, $paths, $prepend = false)$/;"	v
prepend	.\vendor\composer\ClassLoader.php	/^    public function addPsr4($prefix, $paths, $prepend = false)$/;"	v
preserveKeys	.\thinkphp\library\think\Collection.php	/^    public function chunk($size, $preserveKeys = false)$/;"	v
prev	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^            $prev    = count($versions) - 2;$/;"	v
printStatus	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^    protected function printStatus($format = null)$/;"	f
privKey	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $privKey = openssl_pkey_new(array('digest_alg' => 'sha256',$/;"	v
proc	.\thinkphp\library\think\Process.php	/^        $proc = @proc_open('echo 1', [['pty'], ['pty'], ['pty']], $pipes);$/;"	v
procedure	.\thinkphp\library\think\db\Connection.php	/^            $procedure = in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);$/;"	v
procedure	.\thinkphp\library\think\db\Connection.php	/^    protected function getResult($pdo = false, $procedure = false)$/;"	v
procedure	.\thinkphp\library\think\db\Connection.php	/^    protected function procedure()$/;"	f
process	.\thinkphp\library\think\Process.php	/^        $process = clone $this;$/;"	v
process	.\thinkphp\library\think\Process.php	/^        $this->process                      = null;$/;"	v
process	.\thinkphp\library\think\Process.php	/^        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);$/;"	v
process	.\thinkphp\library\think\Process.php	/^    private $process;$/;"	v
process	.\thinkphp\library\think\console\output\driver\Console.php	/^        $process        = proc_open('mode CON', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
process	.\thinkphp\library\think\console\output\driver\Console.php	/^        $process        = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
process	.\thinkphp\library\think\process\Builder.php	/^        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);$/;"	v
process	.\thinkphp\library\think\process\exception\Failed.php	/^        $this->process = $process;$/;"	v
process	.\thinkphp\library\think\process\exception\Failed.php	/^    private $process;$/;"	v
process	.\thinkphp\library\think\process\exception\Timeout.php	/^        $this->process     = $process;$/;"	v
process	.\thinkphp\library\think\process\exception\Timeout.php	/^    private $process;$/;"	v
process	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $process = $this->makeProcess($queue, $delay, $memory, $timeout);$/;"	v
process	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    public function process(Job $job, $maxTries = 0, $delay = 0)$/;"	f
processInformation	.\thinkphp\library\think\Process.php	/^        $this->processInformation           = null;$/;"	v
processInformation	.\thinkphp\library\think\Process.php	/^        $this->processInformation = proc_get_status($this->process);$/;"	v
processInformation	.\thinkphp\library\think\Process.php	/^    private $processInformation;$/;"	v
processPipes	.\thinkphp\library\think\Process.php	/^            $this->processPipes = UnixPipes::create($this, $this->input);$/;"	v
processPipes	.\thinkphp\library\think\Process.php	/^            $this->processPipes = WindowsPipes::create($this, $this->input);$/;"	v
processPipes	.\thinkphp\library\think\Process.php	/^    private $processPipes;$/;"	v
projection	.\vendor\topthink\think-mongo\src\Query.php	/^        $projection = [];$/;"	v
prompt	.\thinkphp\library\think\console\output\question\Choice.php	/^        $this->prompt = $prompt;$/;"	v
prompt	.\thinkphp\library\think\console\output\question\Choice.php	/^    private $prompt       = ' > ';$/;"	v
properties	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $properties = $column->getProperties();$/;"	v
properties	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->properties = $properties;$/;"	v
properties	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $properties = array();$/;"	v
protocol	.\thinkphp\library\think\Request.php	/^    public function protocol()$/;"	f
proxies	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^ * This abstract class proxies the various database methods to your specified$/;"	c
proxies	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^ * This abstract class proxies the various database methods to your specified$/;"	c
proxyAdapter	.\vendor\topthink\think-migration\src\command\Migrate.php	/^                $proxyAdapter = AdapterFactory::instance()->getWrapper('proxy', $this->getAdapter());$/;"	v
pty	.\thinkphp\library\think\Process.php	/^        $this->pty                          = false;$/;"	v
pty	.\thinkphp\library\think\Process.php	/^        $this->pty = (bool) $bool;$/;"	v
pty	.\thinkphp\library\think\Process.php	/^    private $pty;$/;"	v
ptyMode	.\thinkphp\library\think\process\pipes\Unix.php	/^        $this->ptyMode       = (bool) $ptyMode;$/;"	v
ptyMode	.\thinkphp\library\think\process\pipes\Unix.php	/^    private $ptyMode;$/;"	v
pubKey	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $pubKey = $pubKey['key'];$/;"	v
pubKey	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^        $pubKey = openssl_pkey_get_details($privKey);$/;"	v
pull	.\thinkphp\library\think\Cache.php	/^    public static function pull($name)$/;"	f
pull	.\thinkphp\library\think\Session.php	/^    public static function pull($name, $prefix = null)$/;"	f
pull	.\thinkphp\library\think\cache\Driver.php	/^    public function pull($name)$/;"	f
push	.\thinkphp\library\think\Collection.php	/^    public function push($value, $key = null)$/;"	f
push	.\thinkphp\library\think\Session.php	/^    public static function push($key, $value)$/;"	f
push	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function push(Style $style)$/;"	f
push	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    abstract public function push($job, $data = '', $queue = null);$/;"	f
push	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function push($job, $data = '', $queue = null)$/;"	f
push	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function push($job, $data = '', $queue = null)$/;"	f
push	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    public function push($job, $data = '', $queue = null)$/;"	f
push	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function push($job, $data = '', $queue = null)$/;"	f
pushExpiredJobsOntoNewQueue	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function pushExpiredJobsOntoNewQueue($to, $jobs, $attempt = true)$/;"	f
pushRaw	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function pushRaw($payload, $queue = null)$/;"	f
pushRaw	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function pushRaw($delay, $queue, $payload, $attempts = 0)$/;"	f
pushToDatabase	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function pushToDatabase($delay, $queue, $payload, $attempts = 0)$/;"	f
put	.\thinkphp\library\think\Request.php	/^                $this->put = (array) json_decode($content, true);$/;"	v
put	.\thinkphp\library\think\Request.php	/^            return $this->put = is_null($this->put) ? $name : array_merge($this->put, $name);$/;"	v
put	.\thinkphp\library\think\Request.php	/^    protected $put;$/;"	v
put	.\thinkphp\library\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	f
put	.\thinkphp\library\think\Route.php	/^    public static function put($rule, $route = '', $option = [], $pattern = [])$/;"	f
putByte	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function putByte($bytes)$/;"	f
px	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $px = $py = 0;$/;"	v
px	.\vendor\topthink\think-captcha\src\Captcha.php	/^        for ($px = $px1; $px <= $px2; $px = $px + 1) {$/;"	v
px1	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $px1 = $px2;$/;"	v
px1	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $px1 = 0; \/\/ 曲线横坐标起始位置$/;"	v
px2	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $px2 = $this->imageW;$/;"	v
px2	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $px2 = mt_rand($this->imageW \/ 2, $this->imageW * 0.8); \/\/ 曲线横坐标结束位置$/;"	v
py	.\vendor\topthink\think-captcha\src\Captcha.php	/^                $py = $A * sin($w * $px + $f) + $b + $this->imageH \/ 2; \/\/ y = Asin(ωx+φ) + b$/;"	v
queries	.\thinkphp\library\think\Paginator.php	/^            $queries = $key;$/;"	v
queries	.\thinkphp\library\think\Paginator.php	/^            $queries = [$key => $value];$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query      = new $queryClass($con, $this);$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query  = $model->db();$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query = $model->db();$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query = $this->db(true, false);$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query = $this->getQuery($buildNewQuery);$/;"	v
query	.\thinkphp\library\think\Model.php	/^        $query = static::parseQuery($data, $with, $cache);$/;"	v
query	.\thinkphp\library\think\Model.php	/^    protected $query;$/;"	v
query	.\thinkphp\library\think\Request.php	/^    public function query()$/;"	f
query	.\thinkphp\library\think\Route.php	/^                        $query  = strpos($model, '\\\\') ? $model::where($where) : Loader::model($model)->where($where);$/;"	v
query	.\thinkphp\library\think\db\Builder.php	/^                    $query = new Query($this->connection);$/;"	v
query	.\thinkphp\library\think\db\Builder.php	/^        $query = new Query($this->connection);$/;"	v
query	.\thinkphp\library\think\db\Builder.php	/^        $this->query      = $query;$/;"	v
query	.\thinkphp\library\think\db\Builder.php	/^    protected $query;$/;"	v
query	.\thinkphp\library\think\db\Connection.php	/^    public function query($sql, $bind = [], $master = false, $pdo = false)$/;"	f
query	.\thinkphp\library\think\db\Query.php	/^                $query  = $this->options($options)$/;"	v
query	.\thinkphp\library\think\db\Query.php	/^                $query = $this->options($options)->page($times, $count);$/;"	v
query	.\thinkphp\library\think\db\Query.php	/^            $query = $this->options($options)->limit($count);$/;"	v
query	.\thinkphp\library\think\db\Query.php	/^            $query = $this->options($options)->page($times, $count);$/;"	v
query	.\thinkphp\library\think\db\Query.php	/^    public function query($sql, $bind = [], $master = false, $class = false)$/;"	f
query	.\thinkphp\library\think\model\Merge.php	/^                    $query = new Query;$/;"	v
query	.\thinkphp\library\think\model\Merge.php	/^        $query = self::attachQuery($query);$/;"	v
query	.\thinkphp\library\think\model\Merge.php	/^        $query = self::parseQuery($data, $with, $cache);$/;"	v
query	.\thinkphp\library\think\model\Relation.php	/^    protected $query;$/;"	v
query	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->query      = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $query = $this->query->field($fields)$/;"	v
query	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->query = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\HasMany.php	/^        $this->query      = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->query      = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\HasOne.php	/^        $this->query      = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->query     = (new $model)->db();$/;"	v
query	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->query     = (new $model)->db();$/;"	v
query	.\thinkphp\library\traits\model\SoftDelete.php	/^        $query = self::withTrashed();$/;"	v
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function query($sql);$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function query($sql)$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function query($sql)$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function query($sql)$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function query($sql);$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function query($sql)$/;"	f
query	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function query($sql);$/;"	f
query	.\vendor\topthink\think-mongo\src\Builder.php	/^                    $query = new Query($this->connection);$/;"	v
query	.\vendor\topthink\think-mongo\src\Builder.php	/^        $query = [];$/;"	v
query	.\vendor\topthink\think-mongo\src\Builder.php	/^        $query = new MongoQuery($where, $options);$/;"	v
query	.\vendor\topthink\think-mongo\src\Builder.php	/^        $this->query      = $query;$/;"	v
query	.\vendor\topthink\think-mongo\src\Builder.php	/^    protected $query;$/;"	v
query	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $query = [];$/;"	v
query	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function query($namespace, MongoQuery $query, ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	f
query	.\vendor\topthink\think-mongo\src\Query.php	/^            $query = $this->builder->select($options);$/;"	v
query	.\vendor\topthink\think-mongo\src\Query.php	/^        $query = $this->builder->select($options);$/;"	v
query	.\vendor\topthink\think-mongo\src\Query.php	/^    public function query($namespace, MongoQuery $query, ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	f
queryClass	.\thinkphp\library\think\Model.php	/^        $queryClass = $this->query ?: $con->getConfig('query');$/;"	v
queryClass	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function getQuery($model = 'db', $queryClass = '')$/;"	v
queryStr	.\thinkphp\library\think\db\Connection.php	/^        $this->queryStr = $sql;$/;"	v
queryStr	.\thinkphp\library\think\db\Connection.php	/^    protected $queryStr = '';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->queryStr = $data . '(' . json_encode($options) . ');';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->queryStr = $type . '(' . ($data ? json_encode($data) : '') . ')';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->queryStr = $type . '(' . ($data ? json_encode($data) : '') . ');';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->queryStr = $type . '(' . json_encode($options) . ',' . json_encode($data) . ');';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^                $this->queryStr = 'runCommand(' . ($data ? json_encode($data) : '') . ');';$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->queryStr = 'db' . strstr($namespace, '.') . '.' . $this->queryStr;$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->queryStr = 'db.' . $this->queryStr;$/;"	v
queryStr	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $queryStr = '';$/;"	v
queryString	.\thinkphp\library\think\Request.php	/^                $queryString = $info['query'];$/;"	v
queryString	.\thinkphp\library\think\Request.php	/^                $queryString = http_build_query($params, '', '&');$/;"	v
queryString	.\thinkphp\library\think\Request.php	/^            $queryString = http_build_query($params, '', '&');$/;"	v
queryString	.\thinkphp\library\think\Request.php	/^        $queryString                  = '';$/;"	v
queryTimes	.\thinkphp\library\think\Db.php	/^    public static $queryTimes = 0;$/;"	v
question	.\thinkphp\library\think\console\Output.php	/^        $question = new Question($question);$/;"	v
question	.\thinkphp\library\think\console\Output.php	/^        $question = new Question($question, $default);$/;"	v
question	.\thinkphp\library\think\console\output\Ask.php	/^        $this->question = $question;$/;"	v
question	.\thinkphp\library\think\console\output\Ask.php	/^    protected $question;$/;"	v
question	.\thinkphp\library\think\console\output\Question.php	/^        $this->question = $question;$/;"	v
question	.\thinkphp\library\think\console\output\Question.php	/^    private $question;$/;"	v
queue	.\vendor\topthink\think-queue\src\common.php	/^    function queue($job, $data = '', $delay = 0, $queue = null)$/;"	f
queue	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected $queue;$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^        $this->queue = $queue;$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^    public $queue;$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\Queueable.php	/^    public function queue($queue)$/;"	f
queue	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^        $queue = $input->getOption('queue') ?: 'default';$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        $queue = $input->getOption('queue');$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^        $queue = $this->getQueue($queue);$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $queue = $this->getQueue($queue);$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function pushRaw($payload, $queue = null)$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $queue      = rawurlencode($queue_name);$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $queue = rawurlencode($queue);$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^        $this->queue         = $queue;$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^        $this->queue = $queue;$/;"	v
queue	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^        $this->queue         = $queue;$/;"	v
queueJob	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^        $queueJob = $this->resolveJob($this->createPayload($job, $data, $queue));$/;"	v
queueShouldRestart	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function queueShouldRestart($lastRestart)$/;"	f
queue_name	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $queue_name = $this->getQueue($queue);$/;"	v
quote	.\thinkphp\library\think\db\Connection.php	/^    public function quote($str, $master = true)$/;"	f
quote	.\thinkphp\library\think\process\Utils.php	/^                $quote = true;$/;"	v
quote	.\thinkphp\library\think\process\Utils.php	/^        $quote           = false;$/;"	v
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function quoteColumnName($columnName);$/;"	f
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function quoteColumnName($columnName)$/;"	f
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function quoteColumnName($columnName)$/;"	f
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function quoteColumnName($columnName)$/;"	f
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function quoteColumnName($columnName)$/;"	f
quoteColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function quoteColumnName($columnName)$/;"	f
quoteSchemaName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function quoteSchemaName($schemaName)$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function quoteTableName($tableName);$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function quoteTableName($tableName)$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function quoteTableName($tableName)$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function quoteTableName($tableName)$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function quoteTableName($tableName)$/;"	f
quoteTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function quoteTableName($tableName)$/;"	f
r	.\thinkphp\library\think\console\Command.php	/^            $r = new \\ReflectionFunction($code);$/;"	v
r	.\thinkphp\library\think\db\Connection.php	/^                $r = $m;$/;"	v
r	.\thinkphp\library\think\db\Connection.php	/^                $r = $this->config['slave_no'];$/;"	v
r	.\thinkphp\library\think\db\Connection.php	/^                $r = floor(mt_rand($this->config['master_num'], count($_config['hostname']) - 1));$/;"	v
r	.\thinkphp\library\think\db\Connection.php	/^            $r = floor(mt_rand(0, count($_config['hostname']) - 1));$/;"	v
r	.\thinkphp\library\think\db\Connection.php	/^        return $this->connect($dbConfig, $r, $r == $m ? false : $dbMaster);$/;"	v
r	.\thinkphp\library\think\process\pipes\Unix.php	/^            $r = $this->pipes;$/;"	v
r	.\thinkphp\library\think\process\pipes\Unix.php	/^            $r = array_merge($this->pipes, ['input' => $this->input]);$/;"	v
r	.\thinkphp\library\think\process\pipes\Windows.php	/^        $r = null !== $this->input ? ['input' => $this->input] : null;$/;"	v
r	.\vendor\topthink\think-mongo\src\Connection.php	/^                    $r = $m;$/;"	v
r	.\vendor\topthink\think-mongo\src\Connection.php	/^                $r = $this->config['slave_no'];$/;"	v
r	.\vendor\topthink\think-mongo\src\Connection.php	/^                $r = floor(mt_rand($this->config['master_num'], count($_config['hostname']) - 1));$/;"	v
r	.\vendor\topthink\think-mongo\src\Connection.php	/^            $r = floor(mt_rand(0, count($_config['hostname']) - 1));$/;"	v
rand	.\thinkphp\library\think\template\taglib\Cx.php	/^        $rand       = rand(); \/\/添加随机数，防止嵌套变量冲突$/;"	v
random	.\vendor\topthink\think-helper\src\Str.php	/^    public static function random($length = 16)$/;"	f
range	.\thinkphp\library\think\Config.php	/^        $range = $range ?: self::$range;$/;"	v
range	.\thinkphp\library\think\Config.php	/^    private static $range = '_sys_';$/;"	v
range	.\thinkphp\library\think\Config.php	/^    public static function get($name = null, $range = '')$/;"	v
range	.\thinkphp\library\think\Config.php	/^    public static function has($name, $range = '')$/;"	v
range	.\thinkphp\library\think\Config.php	/^    public static function range($range)$/;"	f
range	.\thinkphp\library\think\Lang.php	/^        $range = $range ?: self::$range;$/;"	v
range	.\thinkphp\library\think\Lang.php	/^    private static $range = 'zh-cn';$/;"	v
range	.\thinkphp\library\think\Lang.php	/^    public static function has($name, $range = '')$/;"	v
range	.\thinkphp\library\think\Lang.php	/^    public static function load($file, $range = '')$/;"	v
range	.\thinkphp\library\think\Lang.php	/^    public static function range($range = '')$/;"	f
range	.\thinkphp\library\think\db\Query.php	/^                        $range = $op;$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['first Day of last month 00:00:00', 'first Day of this month 00:00:00'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['first Day of this month 00:00:00', 'first Day of next month 00:00:00'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['last week 00:00:00', 'this week 00:00:00'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['last year 1\/1', 'this year 1\/1'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['this week 00:00:00', 'next week 00:00:00'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['this year 1\/1', 'next year 1\/1'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['today', 'tomorrow'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                        $range = ['yesterday', 'today'];$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^                $range = $op;$/;"	v
range	.\thinkphp\library\think\db\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	v
range	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $range = [];$/;"	v
range	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $range = [];$/;"	v
range	.\thinkphp\library\think\model\relation\HasMany.php	/^        $range    = [];$/;"	v
range	.\thinkphp\library\think\model\relation\HasOne.php	/^        $range = [];$/;"	v
range	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $range     = [];$/;"	v
range	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $range     = [];$/;"	v
range	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $range     = [];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = $op;$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = 'this week 00:00:00';$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = ['last week 00:00:00', 'this week 00:00:00'];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = ['today', 'tomorrow'];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = ['yesterday', 'today'];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = [date('y-m-01', strtotime('-1 month')), mktime(0, 0, 0, $date['mon'], 1, $date['year'])];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = [mktime(0, 0, 0, 1, 1, $date['year'] - 1), mktime(0, 0, 0, 1, 1, $date['year'])];$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = mktime(0, 0, 0, $date['mon'], 1, $date['year']);$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^                    $range = mktime(0, 0, 0, 1, 1, $date['year']);$/;"	v
range	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	v
raw	.\thinkphp\library\think\db\Query.php	/^    public function raw($value)$/;"	f
read	.\thinkphp\library\think\process\pipes\Unix.php	/^        $read = [];$/;"	v
read	.\thinkphp\library\think\process\pipes\Windows.php	/^        $read = [];$/;"	v
read	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function read($sessID)$/;"	f
read	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function read($sessID)$/;"	f
read	.\thinkphp\library\think\session\driver\Redis.php	/^    public function read($sessID)$/;"	f
read	.\thinkphp\library\think\template\driver\File.php	/^    public function read($cacheFile, $vars = [])$/;"	f
readAndWrite	.\thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function readAndWrite($blocking, $close = false);$/;"	f
readAndWrite	.\thinkphp\library\think\process\pipes\Unix.php	/^    public function readAndWrite($blocking, $close = false)$/;"	f
readAndWrite	.\thinkphp\library\think\process\pipes\Windows.php	/^    public function readAndWrite($blocking, $close = false)$/;"	f
readBytes	.\thinkphp\library\think\process\pipes\Windows.php	/^    private $readBytes = [$/;"	v
readCmd	.\thinkphp\library\think\console\output\Ask.php	/^            $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';$/;"	v
readDescriptor	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function readDescriptor()$/;"	f
readExtensions	.\vendor\topthink\think-image\src\image\gif\Decoder.php	/^    public function readExtensions()$/;"	f
readMaster	.\thinkphp\library\think\Model.php	/^    protected static $readMaster;$/;"	v
readMaster	.\thinkphp\library\think\Model.php	/^    public function readMaster($all = false)$/;"	f
readMaster	.\thinkphp\library\think\db\Query.php	/^    private static $readMaster = [];$/;"	v
readMaster	.\thinkphp\library\think\db\Query.php	/^    public function readMaster($allTable = false)$/;"	f
readPipes	.\thinkphp\library\think\Process.php	/^    private function readPipes($blocking, $close)$/;"	f
readPreference	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function query($namespace, MongoQuery $query, ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	v
readPreference	.\vendor\topthink\think-mongo\src\Query.php	/^                $readPreference = isset($options['readPreference']) ? $options['readPreference'] : null;$/;"	v
readPreference	.\vendor\topthink\think-mongo\src\Query.php	/^        $readPreference = isset($options['readPreference']) ? $options['readPreference'] : null;$/;"	v
readPreference	.\vendor\topthink\think-mongo\src\Query.php	/^    public function query($namespace, MongoQuery $query, ReadPreference $readPreference = null, $class = false, $typeMap = null)$/;"	v
readTimes	.\thinkphp\library\think\Cache.php	/^    public static $readTimes = 0;$/;"	v
readTransform	.\thinkphp\library\think\Model.php	/^    protected function readTransform($value, $type)$/;"	f
readonly	.\thinkphp\library\think\Model.php	/^        $this->readonly = $field;$/;"	v
readonly	.\thinkphp\library\think\Model.php	/^    protected $readonly = [];$/;"	v
readonly	.\thinkphp\library\think\Model.php	/^    public function readonly($field)$/;"	f
record	.\thinkphp\library\think\Log.php	/^    public static function record($msg, $type = 'log')$/;"	f
recordCommand	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function recordCommand($name, $arguments)$/;"	f
records	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $records = [];$/;"	v
recursive	.\thinkphp\library\think\Hook.php	/^    public static function import(array $tags, $recursive = true)$/;"	v
redirect	.\thinkphp\helper.php	/^    function redirect($url = [], $params = [], $code = 302, $with = [])$/;"	f
redirect	.\thinkphp\library\traits\controller\Jump.php	/^    protected function redirect($url, $params = [], $code = 302, $with = [])$/;"	f
redis	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^        $this->redis = new \\Redis;$/;"	v
redis	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected $redis;$/;"	v
redis	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^        $this->redis = $redis;$/;"	v
redis	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    protected $redis;$/;"	v
reduce	.\thinkphp\library\think\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	f
refColumnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $refColumnNames = array();$/;"	v
refColumnNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $refColumnNames = array();$/;"	v
referencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^            $referencedColumns = array($referencedColumns); \/\/ str to array$/;"	v
referencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addForeignKey($columns, $referencedTable, $referencedColumns = array('id'), $options = array())$/;"	v
referencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->referencedColumns = $referencedColumns;$/;"	v
referencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $referencedColumns = array();$/;"	v
referencedTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $this->referencedTable = $table;$/;"	v
referencedTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    protected $referencedTable;$/;"	v
reflect	.\thinkphp\library\think\App.php	/^            $reflect    = new \\ReflectionMethod($instance, $action);$/;"	v
reflect	.\thinkphp\library\think\App.php	/^            $reflect = new \\ReflectionMethod($class, $method[1]);$/;"	v
reflect	.\thinkphp\library\think\App.php	/^            $reflect = new \\ReflectionMethod($method);$/;"	v
reflect	.\thinkphp\library\think\App.php	/^        $reflect     = new \\ReflectionClass($class);$/;"	v
reflect	.\thinkphp\library\think\App.php	/^        $reflect = new \\ReflectionFunction($function);$/;"	v
reflect	.\thinkphp\library\think\console\command\optimize\Schema.php	/^        $reflect = new \\ReflectionClass($class);$/;"	v
reflection	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $reflection = new \\ReflectionFunction($value);$/;"	v
regenerate	.\thinkphp\library\think\Session.php	/^    public static function regenerate($delete = false)$/;"	f
regex	.\thinkphp\library\think\Template.php	/^                        $regex = $begin . $tagName . '\\b(?>(?:(?!' . $name . '=).)*)\\b' . $name . '=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.\\:@,\\\\\\\\]+)\\\\1(?>(?:(?!' . $end . ').)*)' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                        $regex = $begin . $tagName . '\\b(?>(?:(?!' . $name . '=).)*)\\b' . $name . '=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.\\:@,\\\\\\\\]+)\\\\1(?>[^' . $end . ']*)' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                        $regex = $begin . '(?:' . $tagName . '\\b(?>(?:(?!name=).)*)\\bname=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.]+)\\\\1(?>(?:(?!' . $end . ').)*)|\\\/' . $tagName . ')' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                        $regex = $begin . '(?:' . $tagName . '\\b(?>(?:(?!name=).)*)\\bname=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.]+)\\\\1(?>[^' . $end . ']*)|\\\/' . $tagName . ')' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                        $regex = '(' . $begin . $tagName . '\\b(?>(?:(?!' . $end . ').)*)' . $end . ')';$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                        $regex = '(' . $begin . $tagName . '\\b(?>[^' . $end . ']*)' . $end . ')';$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                    $regex = '<!--###literal(\\d+)###-->';$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                $regex = $begin . '((?:[\\$]{1,2}[a-wA-w_]|[\\:\\~][\\$a-wA-w_]|[+]{2}[\\$][a-wA-w_]|[-]{2}[\\$][a-wA-w_]|\\\/[\\*\\\/])(?>(?:(?!' . $end . ').)*))' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^                $regex = $begin . '((?:[\\$]{1,2}[a-wA-w_]|[\\:\\~][\\$a-wA-w_]|[+]{2}[\\$][a-wA-w_]|[-]{2}[\\$][a-wA-w_]|\\\/[\\*\\\/])(?>[^' . $end . ']*))' . $end;$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex  = $this->getRegex('block');$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex  = $this->getRegex('extend');$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex = $this->getRegex($restore ? 'restoreliteral' : 'literal');$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex = $this->getRegex('include');$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex = $this->getRegex('tag');$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex = '';$/;"	v
regex	.\thinkphp\library\think\Template.php	/^        $regex = '\/\\s+(?>(?P<name>[\\w-]+)\\s*)=(?>\\s*)([\\"\\'])(?P<value>(?:(?!\\\\2).)*)\\\\2\/is';$/;"	v
regex	.\thinkphp\library\think\Validate.php	/^    protected $regex = [];$/;"	v
regex	.\thinkphp\library\think\Validate.php	/^    protected function regex($value, $rule)$/;"	f
regex	.\thinkphp\library\think\console\output\question\Confirmation.php	/^        $regex   = $this->trueAnswerRegex;$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(' . $tagName . ')\\b(?>(?:(?!' . $end . ').)*)' . $end;$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(' . $tagName . ')\\b(?>[^' . $end . ']*)' . $end;$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(?:(' . $tagName . ')\\b(?>(?:(?!' . $end . ').)*)|\\\/(' . $tagName . '))' . $end;$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(?:(' . $tagName . ')\\b(?>[^' . $end . ']*)|\\\/(' . $tagName . '))' . $end;$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^            $regex   = $this->getRegex(array_keys($tags[0]), 0);$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^            $regex = $this->getRegex(array_keys($tags[1]), 1);$/;"	v
regex	.\thinkphp\library\think\template\TagLib.php	/^        $regex  = '\/\\s+(?>(?P<name>[\\w-]+)\\s*)=(?>\\s*)([\\"\\'])(?P<value>(?:(?!\\\\2).)*)\\\\2\/is';$/;"	v
register	.\thinkphp\library\think\Console.php	/^    public function register($name)$/;"	f
register	.\thinkphp\library\think\Error.php	/^    public static function register()$/;"	f
register	.\thinkphp\library\think\Loader.php	/^    public static function register($autoload = null)$/;"	f
register	.\vendor\composer\ClassLoader.php	/^    public function register($prepend = false)$/;"	f
registerAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    public function registerAdapter($name, $class)$/;"	f
registerComposerLoader	.\thinkphp\library\think\Loader.php	/^    private static function registerComposerLoader()$/;"	f
registerRules	.\thinkphp\library\think\Route.php	/^    protected static function registerRules($rules, $type = '*')$/;"	f
registerWrapper	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    public function registerWrapper($name, $class)$/;"	f
relation	.\thinkphp\library\think\Model.php	/^                    $relation   = $this->getAttr($key);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^                    $relation = Loader::parseName($name, 1, false);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^                $relation    = $key;$/;"	v
relation	.\thinkphp\library\think\Model.php	/^                $relation = $key;$/;"	v
relation	.\thinkphp\library\think\Model.php	/^            $relation = Loader::parseName($name, 1, false);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^            $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^            $relation = [];$/;"	v
relation	.\thinkphp\library\think\Model.php	/^            $relation = explode(',', $relation);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^        $relation   = Loader::parseName($trace[1]['function']);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^        $relation = (new static())->$relation();$/;"	v
relation	.\thinkphp\library\think\Model.php	/^        $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^        $relation = Loader::parseName($trace[1]['function']);$/;"	v
relation	.\thinkphp\library\think\Model.php	/^        $this->relation = [];$/;"	v
relation	.\thinkphp\library\think\Model.php	/^    protected $relation = [];$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^                    $relation = $key;$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^                $relation    = $key;$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^                $relation   = $key;$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^                $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^            $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^            $relation = explode(',', $relation);$/;"	v
relation	.\thinkphp\library\think\db\Query.php	/^    public function relation($relation)$/;"	f
relation	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->relation   = $relation;$/;"	v
relation	.\thinkphp\library\think\model\relation\HasMany.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	.\thinkphp\library\think\model\relation\HasOne.php	/^        $relation   = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	.\thinkphp\library\think\model\relation\HasOne.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $this->relation  = $relation;$/;"	v
relation	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected $relation;$/;"	v
relation	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected $relation;$/;"	v
relation	.\vendor\topthink\think-mongo\src\Query.php	/^    public function relation($relation)$/;"	f
relationCount	.\thinkphp\library\think\Model.php	/^    public function relationCount(&$result, $relation)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function relationCount($result, $closure)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function relationCount($result, $closure)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function relationCount($result, $closure)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function relationCount($result, $closure)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function relationCount($result, $closure)$/;"	f
relationCount	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function relationCount($result, $closure)$/;"	f
relationDel	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function detach($data = null, $relationDel = false)$/;"	v
relationFk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $relationFk = $data->getPk();$/;"	v
relationFk	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $relationFk = $this->query->getPk();$/;"	v
relationModel	.\thinkphp\library\think\model\Merge.php	/^    protected $relationModel = []; \/\/ HAS ONE 关联的模型列表$/;"	v
relationModel	.\thinkphp\library\think\model\relation\BelongsTo.php	/^                    $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\BelongsTo.php	/^                    $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\BelongsTo.php	/^            $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $relationModel = $this->query$/;"	v
relationModel	.\thinkphp\library\think\model\relation\HasOne.php	/^                    $relationModel = $data[$result->$localKey];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\HasOne.php	/^                    $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\HasOne.php	/^            $relationModel = $data[$result->$localKey];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\HasOne.php	/^            $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\HasOne.php	/^        $relationModel = $this->query$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphOne.php	/^                    $relationModel = $data[$result->$pk];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphOne.php	/^                    $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $relationModel = $data[$pk];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphOne.php	/^                $relationModel = null;$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $relationModel = $this->relation($subRelation)->find();$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphTo.php	/^                            $relationModel = $data[$result->$morphKey];$/;"	v
relationModel	.\thinkphp\library\think\model\relation\MorphTo.php	/^        $relationModel = (new $model)->relation($subRelation)->find($pk);$/;"	v
relationModel	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $relationModel = new $model($list[$relation]);$/;"	v
relationModel	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $relationModel = null;$/;"	v
relationQuery	.\thinkphp\library\think\Model.php	/^    public function relationQuery($relations)$/;"	f
relationWrite	.\thinkphp\library\think\Model.php	/^        $this->relationWrite = $relation;$/;"	v
relationWrite	.\thinkphp\library\think\Model.php	/^    protected $relationWrite;$/;"	v
relations	.\thinkphp\library\think\Model.php	/^            $relations = explode(',', $relations);$/;"	v
relations	.\thinkphp\library\think\Model.php	/^        $relations = is_string($relation) ? explode(',', $relation) : $relation;$/;"	v
relations	.\thinkphp\library\think\db\Query.php	/^            $relations = is_string($relation) ? explode(',', $relation) : $relation;$/;"	v
release	.\vendor\topthink\think-queue\src\queue\Job.php	/^    public function release($delay = 0)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    public function release($queue, $job, $delay)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    public function release($queue, $payload, $delay, $attempts)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    public function release($queue, $job, $delay)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\job\Database.php	/^    public function release($delay = 0)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\job\Redis.php	/^    public function release($delay = 0)$/;"	f
release	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    public function release($delay = 0)$/;"	f
releaseJobsThatHaveBeenReservedTooLong	.\vendor\topthink\think-queue\src\queue\connector\Database.php	/^    protected function releaseJobsThatHaveBeenReservedTooLong($queue)$/;"	f
released	.\vendor\topthink\think-queue\src\queue\Job.php	/^        $this->released = true;$/;"	v
released	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected $released = false;$/;"	v
relies	.\thinkphp\library\think\Process.php	/^            throw new \\RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.');$/;"	c
remainder	.\extend\php-jwt-master\src\JWT.php	/^        $remainder = strlen($input) % 4;$/;"	v
remainder	.\vendor\firebase\php-jwt\src\JWT.php	/^        $remainder = strlen($input) % 4;$/;"	v
remark	.\thinkphp\library\think\Debug.php	/^    public static function remark($name, $value = '')$/;"	f
remember	.\thinkphp\library\think\Cache.php	/^    public static function remember($name, $value, $expire = null)$/;"	f
remember	.\thinkphp\library\think\cache\Driver.php	/^    public function remember($name, $value, $expire = null)$/;"	f
remember	.\thinkphp\library\think\response\Redirect.php	/^    public function remember()$/;"	f
remotePort	.\thinkphp\library\think\Request.php	/^    public function remotePort()$/;"	f
removeAll	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^        $removeAll = $input->getOption('remove-all');$/;"	v
removeBreakpoints	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^    protected function removeBreakpoints()$/;"	f
removeColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function removeColumn($columnName)$/;"	f
removeExpiredJobs	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function removeExpiredJobs($from, $time)$/;"	f
removeFiles	.\thinkphp\library\think\process\pipes\Windows.php	/^    private function removeFiles()$/;"	f
removeIndex	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function removeIndex($columns, $options = array())$/;"	f
removeIndexByName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function removeIndexByName($name)$/;"	f
removeOption	.\thinkphp\library\think\db\Query.php	/^    public function removeOption($option = true)$/;"	f
removeOption	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function removeOption()$/;"	f
removeOption	.\vendor\topthink\think-mongo\src\Query.php	/^    public function removeOption($option = true)$/;"	f
removeRelation	.\thinkphp\library\think\Model.php	/^    public function removeRelation()$/;"	f
removeWhereField	.\thinkphp\library\think\db\Query.php	/^    public function removeWhereField($field, $logic = 'AND')$/;"	f
removeWhereField	.\vendor\topthink\think-mongo\src\Query.php	/^    public function removeWhereField($field, $logic = 'and')$/;"	f
rename	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function rename($newTableName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function renameColumn($tableName, $columnName, $newColumnName);$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function renameColumn($tableName, $columnName, $newColumnName)$/;"	f
renameColumn	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function renameColumn($oldName, $newName)$/;"	f
renameDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected function renameDefault($tableName, $columnName, $newColumnName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function renameTable($tableName, $newName);$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
renameTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\TablePrefixAdapter.php	/^    public function renameTable($tableName, $newTableName)$/;"	f
render	.\thinkphp\library\think\Paginator.php	/^    abstract public function render();$/;"	f
render	.\thinkphp\library\think\exception\Handle.php	/^        $this->render = $render;$/;"	v
render	.\thinkphp\library\think\exception\Handle.php	/^    protected $render;$/;"	v
render	.\thinkphp\library\think\exception\Handle.php	/^    public function render(Exception $e)$/;"	f
render	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^    public function render()$/;"	f
renderException	.\thinkphp\library\think\console\Output.php	/^    public function renderException(\\Exception $e)$/;"	f
renderException	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    public function renderException(\\Exception $e)$/;"	f
renderException	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function renderException(\\Exception $e)$/;"	f
renderException	.\thinkphp\library\think\console\output\driver\Nothing.php	/^    public function renderException(\\Exception $e)$/;"	f
renderForConsole	.\thinkphp\library\think\exception\Handle.php	/^    public function renderForConsole(Output $output, Exception $e)$/;"	f
renderHttpException	.\thinkphp\library\think\exception\Handle.php	/^    protected function renderHttpException(HttpException $e)$/;"	f
replace	.\thinkphp\library\think\Db.php	/^ * @method integer insert(array $data, boolean $replace = false, boolean $getLastInsID = false, string $sequence = null) static 插入一条记录$/;"	v
replace	.\thinkphp\library\think\Db.php	/^ * @method integer insertGetId(array $data, boolean $replace = false, string $sequence = null) static 插入一条记录并返回自增ID$/;"	v
replace	.\thinkphp\library\think\Lang.php	/^                $replace = array_keys($vars);$/;"	v
replace	.\thinkphp\library\think\Model.php	/^    public function saveAll($dataSet, $replace = true)$/;"	v
replace	.\thinkphp\library\think\Route.php	/^                $replace = [];$/;"	v
replace	.\thinkphp\library\think\Template.php	/^                            $replace = str_replace($baseBlocks[$key]['begin'] . $baseBlocks[$key]['content'] . $baseBlocks[$key]['end'], $blocks[$key]['content'], $replace);$/;"	v
replace	.\thinkphp\library\think\Template.php	/^                        $replace = str_replace(['{__BLOCK__}', '{__block__}'], $replace, $blocks[$name]['content']);$/;"	v
replace	.\thinkphp\library\think\Template.php	/^                    $replace = $val['content'];$/;"	v
replace	.\thinkphp\library\think\Template.php	/^                    $replace = isset($array['replace']) ? $array['replace'] : $this->config['layout_item'];$/;"	v
replace	.\thinkphp\library\think\Template.php	/^            $replace = ['><', '>'];$/;"	v
replace	.\thinkphp\library\think\Template.php	/^        $replace = $this->config['tpl_replace_string'];$/;"	v
replace	.\thinkphp\library\think\Template.php	/^    public function layout($name, $replace = '')$/;"	v
replace	.\thinkphp\library\think\View.php	/^            $replace = array_merge($this->replace, $replace, (array) $this->engine->config('tpl_replace_string'));$/;"	v
replace	.\thinkphp\library\think\View.php	/^            $this->replace = array_merge($this->replace, $content);$/;"	v
replace	.\thinkphp\library\think\View.php	/^        $this->replace = array_merge($baseReplace, (array) $replace);$/;"	v
replace	.\thinkphp\library\think\View.php	/^    protected $replace = [];$/;"	v
replace	.\thinkphp\library\think\View.php	/^    public function __construct($engine = [], $replace = [])$/;"	v
replace	.\thinkphp\library\think\View.php	/^    public function replace($content, $replace = '')$/;"	f
replace	.\thinkphp\library\think\View.php	/^    public function replace($content, $replace = '')$/;"	v
replace	.\thinkphp\library\think\View.php	/^    public static function instance($engine = [], $replace = [])$/;"	v
replace	.\thinkphp\library\think\db\Query.php	/^    public function insertAll(array $dataSet, $replace = false, $limit = null)$/;"	v
replace	.\thinkphp\library\think\db\Query.php	/^    public function insertGetId(array $data, $replace = false, $sequence = null)$/;"	v
replace	.\thinkphp\library\think\response\View.php	/^            $this->replace = array_merge($this->replace, $content);$/;"	v
replace	.\thinkphp\library\think\response\View.php	/^    protected $replace     = [];$/;"	v
replace	.\thinkphp\library\think\response\View.php	/^    public function replace($content, $replace = '')$/;"	f
replace	.\thinkphp\library\think\response\View.php	/^    public function replace($content, $replace = '')$/;"	v
replace	.\thinkphp\library\think\template\TagLib.php	/^                    $replace = explode($break, $this->$method($attrs, $break));$/;"	v
replace	.\vendor\topthink\think-mongo\src\Query.php	/^    public function insert(array $data, $replace = null, $getLastInsID = false)$/;"	v
replaceColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $replaceColumns = array();$/;"	v
replacements	.\thinkphp\library\think\console\Command.php	/^        $replacements = [$/;"	v
replicaSetConnect	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function replicaSetConnect()$/;"	f
report	.\thinkphp\library\think\exception\Handle.php	/^    public function report(Exception $exception)$/;"	f
reportHttpError	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected function reportHttpError($status, $text)$/;"	f
reqs	.\thinkphp\library\think\debug\Console.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
reqs	.\thinkphp\library\think\debug\Html.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
reqs	.\thinkphp\library\think\log\driver\File.php	/^                $reqs       = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
reqs	.\thinkphp\library\think\log\driver\Socket.php	/^            $reqs       = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
request	.\thinkphp\helper.php	/^    function request()$/;"	f
request	.\thinkphp\library\think\App.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\App.php	/^        $request = is_null($request) ? Request::instance() : $request;$/;"	v
request	.\thinkphp\library\think\App.php	/^    public static function run(Request $request = null)$/;"	v
request	.\thinkphp\library\think\Controller.php	/^        $this->request = is_null($request) ? Request::instance() : $request;$/;"	v
request	.\thinkphp\library\think\Controller.php	/^    protected $request;$/;"	v
request	.\thinkphp\library\think\Controller.php	/^    public function __construct(Request $request = null)$/;"	v
request	.\thinkphp\library\think\Request.php	/^            $this->request = $_REQUEST;$/;"	v
request	.\thinkphp\library\think\Request.php	/^            return $this->request = array_merge($this->request, $name);$/;"	v
request	.\thinkphp\library\think\Request.php	/^    protected $request = [];$/;"	v
request	.\thinkphp\library\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	f
request	.\thinkphp\library\think\Route.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\Url.php	/^        $request    = Request::instance();$/;"	v
request	.\thinkphp\library\think\Url.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\View.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\controller\Rest.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\debug\Console.php	/^        $request     = Request::instance();$/;"	v
request	.\thinkphp\library\think\debug\Html.php	/^        $request     = Request::instance();$/;"	v
request	.\thinkphp\library\think\view\driver\Php.php	/^        $request = Request::instance();$/;"	v
request	.\thinkphp\library\think\view\driver\Think.php	/^        $request = Request::instance();$/;"	v
request	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $this->request = Request::instance();$/;"	v
request	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $request;$/;"	v
requireCallback	.\thinkphp\library\think\Validate.php	/^    protected function requireCallback($value, $rule, $data)$/;"	f
requireIf	.\thinkphp\library\think\Validate.php	/^    protected function requireIf($value, $rule, $data)$/;"	f
requireProcessIsStarted	.\thinkphp\library\think\Process.php	/^    private function requireProcessIsStarted($functionName)$/;"	f
requireProcessIsTerminated	.\thinkphp\library\think\Process.php	/^    private function requireProcessIsTerminated($functionName)$/;"	f
requireWith	.\thinkphp\library\think\Validate.php	/^    protected function requireWith($value, $rule, $data)$/;"	f
requiredCount	.\thinkphp\library\think\console\input\Definition.php	/^        $this->requiredCount      = 0;$/;"	v
requiredCount	.\thinkphp\library\think\console\input\Definition.php	/^    private $requiredCount;$/;"	v
res	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
res	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
reset	.\thinkphp\library\think\Config.php	/^    public static function reset($range = '')$/;"	f
reset	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function reset()$/;"	f
reset	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function reset()$/;"	f
resetAllBreakpoints	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function resetAllBreakpoints();$/;"	f
resetAllBreakpoints	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function resetAllBreakpoints()$/;"	f
resetAllBreakpoints	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function resetAllBreakpoints()$/;"	f
resetProcessData	.\thinkphp\library\think\Process.php	/^    private function resetProcessData()$/;"	f
resolution	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                        '<warning>Warning: Ambiguous class resolution, "' . $class . '"' .$/;"	c
resolution	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                    '<warning>Warning: Ambiguous class resolution, "' . $class . '"' .$/;"	c
resolve	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected function resolve($name)$/;"	f
resolveAndFire	.\vendor\topthink\think-queue\src\queue\Job.php	/^    protected function resolveAndFire(array $payload)$/;"	f
resolveJob	.\vendor\topthink\think-queue\src\queue\connector\Sync.php	/^    protected function resolveJob($payload)$/;"	f
resource	.\thinkphp\library\think\Route.php	/^    public static function resource($rule, $route = '', $option = [], $pattern = [])$/;"	f
resource	.\thinkphp\library\think\Route.php	/^    public static function rest($name, $resource = [])$/;"	v
response	.\thinkphp\helper.php	/^    function response($data = [], $code = 200, $header = [], $type = 'html')$/;"	f
response	.\thinkphp\library\think\App.php	/^            $response = $data;$/;"	v
response	.\thinkphp\library\think\App.php	/^            $response = Response::create($data, $type);$/;"	v
response	.\thinkphp\library\think\App.php	/^            $response = Response::create();$/;"	v
response	.\thinkphp\library\think\Request.php	/^                $response               = Response::create($content)->header($header);$/;"	v
response	.\thinkphp\library\think\Request.php	/^                $response = Response::create()->code(304);$/;"	v
response	.\thinkphp\library\think\Response.php	/^            $response = new $class($data, $code, $header, $options);$/;"	v
response	.\thinkphp\library\think\Response.php	/^            $response = new static($data, $code, $header, $options);$/;"	v
response	.\thinkphp\library\think\controller\Rest.php	/^    protected function response($data, $type = 'json', $code = 200)$/;"	f
response	.\thinkphp\library\think\exception\Handle.php	/^        $response = new Response($content, 'html');$/;"	v
response	.\thinkphp\library\think\exception\HttpResponseException.php	/^        $this->response = $response;$/;"	v
response	.\thinkphp\library\think\exception\HttpResponseException.php	/^    protected $response;$/;"	v
response	.\thinkphp\library\traits\controller\Jump.php	/^        $response = Response::create($result, $type)->header($header);$/;"	v
response	.\thinkphp\library\traits\controller\Jump.php	/^        $response = new Redirect($url);$/;"	v
response	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^            $response = $this->worker->pop($queue, $delay, $input->getOption('sleep'), $input->getOption('tries'));$/;"	v
response	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^            $response = $this->worker->pop($queue, $delay, $sleep, $maxTries);$/;"	v
rest	.\thinkphp\library\think\Route.php	/^    private static $rest = [$/;"	v
rest	.\thinkphp\library\think\Route.php	/^    public static function rest($name, $resource = [])$/;"	f
restDefaultMethod	.\thinkphp\library\think\controller\Rest.php	/^    protected $restDefaultMethod = 'get';$/;"	v
restDefaultType	.\thinkphp\library\think\controller\Rest.php	/^    protected $restDefaultType   = 'html';$/;"	v
restMethodList	.\thinkphp\library\think\controller\Rest.php	/^    protected $restMethodList    = 'get|post|put|delete';$/;"	v
restOutputType	.\thinkphp\library\think\controller\Rest.php	/^    protected $restOutputType    = [ \/\/ REST允许输出的资源类型列表$/;"	v
restTypeList	.\thinkphp\library\think\controller\Rest.php	/^    protected $restTypeList      = 'html|xml|json|rss';$/;"	v
restart	.\thinkphp\library\think\Process.php	/^    public function restart($callback = null)$/;"	f
restore	.\thinkphp\library\think\Template.php	/^    private function parseLiteral(&$content, $restore = false)$/;"	v
restore	.\thinkphp\library\think\response\Redirect.php	/^    public function restore()$/;"	f
restore	.\thinkphp\library\traits\model\SoftDelete.php	/^    public function restore($where = [])$/;"	f
result	.\thinkphp\library\think\App.php	/^                $result = $bind;$/;"	v
result	.\thinkphp\library\think\App.php	/^                $result = method_exists($className, 'instance') ?$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = $param->getDefaultValue();$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = $vars[$name];$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = Route::check($request, $path, $depr, $config['url_domain_deploy']);$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = Route::parseUrl($path, $depr, $config['controller_auto_search']);$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = array_shift($vars);$/;"	v
result	.\thinkphp\library\think\App.php	/^            $result = explode('\/', $result);$/;"	v
result	.\thinkphp\library\think\App.php	/^        $result = false;$/;"	v
result	.\thinkphp\library\think\Collection.php	/^            $result = $callback($item, $key);$/;"	v
result	.\thinkphp\library\think\Collection.php	/^        $result = [];$/;"	v
result	.\thinkphp\library\think\Env.php	/^                $result = false;$/;"	v
result	.\thinkphp\library\think\Env.php	/^                $result = true;$/;"	v
result	.\thinkphp\library\think\Env.php	/^        $result = getenv(ENV_PREFIX . strtoupper(str_replace('.', '_', $name)));$/;"	v
result	.\thinkphp\library\think\Hook.php	/^            $result = $class->$method($params, $extra);$/;"	v
result	.\thinkphp\library\think\Hook.php	/^            $result = $obj->$method($params, $extra);$/;"	v
result	.\thinkphp\library\think\Hook.php	/^            $result = (new $class())->$method($params, $extra);$/;"	v
result	.\thinkphp\library\think\Hook.php	/^            $result = call_user_func_array($class, [ & $params, $extra]);$/;"	v
result	.\thinkphp\library\think\Model.php	/^                    $result = call_user_func_array($callback, [ & $params]);$/;"	v
result	.\thinkphp\library\think\Model.php	/^                $result = $data->delete();$/;"	v
result	.\thinkphp\library\think\Model.php	/^                $result = $this->getQuery()->insert($this->data, false, false, $sequence);$/;"	v
result	.\thinkphp\library\think\Model.php	/^                $result = $this->getQuery()->strict(false)->field($allowFields)->insert($this->data, false, false, $sequence);$/;"	v
result	.\thinkphp\library\think\Model.php	/^                $result = $this->getQuery()->where($where)->strict(false)->field($allowFields)->update($data);$/;"	v
result	.\thinkphp\library\think\Model.php	/^                $result = $this->getQuery()->where($where)->update($data);$/;"	v
result	.\thinkphp\library\think\Model.php	/^            $result = $data->with($with)->cache($cache);$/;"	v
result	.\thinkphp\library\think\Model.php	/^            $result = $result->where($data);$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = $model->isUpdate(true)->save($data, $where);$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = $this->getQuery()->where($where)->delete();$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = $this->getQuery()->where($where)->setDec($field, $step, $lazyTime);$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = $this->getQuery()->where($where)->setInc($field, $step, $lazyTime);$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = [];$/;"	v
result	.\thinkphp\library\think\Model.php	/^        $result = self::with($with)->cache($cache);$/;"	v
result	.\thinkphp\library\think\Paginator.php	/^            $result = $callback($item, $key);$/;"	v
result	.\thinkphp\library\think\Paginator.php	/^        $result = call_user_func_array([$collection, $name], $arguments);$/;"	v
result	.\thinkphp\library\think\Process.php	/^            return $result = false;$/;"	v
result	.\thinkphp\library\think\Process.php	/^            return $result = true;$/;"	v
result	.\thinkphp\library\think\Process.php	/^        $result = $this->processPipes->readAndWrite($blocking, $close);$/;"	v
result	.\thinkphp\library\think\Process.php	/^        return $result = false;$/;"	v
result	.\thinkphp\library\think\Process.php	/^        static $result;$/;"	v
result	.\thinkphp\library\think\Request.php	/^            if (function_exists('apache_request_headers') && $result = apache_request_headers()) {$/;"	v
result	.\thinkphp\library\think\Request.php	/^        $result = !is_null($this->server('HTTP_X_PJAX')) ? true : false;$/;"	v
result	.\thinkphp\library\think\Request.php	/^        $result = ('xmlhttprequest' == $value) ? true : false;$/;"	v
result	.\thinkphp\library\think\Route.php	/^                        $result = $array['path'];$/;"	v
result	.\thinkphp\library\think\Route.php	/^                        $result = $query->failException($exception)->find();$/;"	v
result	.\thinkphp\library\think\Route.php	/^                        $result = $rule;$/;"	v
result	.\thinkphp\library\think\Route.php	/^                        $result = call_user_func_array($pattern[$name], [$m1[$key]]);$/;"	v
result	.\thinkphp\library\think\Route.php	/^                    $result = Hook::exec($behavior, '');$/;"	v
result	.\thinkphp\library\think\Route.php	/^                    $result = call_user_func_array($val, [$matches]);$/;"	v
result	.\thinkphp\library\think\Route.php	/^                $result = call_user_func_array($option['after_behavior'], []);$/;"	v
result	.\thinkphp\library\think\Route.php	/^                $result = self::checkRoute($request, $rule, $url, $depr, $key, $option);$/;"	v
result	.\thinkphp\library\think\Route.php	/^                $result = self::checkRule($rule, $route, $url, $pattern, $option, $depr);$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result            = ['type' => 'controller', 'controller' => implode('\/', $route), 'var' => $var];$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result           = ['type' => 'method', 'method' => $method, 'var' => $var];$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result = ['type' => 'function', 'function' => $route];$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result = ['type' => 'redirect', 'url' => $route, 'status' => isset($option['status']) ? $option['status'] : 301];$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result = self::checkRouteAlias($request, $url, $depr);$/;"	v
result	.\thinkphp\library\think\Route.php	/^            $result = self::parseModule($route, isset($option['convert']) ? $option['convert'] : false);$/;"	v
result	.\thinkphp\library\think\Session.php	/^        $result = self::get($name, $prefix);$/;"	v
result	.\thinkphp\library\think\Template.php	/^        $result = [];$/;"	v
result	.\thinkphp\library\think\Url.php	/^                    $result = [$url, $domain, $suffix];$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                    $result = $this->regex($value, $rule);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                    $result = call_user_func_array($callback, [$value, $rule, $data, $field, $title]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                    $result = call_user_func_array(self::$type[$rule], [$value]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                    $result = str_replace([':attribute', ':rule'], [$title, (string) $rule], $result);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                    $result = true;$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = !empty($value) || '0' == $value;$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->checkItem($key, $value, $rule, $data, $title, $msg);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->filter($value, FILTER_VALIDATE_EMAIL);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->filter($value, FILTER_VALIDATE_FLOAT);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->filter($value, FILTER_VALIDATE_INT);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->filter($value, FILTER_VALIDATE_URL);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->filter($value, [FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[A-Za-z0-9\\-\\_]+$\/');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[A-Za-z0-9]+$\/');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[A-Za-z]+$\/');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[\\x{4e00}-\\x{9fa5}]+$\/u');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[\\x{4e00}-\\x{9fa5}a-zA-Z0-9\\_\\-]+$\/u');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[\\x{4e00}-\\x{9fa5}a-zA-Z0-9]+$\/u');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->regex($value, '\/^[\\x{4e00}-\\x{9fa5}a-zA-Z]+$\/u');$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $this->token($value, '__token__', $data);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $value instanceof File && in_array($this->getImageType($value->getRealPath()), [1, 2, 3, 6]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = $value instanceof File;$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = call_user_func_array($callback, [$value, $rule]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = call_user_func_array($rule, [$value, $data]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = call_user_func_array($rule, [$value]);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = checkdnsrr($value);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = false !== strtotime($value);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = in_array($value, ['1', 'on', 'yes']);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = in_array($value, [true, false, 0, 1, '0', '1'], true);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = is_array($value);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^                $result = is_numeric($value);$/;"	v
result	.\thinkphp\library\think\Validate.php	/^        $result = call_user_func_array($rule, [$value, $data]);$/;"	v
result	.\thinkphp\library\think\cache\Driver.php	/^        $result = $this->get($name, false);$/;"	v
result	.\thinkphp\library\think\cache\driver\File.php	/^        $result = file_put_contents($filename, $data);$/;"	v
result	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
result	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
result	.\thinkphp\library\think\cache\driver\Redis.php	/^            $result = $default;$/;"	v
result	.\thinkphp\library\think\cache\driver\Redis.php	/^            $result = $this->handler->set($key, $value);$/;"	v
result	.\thinkphp\library\think\cache\driver\Redis.php	/^            $result = $this->handler->setex($key, $expire, $value);$/;"	v
result	.\thinkphp\library\think\cache\driver\Redis.php	/^            $result = 0 === strpos($value, 'think_serialize:') ? unserialize(substr($value, 16)) : $value;$/;"	v
result	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $result = sqlite_query($this->handler, $sql);$/;"	v
result	.\thinkphp\library\think\config\driver\Json.php	/^        $result = json_decode($config, true);$/;"	v
result	.\thinkphp\library\think\config\driver\Xml.php	/^        $result = (array) $content;$/;"	v
result	.\thinkphp\library\think\console\output\question\Choice.php	/^                        $result = $choices[$result];$/;"	v
result	.\thinkphp\library\think\console\output\question\Choice.php	/^                        $result = $choices[$value];$/;"	v
result	.\thinkphp\library\think\console\output\question\Choice.php	/^                    $result = $value;$/;"	v
result	.\thinkphp\library\think\console\output\question\Choice.php	/^                $result = array_search($value, $choices);$/;"	v
result	.\thinkphp\library\think\db\Builder.php	/^        $result = [];$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                    $result = $this->getExplain($sql);$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                $result  = [];$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                $result = $this->PDOStatement->bindValue($param, $val);$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                $result = $this->PDOStatement->bindValue($param, $val[0], $val[1]);$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                $result = call_user_func_array($callback, [$this]);$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^                $result = call_user_func_array([$this->PDOStatement, 'bindParam'], $val);$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^            $result = $this->getResult();$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^            $result = null;$/;"	v
result	.\thinkphp\library\think\db\Connection.php	/^        $result        = $this->PDOStatement->fetchAll($this->fetchType);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^                    $result = [];$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^                $result = $pdo->fetchAll(PDO::FETCH_COLUMN);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^                $result = $this->model->newInstance($result);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^                $result = isset($resultSet[0]) ? $resultSet[0] : null;$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^            $result   = call_user_func_array($callback, [$params, $this]);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^            $result = $pdo->fetchColumn();$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^            $result = '' == $sql ? 0 : $this->execute($sql, $bind, $this);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^            $result = Cache::get($guid);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^            $result = Cache::get($key);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^        $result           = false;$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^        $result = $this->execute($sql, $bind, $this);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^        $result = 0 === $sql ? 0 : $this->execute($sql, $bind, $this);$/;"	v
result	.\thinkphp\library\think\db\Query.php	/^        $result = false;$/;"	v
result	.\thinkphp\library\think\db\connector\Mysql.php	/^        $result = $pdo->fetch(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\db\connector\Mysql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\db\connector\Mysql.php	/^        $result = array_change_key_case($result);$/;"	v
result	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $result = $pdo->fetch(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	.\thinkphp\library\think\debug\Console.php	/^                            $result = array_merge($result, isset($log[$name]) ? $log[$name] : []);$/;"	v
result	.\thinkphp\library\think\debug\Console.php	/^                        $result = [];$/;"	v
result	.\thinkphp\library\think\debug\Html.php	/^                            $result = array_merge($result, isset($log[$name]) ? $log[$name] : []);$/;"	v
result	.\thinkphp\library\think\debug\Html.php	/^                        $result = [];$/;"	v
result	.\thinkphp\library\think\exception\Handle.php	/^            $result = call_user_func_array($this->render, [$e]);$/;"	v
result	.\thinkphp\library\think\model\Merge.php	/^                        $result = 1;$/;"	v
result	.\thinkphp\library\think\model\Merge.php	/^                $result = $db->name($this->name)->strict(false)->insert($data);$/;"	v
result	.\thinkphp\library\think\model\Merge.php	/^                $result = $db->strict(false)->where($where)->update($data);$/;"	v
result	.\thinkphp\library\think\model\Merge.php	/^            $result = $db->delete($this->data);$/;"	v
result	.\thinkphp\library\think\model\Relation.php	/^            $result = call_user_func_array([$this->query, $method], $args);$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^                $result = $result[0];$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $result = $this->attach($data, $pivotData);$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->find($data);$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->paginate($listRows, $simple, $config);$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->relation($subRelation)->select();$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->select($data);$/;"	v
result	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = false;$/;"	v
result	.\thinkphp\library\think\model\relation\HasMany.php	/^            $result = $this->save($data);$/;"	v
result	.\thinkphp\library\think\model\relation\HasMany.php	/^        $result = false;$/;"	v
result	.\thinkphp\library\think\model\relation\MorphMany.php	/^            $result = $this->save($data);$/;"	v
result	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $result = false;$/;"	v
result	.\thinkphp\library\think\template\TagLib.php	/^        $result = [];$/;"	v
result	.\thinkphp\library\traits\controller\Jump.php	/^            $result = ViewTemplate::instance($template, $view)$/;"	v
result	.\thinkphp\library\traits\controller\Jump.php	/^        $result = [$/;"	v
result	.\thinkphp\library\traits\controller\Jump.php	/^    protected function result($data, $code = 0, $msg = '', $type = '', array $header = [])$/;"	f
result	.\thinkphp\library\traits\model\SoftDelete.php	/^                $result = $data->delete($force);$/;"	v
result	.\thinkphp\library\traits\model\SoftDelete.php	/^                $result = $this->getRelation($name);$/;"	v
result	.\thinkphp\library\traits\model\SoftDelete.php	/^            $result            = $this->isUpdate()->save();$/;"	v
result	.\thinkphp\library\traits\model\SoftDelete.php	/^            $result = $this->getQuery()->where($this->getWhere())->delete();$/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $result = $this->query($sql);$/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $result = array();$/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $result = $this->fetchRow($sql);$/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $result = $this->getConnection()->query($/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $result = $this->fetchRow($/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $result = $this->fetchRow($sql);$/;"	v
result	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $result = $this->fetchRow(sprintf('SELECT count(*) as [count] FROM information_schema.tables WHERE table_name = \\'%s\\';', $tableName));$/;"	v
result	.\vendor\topthink\think-mongo\src\Builder.php	/^        $result = [];$/;"	v
result	.\vendor\topthink\think-mongo\src\Connection.php	/^        $result = $this->cursor->toArray();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^                $result = $result->toArray();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^                $result = [];$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^                $result = isset($resultSet[0]) ? $resultSet[0] : null;$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^                $result = new $model($result);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result            = ['fields' => $fields, 'type' => $type, 'pk' => $pk];$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result    = $data[$field];$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result   = call_user_func_array($callback, [$params, $this]);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result = $this->table($tableName)->find();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result = Cache::get($guid);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^            $result = Cache::get($key);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result           = false;$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result       = $writeResult->getInsertedCount();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $this->cmd('aggregate', [$aggregate, $field]);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $this->cmd('count');$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $this->cmd('distinct', $field);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $this->cmd('multiAggregate', [$aggregate, $groupBy]);$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $writeResult->getDeletedCount();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = $writeResult->getModifiedCount();$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = [];$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = false;$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = isset($result[0]['result']) ? $result[0]['result'] : [];$/;"	v
result	.\vendor\topthink\think-mongo\src\Query.php	/^        $result = null;$/;"	v
resultSet	.\thinkphp\library\think\Model.php	/^        $resultSet = $query->select($data);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^                $resultSet = $model->toCollection($resultSet);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^                $resultSet = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^                $resultSet = $resultSet->all();$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^                $resultSet = $this->model->toCollection($resultSet);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^                $resultSet = $this->query($sql, $bind, $options['master'], $options['fetch_pdo']);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^            $resultSet = $query->bind($bind)->order($column, $order)->select();$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^            $resultSet = Cache::get($key);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^            $resultSet = new Collection($resultSet);$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^        $resultSet = $query->order($column, $order)->select();$/;"	v
resultSet	.\thinkphp\library\think\db\Query.php	/^        $resultSet = false;$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^                $resultSet      = $this->query($options['table'], $query, $readPreference, $options['fetch_cursor'], $options['typeMap']);$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^                $resultSet = $model->toCollection($resultSet);$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^                $resultSet = (new $modelName)->toCollection($resultSet);$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^            $resultSet = $cursor->toArray();$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^            $resultSet = $this->options($options)$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^            $resultSet = Cache::get($key);$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^            $resultSet = new Collection($resultSet);$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^        $resultSet = $this->limit($count)->order($column, 'asc')->select();$/;"	v
resultSet	.\vendor\topthink\think-mongo\src\Query.php	/^        $resultSet = false;$/;"	v
resultSetBuild	.\thinkphp\library\think\model\Relation.php	/^    protected function resultSetBuild($resultSet)$/;"	f
resultSetType	.\thinkphp\library\think\Model.php	/^            $this->resultSetType = $this->getQuery()->getConfig('resultset_type');$/;"	v
resultSetType	.\thinkphp\library\think\Model.php	/^    protected $resultSetType;$/;"	v
results	.\thinkphp\library\think\Hook.php	/^        $results = [];$/;"	v
results	.\thinkphp\library\think\console\output\question\Choice.php	/^                $results = [];$/;"	v
results	.\thinkphp\library\think\db\Query.php	/^            $results = $this->limit(($page - 1) * $listRows, $listRows + 1)->select();$/;"	v
results	.\thinkphp\library\think\db\Query.php	/^            $results = $this->options($options)->bind($bind)->page($page, $listRows)->select();$/;"	v
results	.\thinkphp\library\think\db\Query.php	/^            $results = $this->page($page, $listRows)->select();$/;"	v
results	.\vendor\topthink\think-helper\src\helper.php	/^        $results = [];$/;"	v
results	.\vendor\topthink\think-mongo\src\Query.php	/^            $results = $this->limit(($page - 1) * $listRows, $listRows + 1)->select();$/;"	v
results	.\vendor\topthink\think-mongo\src\Query.php	/^            $results = $this->options($options)->page($page, $listRows)->select();$/;"	v
ret	.\thinkphp\library\think\cache\driver\Lite.php	/^        $ret = file_put_contents($filename, ("<?php return " . var_export($value, true) . ";"));$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^                        $ret = $matches[$ofs];$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^                    $ret = trim($this->getHiddenResponse($inputStream));$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^                $ret = fgets($inputStream, 4096);$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^                $ret = substr($ret, 0, $i);$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^                $ret = trim($ret);$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^            $ret = false;$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^            $ret = trim($this->autocomplete($inputStream));$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^        $ret          = '';$/;"	v
ret	.\thinkphp\library\think\console\output\Ask.php	/^        $ret = strlen($ret) > 0 ? $ret : $this->question->getDefault();$/;"	v
return	.\thinkphp\library\think\Route.php	/^        $return = self::checkUrlBind($url, $rules, $depr);$/;"	v
reverse	.\thinkphp\library\think\Collection.php	/^    public function reverse()$/;"	f
right	.\thinkphp\library\think\Template.php	/^            $right = $keys = [];$/;"	v
right	.\thinkphp\library\think\template\TagLib.php	/^                $right = [];$/;"	v
rm	.\thinkphp\library\think\Cache.php	/^    public static function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function rm($name);$/;"	f
rm	.\thinkphp\library\think\cache\driver\File.php	/^    public function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function rm($name, $ttl = false)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function rm($name, $ttl = false)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function rm($name)$/;"	f
rm	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function rm($name)$/;"	f
rollback	.\thinkphp\library\think\db\Connection.php	/^    public function rollback()$/;"	f
rollback	.\thinkphp\library\think\db\Query.php	/^    public function rollback()$/;"	f
rollback	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function rollback($version = null, $force = false)$/;"	f
rollbackToDateTime	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^    protected function rollbackToDateTime(\\DateTime $dateTime, $force = false)$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function rollbackTransaction();$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function rollbackTransaction()$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    public function rollbackTransaction()$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^    public function rollbackTransaction()$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^    public function rollbackTransaction()$/;"	f
rollbackTransaction	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    public function rollbackTransaction()$/;"	f
root	.\thinkphp\library\think\Request.php	/^            $this->root = $url;$/;"	v
root	.\thinkphp\library\think\Request.php	/^            $this->root = rtrim($file, '\/');$/;"	v
root	.\thinkphp\library\think\Request.php	/^    protected $root;$/;"	v
root	.\thinkphp\library\think\Request.php	/^    public function root($url = null)$/;"	f
root	.\thinkphp\library\think\Url.php	/^    protected static $root;$/;"	v
root	.\thinkphp\library\think\Url.php	/^    public static function root($root)$/;"	f
root	.\thinkphp\library\think\View.php	/^            $root = '\/' . ltrim($root, '\/');$/;"	v
root	.\thinkphp\library\think\View.php	/^        $root    = strpos($base, '.') ? ltrim(dirname($base), DS) : $base;$/;"	v
rootDomain	.\thinkphp\library\think\Route.php	/^                $rootDomain = Config::get('url_domain_root');$/;"	v
rootDomain	.\thinkphp\library\think\Url.php	/^                $rootDomain = substr_count($host, '.') > 1 ? substr(strstr($host, '.'), 1) : $host;$/;"	v
rootDomain	.\thinkphp\library\think\Url.php	/^        $rootDomain = Config::get('url_domain_root');$/;"	v
rootPath	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $rootPath   = $this->normalizePath(realpath(ROOT_PATH));$/;"	v
root_namespace	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $root_namespace = Config::get('root_namespace');$/;"	v
rotate	.\vendor\topthink\think-image\src\Image.php	/^    public function rotate($degrees = 90)$/;"	f
rounds	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^        $this->rounds = (int)$rounds;$/;"	v
rounds	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    protected $rounds = 10;$/;"	v
route	.\thinkphp\library\think\App.php	/^    public static function route($route, $must = false)$/;"	f
route	.\thinkphp\library\think\Request.php	/^            return $this->route = array_merge($this->route, $name);$/;"	v
route	.\thinkphp\library\think\Request.php	/^    protected $route   = [];$/;"	v
route	.\thinkphp\library\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	f
route	.\thinkphp\library\think\Route.php	/^                        $route    = $val[0];$/;"	v
route	.\thinkphp\library\think\Route.php	/^                        $route = $val;$/;"	v
route	.\thinkphp\library\think\Route.php	/^                    $route    = $val;$/;"	v
route	.\thinkphp\library\think\Route.php	/^                    $route    = $val[0];$/;"	v
route	.\thinkphp\library\think\Route.php	/^                    $route = str_replace(':' . $key, $val, $route);$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route             = substr($route, 1);$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route            = str_replace('\/', '@', implode('\/', $path));$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route   = $item['route'];$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route = $option['modular'] . '\/' . $route;$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route = $option['prefix'] . $route;$/;"	v
route	.\thinkphp\library\think\Route.php	/^            $route = [$module, $controller, $action];$/;"	v
route	.\thinkphp\library\think\Route.php	/^        $route            = [null, null, null];$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function alias($rule = null, $route = '', $option = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function any($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function controller($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function delete($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function get($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function patch($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function post($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function put($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function resource($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	.\thinkphp\library\think\Route.php	/^    public static function rule($rule, $route = '', $type = '*', $option = [], $pattern = [])$/;"	v
routeCheck	.\thinkphp\library\think\App.php	/^    protected static $routeCheck;$/;"	v
routeCheck	.\thinkphp\library\think\App.php	/^    public static function routeCheck($request, array $config)$/;"	f
routeInfo	.\thinkphp\library\think\Request.php	/^            $this->routeInfo = $route;$/;"	v
routeInfo	.\thinkphp\library\think\Request.php	/^    protected $routeInfo = [];$/;"	v
routeInfo	.\thinkphp\library\think\Request.php	/^    public function routeInfo($route = [])$/;"	f
routeMust	.\thinkphp\library\think\App.php	/^    protected static $routeMust;$/;"	v
route_domain	.\thinkphp\library\think\Url.php	/^                $route_domain = array_keys($domains);$/;"	v
row	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $row = $this->fetchRow($sql);$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $rows = $this->fetchAll(sprintf($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $rows = $this->fetchAll($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $rows = $this->fetchAll(sprintf($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $rows = $this->fetchAll(sprintf('DESCRIBE %s', $this->quoteTableName($tableName)));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $rows = $this->fetchAll(sprintf('SHOW COLUMNS FROM %s', $this->quoteTableName($tableName)));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $rows = $this->fetchAll(sprintf('SHOW INDEXES FROM %s', $this->quoteTableName($tableName)));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $rows = $this->fetchAll(sprintf('SELECT * FROM %s ORDER BY version ASC', $this->getSchemaTableName()));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $rows = $this->getVersionLog();$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $rows = array();$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^                $rows = $this->fetchAll(sprintf($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $rows = $this->fetchAll($sql);$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $rows = $this->fetchAll(sprintf($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll('select * from sqlite_master where `type` = \\'table\\'');$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll(sprintf('SELECT name FROM sqlite_master WHERE type=\\'table\\' AND name=\\'%s\\'', $tableName));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll(sprintf('pragma index_list(%s)', $tableName));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll(sprintf('pragma table_info(%s)', $this->quoteTableName($table->getName())));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $rows = $this->fetchAll(sprintf('pragma table_info(%s)', $this->quoteTableName($tableName)));$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^                $rows = $this->fetchAll(sprintf($/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $rows = $this->fetchAll($sql);$/;"	v
rows	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $rows = $this->fetchAll(sprintf($/;"	v
rule	.\thinkphp\library\think\File.php	/^        $rule = $rule ?: $this->validate;$/;"	v
rule	.\thinkphp\library\think\File.php	/^        $this->rule = $rule;$/;"	v
rule	.\thinkphp\library\think\File.php	/^    protected $rule = 'date';$/;"	v
rule	.\thinkphp\library\think\File.php	/^    public function rule($rule)$/;"	f
rule	.\thinkphp\library\think\File.php	/^    public function validate(array $rule = [])$/;"	v
rule	.\thinkphp\library\think\Model.php	/^    protected function validateData($data, $rule = null, $batch = null)$/;"	v
rule	.\thinkphp\library\think\Route.php	/^                    $rule = $group . ($rule ? '\/' . ltrim($rule, '\/') : '');$/;"	v
rule	.\thinkphp\library\think\Route.php	/^                $rule = implode('\/', $item) . '\/' . $last;$/;"	v
rule	.\thinkphp\library\think\Route.php	/^                $rule = self::getRouteExpress($item);$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule    = $item['rule'];$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = $item;$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = $rule[1];$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = $rules[$item];$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = explode('\/', $rule);$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = substr($rule, 0, -1);$/;"	v
rule	.\thinkphp\library\think\Route.php	/^            $rule = trim($rule, '\/');$/;"	v
rule	.\thinkphp\library\think\Route.php	/^    public static function domain($domain, $rule = '', $option = [], $pattern = [])$/;"	v
rule	.\thinkphp\library\think\Route.php	/^    public static function pattern($name = null, $rule = '')$/;"	v
rule	.\thinkphp\library\think\Route.php	/^    public static function rule($rule, $route = '', $type = '*', $option = [], $pattern = [])$/;"	f
rule	.\thinkphp\library\think\Url.php	/^                            $rule = is_array($rule) ? $rule[0] : $rule;$/;"	v
rule	.\thinkphp\library\think\Url.php	/^                $rule = Route::name($url);$/;"	v
rule	.\thinkphp\library\think\Url.php	/^            $rule = Route::name(isset($name) ? $name : $url . (isset($info['query']) ? '?' . $info['query'] : ''));$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^                        $rule = $change[$key];$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^                $rule = $field . '_confirm';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^                $rule = $item;$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^                $rule = $item[1];$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^                $rule = strstr($field, '_confirm', true);$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule                        = explode(',', $rule);$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule  = $rule[0];$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = $this->regex[$rule];$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = '';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = 'MX';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = '\/^' . $rule . '$\/';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = 'ipv4';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $rule = explode(',', $rule);$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^            $this->rule = array_merge($this->rule, $name);$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^        $rule = !empty($rule) ? $rule : '__token__';$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^        $this->rule    = array_merge($this->rule, $rules);$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^    protected $rule = [];$/;"	v
rule	.\thinkphp\library\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	f
rule	.\thinkphp\library\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	v
rule	.\thinkphp\library\think\db\Builder.php	/^                $rule = $item;$/;"	v
rule	.\thinkphp\library\think\db\Builder.php	/^    protected function parseWhereItem($field, $val, $rule = '', $options = [], $binds = [], $bindName = null)$/;"	v
rule	.\thinkphp\library\think\db\Query.php	/^    public function getPartitionTableName($data, $field, $rule = [])$/;"	v
rule	.\thinkphp\library\think\db\Query.php	/^    public function partition($data, $field, $rule = [])$/;"	v
rules	.\thinkphp\library\think\App.php	/^                        $rules = include CONF_PATH . $file . CONF_EXT;$/;"	v
rules	.\thinkphp\library\think\App.php	/^                $rules = include RUNTIME_PATH . 'route.php';$/;"	v
rules	.\thinkphp\library\think\Route.php	/^            $rules = self::$rules;$/;"	v
rules	.\thinkphp\library\think\Route.php	/^        $rules = isset(self::$rules[$method]) ? self::$rules[$method] : [];$/;"	v
rules	.\thinkphp\library\think\Route.php	/^        $rules = self::$rules['domain'];$/;"	v
rules	.\thinkphp\library\think\Route.php	/^    private static $rules = [$/;"	v
rules	.\thinkphp\library\think\Route.php	/^    public static function rules($rules = '')$/;"	f
rules	.\thinkphp\library\think\Validate.php	/^            $rules = $this->rule;$/;"	v
rules	.\thinkphp\library\think\Validate.php	/^            $rules = explode('|', $rules);$/;"	v
rules	.\thinkphp\library\think\Validate.php	/^    public function __construct(array $rules = [], $message = [], $field = [])$/;"	v
rules	.\thinkphp\library\think\Validate.php	/^    public function check($data, $rules = [], $scene = '')$/;"	v
rules	.\thinkphp\library\think\console\command\optimize\Route.php	/^        $rules = \\think\\Route::rules(true);$/;"	v
run	.\thinkphp\library\think\App.php	/^    public static function run(Request $request = null)$/;"	f
run	.\thinkphp\library\think\Build.php	/^    public static function run(array $build = [], $namespace = 'app', $suffix = false)$/;"	f
run	.\thinkphp\library\think\Console.php	/^    public function run()$/;"	f
run	.\thinkphp\library\think\Process.php	/^    public function run($callback = null)$/;"	f
run	.\thinkphp\library\think\console\Command.php	/^    public function run(Input $input, Output $output)$/;"	f
run	.\thinkphp\library\think\console\output\Ask.php	/^    public function run()$/;"	f
run	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function run()$/;"	f
run	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function run();$/;"	f
runNextJobForDaemon	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected function runNextJobForDaemon($queue, $delay, $sleep, $maxTries)$/;"	f
runProcess	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function runProcess(Process $process, $memory)$/;"	f
running	.\thinkphp\library\think\Process.php	/^            $running = '\\\\' === DS ? $this->isRunning() : $this->processPipes->areOpen();$/;"	v
runtime	.\thinkphp\library\think\db\Connection.php	/^                $runtime = Debug::getRangeTime('queryStartTime', 'queryEndTime');$/;"	v
runtime	.\thinkphp\library\think\debug\Console.php	/^        $runtime = number_format(microtime(true) - THINK_START_TIME, 10);$/;"	v
runtime	.\thinkphp\library\think\debug\Html.php	/^        $runtime = number_format(microtime(true) - THINK_START_TIME, 10, '.', '');$/;"	v
runtime	.\thinkphp\library\think\log\driver\File.php	/^                $runtime    = round(microtime(true) - THINK_START_TIME, 10);$/;"	v
runtime	.\thinkphp\library\think\log\driver\Socket.php	/^            $runtime    = round(microtime(true) - THINK_START_TIME, 10);$/;"	v
runtime	.\vendor\topthink\think-mongo\src\Connection.php	/^                $runtime = Debug::getRangeTime('queryStartTime', 'queryEndTime');$/;"	v
safeStrlen	.\extend\php-jwt-master\src\JWT.php	/^    private static function safeStrlen($str)$/;"	f
safeStrlen	.\vendor\firebase\php-jwt\src\JWT.php	/^    private static function safeStrlen($str)$/;"	f
salt	.\vendor\topthink\think-helper\src\hash\Md5.php	/^        $salt = isset($options['salt']) ? $options['salt'] : $this->salt;$/;"	v
salt	.\vendor\topthink\think-helper\src\hash\Md5.php	/^        $this->salt = (string)$salt;$/;"	v
salt	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    protected $salt = 'think';$/;"	v
save	.\thinkphp\library\think\Log.php	/^    public static function save()$/;"	f
save	.\thinkphp\library\think\Model.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	f
save	.\thinkphp\library\think\log\driver\File.php	/^    public function save(array $log = [])$/;"	f
save	.\thinkphp\library\think\log\driver\Socket.php	/^    public function save(array $log = [])$/;"	f
save	.\thinkphp\library\think\log\driver\Test.php	/^    public function save(array $log = [])$/;"	f
save	.\thinkphp\library\think\model\Merge.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	f
save	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	f
save	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function save($data)$/;"	f
save	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function save($data)$/;"	f
save	.\thinkphp\library\think\model\relation\MorphOne.php	/^    public function save($data)$/;"	f
save	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function save($data)$/;"	f
save	.\vendor\topthink\think-image\src\Image.php	/^    public function save($pathname, $type = null, $quality = 80, $interlace = true)$/;"	f
save	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^    public function save($pathname)$/;"	f
save	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function save()$/;"	f
saveAll	.\thinkphp\library\think\Model.php	/^    public function saveAll($dataSet, $replace = true)$/;"	f
saveAll	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function saveAll(array $dataSet, array $pivot = [], $samePivot = false)$/;"	f
saveAll	.\thinkphp\library\think\model\relation\HasMany.php	/^    public function saveAll(array $dataSet)$/;"	f
saveAll	.\thinkphp\library\think\model\relation\MorphMany.php	/^    public function saveAll(array $dataSet)$/;"	f
saveData	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function saveData()$/;"	f
saveName	.\thinkphp\library\think\File.php	/^        $saveName = $this->buildSaveName($savename);$/;"	v
saveName	.\thinkphp\library\think\File.php	/^        $this->saveName = $saveName;$/;"	v
saveName	.\thinkphp\library\think\File.php	/^    protected $saveName;$/;"	v
savename	.\thinkphp\library\think\File.php	/^                            $savename = call_user_func($this->rule);$/;"	v
savename	.\thinkphp\library\think\File.php	/^                            $savename = date('Ymd') . DS . md5(microtime(true));$/;"	v
savename	.\thinkphp\library\think\File.php	/^                            $savename = substr($hash, 0, 2) . DS . substr($hash, 2);$/;"	v
savename	.\thinkphp\library\think\File.php	/^                        $savename = date('Ymd') . DS . md5(microtime(true));$/;"	v
savename	.\thinkphp\library\think\File.php	/^                $savename = call_user_func_array($this->rule, [$this]);$/;"	v
savename	.\thinkphp\library\think\File.php	/^            $savename = $this->getInfo('name');$/;"	v
savename	.\thinkphp\library\think\File.php	/^    public function move($path, $savename = true, $replace = true)$/;"	v
scale	.\vendor\topthink\think-image\src\Image.php	/^                    $scale = 1;$/;"	v
scale	.\vendor\topthink\think-image\src\Image.php	/^                    $scale = min($width \/ $w, $height \/ $h);$/;"	v
scale	.\vendor\topthink\think-image\src\Image.php	/^                $scale = max($width \/ $w, $height \/ $h);$/;"	v
scale	.\vendor\topthink\think-image\src\Image.php	/^                $scale = min($width \/ $w, $height \/ $h);$/;"	v
scale	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->scale = $scale;$/;"	v
scale	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $scale;$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^                $scene = explode(',', $scene);$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^            $scene = $this->currentScene;$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^            $scene = $this->scene[$scene];$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^            $scene = [];$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^            $this->scene = array_merge($this->scene, $name);$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^        $scene = $this->getScene($scene);$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^    protected $scene = [];$/;"	v
scene	.\thinkphp\library\think\Validate.php	/^    public function scene($name, $fields = null)$/;"	f
schema	.\thinkphp\library\think\db\Query.php	/^                $schema = $db . '.' . $guid;$/;"	v
schema	.\thinkphp\library\think\db\Query.php	/^                $schema = $guid;$/;"	v
schema	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected $schema = 'dbo';$/;"	v
schemaNames	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $schemaNames = array();$/;"	v
schemaTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $this->schemaTableName = $schemaTableName;$/;"	v
schemaTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    protected $schemaTableName = 'migrations';$/;"	v
scheme	.\thinkphp\library\think\Request.php	/^    public function scheme()$/;"	f
scheme	.\thinkphp\library\think\Url.php	/^            $scheme = $request->isSsl() || Config::get('is_https') ? 'https:\/\/' : 'http:\/\/';$/;"	v
scheme	.\thinkphp\library\think\Url.php	/^            $scheme = '';$/;"	v
scope	.\thinkphp\library\think\Model.php	/^    public static function scope($name)$/;"	f
script	.\thinkphp\library\think\process\Builder.php	/^        $script    = implode(' ', array_map([__NAMESPACE__ . '\\\\Utils', 'escapeArgument'], $arguments));$/;"	v
script_name	.\thinkphp\library\think\Request.php	/^                $script_name = basename($_SERVER['SCRIPT_FILENAME']);$/;"	v
search	.\vendor\composer\ClassLoader.php	/^                $search = $subPath.'\\\\';$/;"	v
search	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $search = sprintf($/;"	v
secode	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $secode                = [];$/;"	v
secode	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $secode = Session::get($key, '');$/;"	v
seed	.\vendor\topthink\think-migration\src\command\Seed.php	/^                    $seed = new $class($this->input, $this->output);$/;"	v
seed	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^        $seed = $input->getOption('seed');$/;"	v
seed	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^    public function seed($seed = null)$/;"	f
seeds	.\vendor\topthink\think-migration\src\command\Seed.php	/^            $seeds = [];$/;"	v
seeds	.\vendor\topthink\think-migration\src\command\Seed.php	/^            $this->seeds = $seeds;$/;"	v
seeds	.\vendor\topthink\think-migration\src\command\Seed.php	/^    protected $seeds;$/;"	v
seeds	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^        $seeds = $this->getSeeds();$/;"	v
segments	.\extend\php-jwt-master\src\JWT.php	/^        $segments = array();$/;"	v
segments	.\vendor\firebase\php-jwt\src\JWT.php	/^        $segments = array();$/;"	v
segments	.\vendor\topthink\think-queue\src\queue\Job.php	/^        $segments = explode('@', $job);$/;"	v
select	.\thinkphp\library\think\db\Builder.php	/^    public function select($options = [])$/;"	f
select	.\thinkphp\library\think\db\Query.php	/^    public function select($data = null)$/;"	f
select	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function select($data = null)$/;"	f
select	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function select($options)$/;"	f
select	.\vendor\topthink\think-mongo\src\Query.php	/^    public function select($data = null)$/;"	f
selectColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $selectColumns = array();$/;"	v
selectInsert	.\thinkphp\library\think\db\Builder.php	/^    public function selectInsert($fields, $table, $options)$/;"	f
selectInsert	.\thinkphp\library\think\db\Query.php	/^    public function selectInsert($fields, $table)$/;"	f
selectInsert	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    public function selectInsert($fields, $table, $options)$/;"	f
selectInsertSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $selectInsertSql = 'SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%';$/;"	v
selectName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $selectName = $column['name'];$/;"	v
selectOrFail	.\thinkphp\library\think\db\Query.php	/^    public function selectOrFail($data = null)$/;"	f
selectOrFail	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function selectOrFail($data = null)$/;"	f
selectOrFail	.\vendor\topthink\think-mongo\src\Query.php	/^    public function selectOrFail($data = null)$/;"	f
selectSql	.\thinkphp\library\think\db\Builder.php	/^    protected $selectSql    = 'SELECT%DISTINCT% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%UNION%%ORDER%%LIMIT%%LOCK%%COMMENT%';$/;"	v
selectSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^        $this->selectSql = $this->selectInsertSql;$/;"	v
selectSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $selectSql       = 'SELECT T1.* FROM (SELECT thinkphp.*, ROW_NUMBER() OVER (%ORDER%) AS ROW_NUMBER FROM (SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%) AS thinkphp) AS T1 %LIMIT%%COMMENT%';$/;"	v
selectedChoices	.\thinkphp\library\think\console\output\question\Choice.php	/^                $selectedChoices = [$selected];$/;"	v
selectedChoices	.\thinkphp\library\think\console\output\question\Choice.php	/^                $selectedChoices = explode(',', $selectedChoices);$/;"	v
selectedChoices	.\thinkphp\library\think\console\output\question\Choice.php	/^            $selectedChoices = str_replace(' ', '', $selected);$/;"	v
selfRelation	.\thinkphp\library\think\model\Relation.php	/^        $this->selfRelation = $self;$/;"	v
selfRelation	.\thinkphp\library\think\model\Relation.php	/^    protected $selfRelation;$/;"	v
selfRelation	.\thinkphp\library\think\model\Relation.php	/^    public function selfRelation($self = true)$/;"	f
send	.\thinkphp\library\think\Response.php	/^    public function send()$/;"	f
send	.\thinkphp\library\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	f
sendToClient	.\thinkphp\library\think\log\driver\Socket.php	/^    protected function sendToClient($tabid, $client_id, $logs, $force_client_id)$/;"	f
seq	.\thinkphp\library\think\db\Query.php	/^                        $seq = (ord($value{0}) % $rule['num']) + 1;$/;"	v
seq	.\thinkphp\library\think\db\Query.php	/^                        $seq = (ord(substr($type($value), 0, 1)) % $rule['num']) + 1;$/;"	v
seq	.\thinkphp\library\think\db\Query.php	/^                    $seq  = floor($value \/ $step) + 1;$/;"	v
seq	.\thinkphp\library\think\db\Query.php	/^                    $seq = ($value % $rule['num']) + 1;$/;"	v
seq	.\thinkphp\library\think\db\Query.php	/^                    $seq = (ord(substr(md5($value), 0, 1)) % $rule['num']) + 1;$/;"	v
seq	.\thinkphp\library\think\db\Query.php	/^                    $seq = date('Y', $value) - $rule['expr'] + 1;$/;"	v
sequence	.\thinkphp\library\think\Model.php	/^            $sequence = $data;$/;"	v
sequence	.\thinkphp\library\think\db\Query.php	/^            $sequence  = $sequence ?: (isset($options['sequence']) ? $options['sequence'] : null);$/;"	v
sequence	.\thinkphp\library\think\db\Query.php	/^    public function sequence($sequence = null)$/;"	f
server	.\thinkphp\library\think\Request.php	/^                $server = $this->server ?: $_SERVER;$/;"	v
server	.\thinkphp\library\think\Request.php	/^            $this->server = $_SERVER;$/;"	v
server	.\thinkphp\library\think\Request.php	/^            return $this->server = array_merge($this->server, $name);$/;"	v
server	.\thinkphp\library\think\Request.php	/^        $server = array_merge($_SERVER, $this->server);$/;"	v
server	.\thinkphp\library\think\Request.php	/^    protected $server  = [];$/;"	v
server	.\thinkphp\library\think\Request.php	/^    public function server($name = '', $default = null, $filter = '')$/;"	f
server	.\thinkphp\library\think\controller\Yar.php	/^        $server = new \\Yar_Server($this);$/;"	v
servers	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $servers = [];$/;"	v
servers	.\thinkphp\library\think\session\driver\Memcached.php	/^        $servers = [];$/;"	v
session	.\thinkphp\helper.php	/^    function session($name, $value = '', $prefix = null)$/;"	f
session	.\thinkphp\library\think\Request.php	/^            $this->session = Session::get();$/;"	v
session	.\thinkphp\library\think\Request.php	/^            return $this->session = array_merge($this->session, $name);$/;"	v
session	.\thinkphp\library\think\Request.php	/^    protected $session = [];$/;"	v
session	.\thinkphp\library\think\Request.php	/^    public function session($name = '', $default = null, $filter = '')$/;"	f
set	.\thinkphp\library\think\Cache.php	/^    public static function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\Config.php	/^    public static function set($name, $value = null, $range = '')$/;"	f
set	.\thinkphp\library\think\Cookie.php	/^    public static function set($name, $value = '', $option = null)$/;"	f
set	.\thinkphp\library\think\Lang.php	/^    public static function set($name, $value = null, $range = '')$/;"	f
set	.\thinkphp\library\think\Session.php	/^    public static function set($name, $value = '', $prefix = null)$/;"	f
set	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function set($name, $value, $expire = null);$/;"	f
set	.\thinkphp\library\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function set($name, $value, $expire = null)$/;"	f
set	.\vendor\composer\ClassLoader.php	/^    public function set($prefix, $paths)$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function setAdapter(AdapterInterface $adapter)$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\WrapperInterface.php	/^    public function setAdapter(AdapterInterface $adapter);$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setAdapter(AdapterInterface $adapter)$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function setAdapter(AdapterInterface $adapter)$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function setAdapter(AdapterInterface $adapter);$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function setAdapter(AdapterInterface $adapter)$/;"	f
setAdapter	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function setAdapter(AdapterInterface $adapter);$/;"	f
setAfter	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setAfter($after)$/;"	f
setAlias	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function setAlias($alias)$/;"	f
setAliases	.\thinkphp\library\think\console\Command.php	/^    public function setAliases($aliases)$/;"	f
setAllowLangList	.\thinkphp\library\think\Lang.php	/^    public static function setAllowLangList($list)$/;"	f
setApcuPrefix	.\vendor\composer\ClassLoader.php	/^    public function setApcuPrefix($apcuPrefix)$/;"	f
setArgument	.\thinkphp\library\think\console\Input.php	/^    public function setArgument($name, $value)$/;"	f
setArguments	.\thinkphp\library\think\console\input\Definition.php	/^    public function setArguments($arguments = [])$/;"	f
setArguments	.\thinkphp\library\think\process\Builder.php	/^    public function setArguments(array $arguments)$/;"	f
setAttr	.\thinkphp\library\think\Model.php	/^    public function setAttr($name, $value, $data = [])$/;"	f
setAutoExit	.\thinkphp\library\think\Console.php	/^    public function setAutoExit($boolean)$/;"	f
setAutocompleterValues	.\thinkphp\library\think\console\output\Question.php	/^    public function setAutocompleterValues($values)$/;"	f
setBackground	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function setBackground($color = null)$/;"	f
setBuilder	.\thinkphp\library\think\db\Query.php	/^    protected function setBuilder()$/;"	f
setBuilder	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function setBuilder()$/;"	f
setCatchExceptions	.\thinkphp\library\think\Console.php	/^    public function setCatchExceptions($boolean)$/;"	f
setClassMapAuthoritative	.\vendor\composer\ClassLoader.php	/^    public function setClassMapAuthoritative($classMapAuthoritative)$/;"	f
setCode	.\thinkphp\library\think\console\Command.php	/^    public function setCode(callable $code)$/;"	f
setCodes	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $setCodes   = [];$/;"	v
setCollation	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function setCollation($collation)$/;"	f
setColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setColumns($columns)$/;"	f
setColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setColumns($columns)$/;"	f
setColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function setColumns($columns)$/;"	f
setCommand	.\thinkphp\library\think\console\command\Help.php	/^    public function setCommand(Command $command)$/;"	f
setCommandLine	.\thinkphp\library\think\Process.php	/^    public function setCommandLine($commandline)$/;"	f
setCommandStartTime	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setCommandStartTime($time)$/;"	f
setCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^    public function setCommands($commands)$/;"	f
setComment	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setComment($comment)$/;"	f
setComment	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function setComment($comment)$/;"	f
setConfig	.\thinkphp\library\think\db\Connection.php	/^    public function setConfig($config, $value = '')$/;"	f
setConfig	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function setConfig($config, $value)$/;"	f
setConnection	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setConnection(\\PDO $connection)$/;"	f
setConsole	.\thinkphp\library\think\console\Command.php	/^    public function setConsole(Console $console = null)$/;"	f
setConstraint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setConstraint($constraint)$/;"	f
setCurrentPage	.\thinkphp\library\think\Paginator.php	/^    protected function setCurrentPage($currentPage)$/;"	f
setData	.\thinkphp\library\think\Exception.php	/^    final protected function setData($label, array $data)$/;"	f
setData	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setData($data)$/;"	f
setDec	.\thinkphp\library\think\Model.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	f
setDec	.\thinkphp\library\think\db\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	f
setDec	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	f
setDecorated	.\thinkphp\library\think\console\output\Formatter.php	/^    public function setDecorated($decorated)$/;"	f
setDecorated	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function setDecorated($decorated)$/;"	f
setDefault	.\thinkphp\library\think\console\input\Argument.php	/^    public function setDefault($default = null)$/;"	f
setDefault	.\thinkphp\library\think\console\input\Option.php	/^    public function setDefault($default = null)$/;"	f
setDefault	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setDefault($default)$/;"	f
setDefaultCommand	.\thinkphp\library\think\Console.php	/^    public function setDefaultCommand($commandName)$/;"	f
setDefinition	.\thinkphp\library\think\Console.php	/^    public function setDefinition(InputDefinition $definition)$/;"	f
setDefinition	.\thinkphp\library\think\console\Command.php	/^    public function setDefinition($definition)$/;"	f
setDefinition	.\thinkphp\library\think\console\input\Definition.php	/^    public function setDefinition(array $definition)$/;"	f
setDescription	.\thinkphp\library\think\console\Command.php	/^    public function setDescription($description)$/;"	f
setDomain	.\thinkphp\library\think\Route.php	/^    private static function setDomain($domain)$/;"	f
setEagerlyType	.\thinkphp\library\think\model\relation\OneToOne.php	/^    public function setEagerlyType($type)$/;"	f
setEmptyStyle	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function setEmptyStyle(Style $emptyStyle)$/;"	f
setEngine	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function setEngine($engine)$/;"	f
setEnhanceSigchildCompatibility	.\thinkphp\library\think\Process.php	/^    public function setEnhanceSigchildCompatibility($enhance)$/;"	f
setEnhanceWindowsCompatibility	.\thinkphp\library\think\Process.php	/^    public function setEnhanceWindowsCompatibility($enhance)$/;"	f
setEnv	.\thinkphp\library\think\Process.php	/^    public function setEnv(array $env)$/;"	f
setEnv	.\thinkphp\library\think\process\Builder.php	/^    public function setEnv($name, $value)$/;"	f
setErrorMessage	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function setErrorMessage($errorMessage)$/;"	f
setField	.\thinkphp\library\think\db\Query.php	/^    public function setField($field, $value = '')$/;"	f
setField	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setField($field, $value = '')$/;"	f
setForeground	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function setForeground($color = null)$/;"	f
setForeignKeys	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setForeignKeys($foreignKeys)$/;"	f
setGroup	.\thinkphp\library\think\Route.php	/^    public static function setGroup($name, $option = [], $pattern = [])$/;"	f
setHelp	.\thinkphp\library\think\console\Command.php	/^    public function setHelp($help)$/;"	f
setHidden	.\thinkphp\library\think\console\output\Question.php	/^    public function setHidden($hidden)$/;"	f
setHiddenFallback	.\thinkphp\library\think\console\output\Question.php	/^    public function setHiddenFallback($fallback)$/;"	f
setId	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function setId($id)$/;"	f
setIdentity	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setIdentity($identity)$/;"	f
setIdleTimeout	.\thinkphp\library\think\Process.php	/^    public function setIdleTimeout($timeout)$/;"	f
setInc	.\thinkphp\library\think\Model.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	f
setInc	.\thinkphp\library\think\db\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	f
setInc	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	f
setIndexes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setIndexes($indexes)$/;"	f
setInput	.\thinkphp\library\think\Process.php	/^    public function setInput($input)$/;"	f
setInput	.\thinkphp\library\think\process\Builder.php	/^    public function setInput($input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function setInput(InputInterface $input);$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function setInput(InputInterface $input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setInput(InputInterface $input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function setInput(InputInterface $input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function setInput(InputInterface $input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function setInput(InputInterface $input);$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function setInput(InputInterface $input);$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function setInput(InputInterface $input)$/;"	f
setInput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function setInput(InputInterface $input);$/;"	f
setInteractive	.\thinkphp\library\think\console\Input.php	/^    public function setInteractive($interactive)$/;"	f
setLangCookieExpire	.\thinkphp\library\think\Lang.php	/^    public static function setLangCookieExpire($expire)$/;"	f
setLangCookieVar	.\thinkphp\library\think\Lang.php	/^    public static function setLangCookieVar($var)$/;"	f
setLangDetectVar	.\thinkphp\library\think\Lang.php	/^    public static function setLangDetectVar($var)$/;"	f
setLimit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setLimit($limit)$/;"	f
setLimit	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function setLimit($limit)$/;"	f
setMaxAttempts	.\thinkphp\library\think\console\output\Question.php	/^    public function setMaxAttempts($attempts)$/;"	f
setMaxTries	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function setMaxTries($tries)$/;"	f
setMeta	.\vendor\topthink\think-queue\src\queue\Connector.php	/^    protected function setMeta($payload, $key, $value)$/;"	f
setMethodPrefix	.\thinkphp\library\think\Route.php	/^    public static function setMethodPrefix($method, $prefix = '')$/;"	f
setMultiselect	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function setMultiselect($multiselect)$/;"	f
setName	.\thinkphp\library\think\Console.php	/^    public function setName($name)$/;"	f
setName	.\thinkphp\library\think\console\Command.php	/^    public function setName($name)$/;"	f
setName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setName($name)$/;"	f
setName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setName($name)$/;"	f
setName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function setName($name)$/;"	f
setNormalizer	.\thinkphp\library\think\console\output\Question.php	/^    public function setNormalizer($normalizer)$/;"	f
setNull	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setNull($null)$/;"	f
setNullable	.\vendor\topthink\think-migration\src\db\Column.php	/^    public function setNullable()$/;"	f
setOnDelete	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setOnDelete($onDelete)$/;"	f
setOnUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setOnUpdate($onUpdate)$/;"	f
setOption	.\thinkphp\library\think\Route.php	/^    protected static function setOption($options = [])$/;"	f
setOption	.\thinkphp\library\think\console\Input.php	/^    public function setOption($name, $value)$/;"	f
setOption	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function setOption($option)$/;"	f
setOption	.\thinkphp\library\think\process\Builder.php	/^    public function setOption($name, $value)$/;"	f
setOptions	.\thinkphp\library\think\Process.php	/^    public function setOptions(array $options)$/;"	f
setOptions	.\thinkphp\library\think\console\input\Definition.php	/^    public function setOptions($options = [])$/;"	f
setOptions	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function setOptions(array $options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function setOptions(array $options);$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function setOptions(array $options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setOptions(array $options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setOptions($options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setOptions($options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setOptions($options)$/;"	f
setOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function setOptions($options)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function setOutput(OutputInterface $output);$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function setOutput(OutputInterface $output)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setOutput(OutputInterface $output)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function setOutput(OutputInterface $output)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractTemplateCreation.php	/^    public function setOutput(OutputInterface $output)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\CreationInterface.php	/^    public function setOutput(OutputInterface $output);$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function setOutput(OutputInterface $output);$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function setOutput(OutputInterface $output)$/;"	f
setOutput	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function setOutput(OutputInterface $output);$/;"	f
setOutputHandler	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function setOutputHandler(Closure $outputHandler)$/;"	f
setParent	.\thinkphp\library\think\Model.php	/^    public function setParent($model)$/;"	f
setPendingColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function setPendingColumns($columns)$/;"	f
setPrecision	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setPrecision($precision)$/;"	f
setPrefix	.\thinkphp\library\think\process\Builder.php	/^    public function setPrefix($prefix)$/;"	f
setPrimaryKey	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function setPrimaryKey($key)$/;"	f
setPrompt	.\thinkphp\library\think\console\output\question\Choice.php	/^    public function setPrompt($prompt)$/;"	f
setProperties	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setProperties($properties)$/;"	f
setPsr4	.\vendor\composer\ClassLoader.php	/^    public function setPsr4($prefix, $paths)$/;"	f
setPty	.\thinkphp\library\think\Process.php	/^    public function setPty($bool)$/;"	f
setQuery	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function setQuery($query, $model = 'db')$/;"	f
setReferencedColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setReferencedColumns(array $referencedColumns)$/;"	f
setReferencedTable	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^    public function setReferencedTable(Table $table)$/;"	f
setRelation	.\thinkphp\library\think\Model.php	/^    public function setRelation($name, $value)$/;"	f
setRender	.\thinkphp\library\think\exception\Handle.php	/^    public function setRender($render)$/;"	f
setRounds	.\vendor\topthink\think-helper\src\hash\Bcrypt.php	/^    public function setRounds($rounds)$/;"	f
setRule	.\thinkphp\library\think\Route.php	/^    protected static function setRule($rule, $route, $type = '*', $option = [], $pattern = [], $group = '')$/;"	f
setSalt	.\vendor\topthink\think-helper\src\hash\Md5.php	/^    public function setSalt($salt)$/;"	f
setSaveName	.\thinkphp\library\think\File.php	/^    public function setSaveName($saveName)$/;"	f
setScale	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setScale($scale)$/;"	f
setSchemaTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function setSchemaTableName($schemaTableName)$/;"	f
setSigned	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setSigned($signed)$/;"	f
setSleep	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function setSleep($sleep)$/;"	f
setStyle	.\thinkphp\library\think\console\output\Formatter.php	/^    public function setStyle($name, Style $style)$/;"	f
setTable	.\thinkphp\library\think\db\Query.php	/^    public function setTable($table)$/;"	f
setTable	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setTable($table)$/;"	f
setTagItem	.\thinkphp\library\think\cache\Driver.php	/^    protected function setTagItem($name)$/;"	f
setTimeout	.\thinkphp\library\think\Process.php	/^    public function setTimeout($timeout)$/;"	f
setTimeout	.\thinkphp\library\think\process\Builder.php	/^    public function setTimeout($timeout)$/;"	f
setTimezone	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setTimezone($timezone)$/;"	f
setTokens	.\thinkphp\library\think\console\Input.php	/^    protected function setTokens(array $tokens)$/;"	f
setTrace	.\thinkphp\library\think\exception\ThrowableError.php	/^    protected function setTrace($trace)$/;"	f
setTty	.\thinkphp\library\think\Process.php	/^    public function setTty($tty)$/;"	f
setType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setType($type)$/;"	f
setType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    public function setType($type)$/;"	f
setTypeMsg	.\thinkphp\library\think\Validate.php	/^    public static function setTypeMsg($type, $msg = null)$/;"	f
setUnique	.\vendor\topthink\think-migration\src\db\Column.php	/^    public function setUnique()$/;"	f
setUnsigned	.\vendor\topthink\think-migration\src\db\Column.php	/^    public function setUnsigned()$/;"	f
setUpdate	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setUpdate($update)$/;"	f
setUploadInfo	.\thinkphp\library\think\File.php	/^    public function setUploadInfo($info)$/;"	f
setUseIncludePath	.\vendor\composer\ClassLoader.php	/^    public function setUseIncludePath($useIncludePath)$/;"	f
setUser	.\thinkphp\library\think\Console.php	/^    public function setUser($user)$/;"	f
setValidator	.\thinkphp\library\think\console\output\Question.php	/^    public function setValidator($validator)$/;"	f
setValues	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    public function setValues($values)$/;"	f
setVerbosity	.\thinkphp\library\think\console\Output.php	/^    public function setVerbosity($level)$/;"	f
setVersion	.\thinkphp\library\think\Console.php	/^    public function setVersion($version)$/;"	f
setVersion	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function setVersion($version)$/;"	f
setVersion	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function setVersion($version);$/;"	f
setWorkingDirectory	.\thinkphp\library\think\Process.php	/^    public function setWorkingDirectory($cwd)$/;"	f
setWorkingDirectory	.\thinkphp\library\think\process\Builder.php	/^    public function setWorkingDirectory($cwd)$/;"	f
severity	.\thinkphp\library\think\exception\ErrorException.php	/^        $this->severity = $severity;$/;"	v
severity	.\thinkphp\library\think\exception\ErrorException.php	/^    protected $severity;$/;"	v
severity	.\thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_ERROR;$/;"	v
severity	.\thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_PARSE;$/;"	v
severity	.\thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_RECOVERABLE_ERROR;$/;"	v
share	.\thinkphp\library\think\View.php	/^    public static function share($name, $value = '')$/;"	f
shell	.\thinkphp\library\think\console\output\Ask.php	/^        if (false !== $shell = $this->getShell()) {$/;"	v
shell	.\thinkphp\library\think\console\output\Ask.php	/^    private static $shell;$/;"	v
shift	.\thinkphp\library\think\Collection.php	/^    public function shift()$/;"	f
shortcut	.\thinkphp\library\think\console\Command.php	/^    public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	v
shortcut	.\thinkphp\library\think\console\input\Definition.php	/^                $shortcut   = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^                $shortcut = implode('|', $shortcut);$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^            $shortcut  = implode('|', $shortcuts);$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^            $shortcut = null;$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^        $this->shortcut    = $shortcut;$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^    private $shortcut;$/;"	v
shortcut	.\thinkphp\library\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	v
shortcutToName	.\thinkphp\library\think\console\input\Definition.php	/^    private function shortcutToName($shortcut)$/;"	f
shortcuts	.\thinkphp\library\think\console\input\Definition.php	/^        $this->shortcuts = [];$/;"	v
shortcuts	.\thinkphp\library\think\console\input\Definition.php	/^    private $shortcuts;$/;"	v
shortcuts	.\thinkphp\library\think\console\input\Option.php	/^            $shortcuts = array_filter($shortcuts);$/;"	v
shortcuts	.\thinkphp\library\think\console\input\Option.php	/^            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));$/;"	v
show	.\thinkphp\library\think\db\Builder.php	/^    protected function parseClosure($call, $show = true)$/;"	v
shuffle	.\thinkphp\library\think\Collection.php	/^    public function shuffle()$/;"	f
side	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $side   = 3;$/;"	v
sigchild	.\thinkphp\library\think\Process.php	/^    private static $sigchild;$/;"	v
sign	.\extend\php-jwt-master\src\JWT.php	/^    public static function sign($msg, $key, $alg = 'HS256')$/;"	f
sign	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function sign($msg, $key, $alg = 'HS256')$/;"	f
signal	.\thinkphp\library\think\Process.php	/^    public function signal($signal)$/;"	f
signature	.\extend\php-jwt-master\src\JWT.php	/^                $signature = '';$/;"	v
signature	.\extend\php-jwt-master\src\JWT.php	/^        $signature = static::sign($signing_input, $key, $alg);$/;"	v
signature	.\vendor\firebase\php-jwt\src\JWT.php	/^                $signature = '';$/;"	v
signature	.\vendor\firebase\php-jwt\src\JWT.php	/^        $signature = static::sign($signing_input, $key, $alg);$/;"	v
signed	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->signed = (bool) $signed;$/;"	v
signed	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $signed = true;$/;"	v
signedColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^    protected $signedColumnTypes = array('integer' => true, 'biginteger' => true, 'float' => true, 'decimal' => true, 'boolean' => true);$/;"	v
signedColumnTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^    protected $signedColumnTypes = array('integer' => true, 'biginteger' => true, 'float' => true, 'decimal' => true);$/;"	v
signing_input	.\extend\php-jwt-master\src\JWT.php	/^        $signing_input = implode('.', $segments);$/;"	v
signing_input	.\vendor\firebase\php-jwt\src\JWT.php	/^        $signing_input = implode('.', $segments);$/;"	v
simple	.\thinkphp\library\think\Paginator.php	/^        $this->simple   = $simple;$/;"	v
simple	.\thinkphp\library\think\Paginator.php	/^    protected $simple = false;$/;"	v
simple	.\thinkphp\library\think\db\Query.php	/^            $simple = false;$/;"	v
simple	.\thinkphp\library\think\db\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	v
simple	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	v
simple	.\vendor\topthink\think-mongo\src\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	v
single	.\thinkphp\library\think\Template.php	/^            $single = strlen(ltrim($begin, '\\\\')) == 1 && strlen(ltrim($end, '\\\\')) == 1 ? true : false;$/;"	v
single	.\thinkphp\library\think\template\TagLib.php	/^        $single  = strlen(ltrim($begin, '\\\\')) == 1 && strlen(ltrim($end, '\\\\')) == 1 ? true : false;$/;"	v
size	.\thinkphp\library\think\Debug.php	/^        $size = memory_get_usage() - THINK_START_MEM;$/;"	v
size	.\thinkphp\library\think\Debug.php	/^        $size = self::$mem['mem'][$end] - self::$mem['mem'][$start];$/;"	v
size	.\thinkphp\library\think\Debug.php	/^        $size = self::$mem['peak'][$end] - self::$mem['peak'][$start];$/;"	v
size	.\vendor\topthink\think-image\src\Image.php	/^    public function size()$/;"	f
sizes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $sizes = array($/;"	v
skip	.\vendor\topthink\think-mongo\src\Query.php	/^    public function skip($skip)$/;"	f
slaveOk	.\vendor\topthink\think-mongo\src\Query.php	/^    public function slaveOk($slaveOk)$/;"	f
sleep	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $this->sleep = $sleep;$/;"	v
sleep	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected $sleep = 3;$/;"	v
sleep	.\vendor\topthink\think-queue\src\queue\Worker.php	/^    public function sleep($seconds)$/;"	f
slice	.\thinkphp\library\think\Collection.php	/^    public function slice($offset, $length = null, $preserveKeys = false)$/;"	f
smallInteger	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function smallInteger($name)$/;"	f
snake	.\vendor\topthink\think-helper\src\Str.php	/^    public static function snake($value, $delimiter = '_')$/;"	f
snakeCache	.\vendor\topthink\think-helper\src\Str.php	/^    protected static $snakeCache = [];$/;"	v
sort	.\thinkphp\library\think\Collection.php	/^    public function sort(callable $callback = null)$/;"	f
sort	.\thinkphp\library\think\Template.php	/^    private function parseBlock(&$content, $sort = false)$/;"	v
sort	.\thinkphp\library\think\db\Builder.php	/^                    $sort = $val;$/;"	v
sort	.\thinkphp\library\think\db\Builder.php	/^                $sort    = in_array($sort, ['ASC', 'DESC'], true) ? ' ' . $sort : '';$/;"	v
sort	.\thinkphp\library\think\db\Builder.php	/^                $sort    = strtoupper($sort);$/;"	v
sort	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^                $sort    = in_array(strtolower(trim($val)), ['asc', 'desc'], true) ? ' ' . $val : '';$/;"	v
sortCommands	.\thinkphp\library\think\console\output\descriptor\Console.php	/^    private function sortCommands(array $commands)$/;"	f
sortRecursive	.\vendor\topthink\think-helper\src\Arr.php	/^    public static function sortRecursive($array)$/;"	f
source	.\thinkphp\library\think\exception\Handle.php	/^            $source   = [$/;"	v
source	.\thinkphp\library\think\exception\Handle.php	/^            $source = [];$/;"	v
source	.\thinkphp\library\think\model\Merge.php	/^                    $source = $this->data;$/;"	v
source	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                        $source = $this->getInstallPath($package) . DIRECTORY_SEPARATOR . $config;$/;"	v
source	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^        $source = $this->getInstallPath($package) . DIRECTORY_SEPARATOR . 'example';$/;"	v
space	.\thinkphp\library\think\Build.php	/^                    $space    = $namespace . '\\\\' . ($module ? $module . '\\\\' : '') . $path;$/;"	v
spacingWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^                    $spacingWidth = $width - strlen($name);$/;"	v
spacingWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($argument->getName()) + 2;$/;"	v
spacingWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($synopsis) + 2;$/;"	v
splitStringByWidth	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function splitStringByWidth($string, $width)$/;"	f
sql	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $sql  = 'DELETE FROM ' . $this->options['table'] . ' WHERE tag=\\'' . $name . '\\'';$/;"	v
sql	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql    = 'SELECT value FROM ' . $this->options['table'] . ' WHERE var=\\'' . $name . '\\' AND (expire=0 OR expire >' . $_SERVER['REQUEST_TIME'] . ') LIMIT 1';$/;"	v
sql	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql  = 'DELETE FROM ' . $this->options['table'] . ' WHERE var=\\'' . $name . '\\'';$/;"	v
sql	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'DELETE FROM ' . $this->options['table'];$/;"	v
sql	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'REPLACE INTO ' . $this->options['table'] . ' (var, value, expire, tag) VALUES (\\'' . $name . '\\', \\'' . $value . '\\', \\'' . $expire . '\\', \\'' . $tag . '\\')';$/;"	v
sql	.\thinkphp\library\think\db\Builder.php	/^        $sql    = 'INSERT INTO ' . $this->parseTable($table, $options) . ' (' . implode(',', $fields) . ') ' . $this->select($options);$/;"	v
sql	.\thinkphp\library\think\db\Builder.php	/^        $sql = str_replace($/;"	v
sql	.\thinkphp\library\think\db\Connection.php	/^                $sql     = $sql ?: $this->getLastsql();$/;"	v
sql	.\thinkphp\library\think\db\Connection.php	/^            $sql = implode(';', $sql);$/;"	v
sql	.\thinkphp\library\think\db\Connection.php	/^            $sql = is_numeric($key) ?$/;"	v
sql	.\thinkphp\library\think\db\Connection.php	/^    protected function debug($start, $sql = '', $master = false)$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^            $sql    = preg_replace_callback("\/__([A-Z0-9_-]+)__\/sU", function ($match) use ($prefix) {$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^            $sql = $this->builder->insertAll($dataSet, $options, $replace);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^            $sql = $this->builder->select($options);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^        $sql   = $this->builder->selectInsert($fields, $table, $options);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^        $sql = $this->builder->delete($options);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^        $sql = $this->builder->insert($data, $options, $replace);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^        $sql = $this->builder->select($options);$/;"	v
sql	.\thinkphp\library\think\db\Query.php	/^        $sql = $this->builder->update($data, $options);$/;"	v
sql	.\thinkphp\library\think\db\connector\Mysql.php	/^        $sql    = !empty($dbName) ? 'SHOW TABLES FROM ' . $dbName : 'SHOW TABLES ';$/;"	v
sql	.\thinkphp\library\think\db\connector\Mysql.php	/^        $sql    = 'SHOW COLUMNS FROM ' . $tableName;$/;"	v
sql	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $sql             = 'select fields_name as "field",fields_type as "type",fields_not_null as "null",fields_key_name as "key",fields_default as "default",fields_default as "extra" from table_msg(\\'' . $tableName . '\\');';$/;"	v
sql	.\thinkphp\library\think\db\connector\Pgsql.php	/^        $sql    = "select tablename as Tables_in_test from pg_tables where  schemaname ='public'";$/;"	v
sql	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $sql             = 'PRAGMA table_info( ' . $tableName . ' )';$/;"	v
sql	.\thinkphp\library\think\db\connector\Sqlite.php	/^        $sql = "SELECT name FROM sqlite_master WHERE type='table' "$/;"	v
sql	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql             = "SELECT   column_name,   data_type,   column_default,   is_nullable$/;"	v
sql	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql = "SELECT TABLE_NAME$/;"	v
sql	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql = "SELECT column_name FROM information_schema.key_column_usage WHERE table_name='$tableName'";$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $sql = rtrim($sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $sql = substr(rtrim($sql), 0, -1);              \/\/ no primary keys$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $sql = 'CREATE TABLE ';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $sql = rtrim($sql) . ';';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^            $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $sql = $this->getColumnCommentSqlDefinition($newColumn, $tableName);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $sql = rtrim($sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $sql = substr(rtrim($sql), 0, -1);              \/\/ no primary keys$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = "SELECT schema_name$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = "SELECT$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = $this->getIndexSqlDefinition($index, $table->getName());$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = 'CREATE TABLE ';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = preg_replace('\/ NOT NULL\/', '', $sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = preg_replace('\/ NULL\/', '', $sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = preg_replace('\/DEFAULT .*\/', '', $sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = sprintf("DROP SCHEMA IF EXISTS %s CASCADE;", $this->quoteSchemaName($schemaName));$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = sprintf("SELECT count(*) FROM pg_database WHERE datname = '%s'", $databaseName);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = sprintf("SELECT count(*)$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^        $sql = sprintf('CREATE SCHEMA %s;', $this->quoteSchemaName($schemaName)); \/\/ from postgres 9.3 we can use "CREATE SCHEMA IF NOT EXISTS schema_name"$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $sql = $row['sql'];$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                $sql = $table['sql'];$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $sql = preg_replace($search, '', $sql, 1);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $sql = rtrim($sql);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $sql = substr($sql, 0, -2) . ')';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $sql = substr(rtrim($sql), 0, -1);              \/\/ no primary keys$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = '';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = 'CREATE TABLE ';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = preg_replace($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = rtrim($sql) . ');';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = str_replace($/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sql = substr($sql, 0, -1) . ',' . $this->getForeignKeySqlDefinition($foreignKey) . ')';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^            $sql = $this->getColumnCommentSqlDefinition($newColumn, $tableName);$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = "SELECT AC.[name] AS [column_name]$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = "SELECT I.[name] AS [index_name], I.[index_id] as [index_id], T.[object_id] as [table_id]$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = "SELECT$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = $this->getIndexSqlDefinition($index, $table->getName());$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = 'CREATE TABLE ';$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = <<<SQL$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = sprintf("SELECT cast(extended_properties.[value] as nvarchar(4000)) comment$/;"	v
sql	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sql = sprintf($/;"	v
sql	.\vendor\topthink\think-mongo\src\Connection.php	/^                $sql     = $sql ?: $this->queryStr;$/;"	v
sql	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function debug($start, $sql = '')$/;"	v
sql	.\vendor\topthink\think-mongo\src\Query.php	/^            $sql    = preg_replace_callback("\/__([A-Z0-9_-]+)__\/sU", function ($match) use ($prefix) {$/;"	v
sqlBuffer	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sqlBuffer = array();$/;"	v
sqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^        $sqlType = $this->getSqlType($column->getType(), $column->getLimit());$/;"	v
sqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $sqlType = $this->getSqlType($column->getType(), $column->getLimit());$/;"	v
sqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $sqlType = $this->getSqlType($column->getType());$/;"	v
sqlType	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SqlServerAdapter.php	/^        $sqlType = $this->getSqlType($column->getType());$/;"	v
src	.\vendor\topthink\think-image\src\Image.php	/^            $src = imagecreatetruecolor($info[0], $info[1]);$/;"	v
src	.\vendor\topthink\think-image\src\image\gif\Gif.php	/^                $src = file_get_contents($src);$/;"	v
start	.\thinkphp\library\think\Process.php	/^    public function start($callback = null)$/;"	f
start	.\thinkphp\library\think\Session.php	/^    public static function start()$/;"	f
start	.\thinkphp\library\think\Template.php	/^                        $start                = $tag['offset'] + strlen($tag['tag']);$/;"	v
start	.\thinkphp\library\think\Validate.php	/^            $start = strtotime($start);$/;"	v
start	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $start = strpos($content, 'function');$/;"	v
start	.\thinkphp\library\think\template\taglib\Cx.php	/^                    $start = $value;$/;"	v
start	.\thinkphp\library\think\template\taglib\Cx.php	/^        $start      = 0;$/;"	v
start	.\vendor\topthink\think-migration\src\command\Migrate.php	/^        $start = microtime(true);$/;"	v
start	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $start = microtime(true);$/;"	v
start	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $start = microtime(true);$/;"	v
start	.\vendor\topthink\think-migration\src\command\seed\Run.php	/^        $start = microtime(true);$/;"	v
startCommandTimer	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function startCommandTimer()$/;"	f
startLine	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $startLine  = $reflection->getStartLine();$/;"	v
startTime	.\thinkphp\library\think\db\Connection.php	/^                    $startTime = microtime(true);$/;"	v
startTime	.\vendor\topthink\think-migration\src\command\Migrate.php	/^        $startTime = time();$/;"	v
startTime	.\vendor\topthink\think-mongo\src\Connection.php	/^                $startTime = microtime(true);$/;"	v
startTime	.\vendor\topthink\think-mongo\src\Connection.php	/^            $startTime = microtime(true);$/;"	v
startTimeToEndTime	.\vendor\topthink\think-helper\src\Time.php	/^    private static function startTimeToEndTime()$/;"	f
startTrans	.\thinkphp\library\think\db\Connection.php	/^    public function startTrans()$/;"	f
startTrans	.\thinkphp\library\think\db\Query.php	/^    public function startTrans()$/;"	f
startsWith	.\vendor\topthink\think-helper\src\Str.php	/^    public static function startsWith($haystack, $needles)$/;"	f
starttime	.\thinkphp\library\think\Process.php	/^        $this->starttime                    = null;$/;"	v
starttime	.\thinkphp\library\think\Process.php	/^        $this->starttime = $this->lastOutputTime = microtime(true);$/;"	v
starttime	.\thinkphp\library\think\Process.php	/^    private $starttime;$/;"	v
status	.\extend\php-jwt-master\src\JWT.php	/^                $status = 0;$/;"	v
status	.\thinkphp\library\think\Process.php	/^        $this->status                       = self::STATUS_READY;$/;"	v
status	.\thinkphp\library\think\Process.php	/^        $this->status   = self::STATUS_TERMINATED;$/;"	v
status	.\thinkphp\library\think\Process.php	/^        $this->status = self::STATUS_STARTED;$/;"	v
status	.\thinkphp\library\think\Process.php	/^    private $status                       = self::STATUS_READY;$/;"	v
status	.\thinkphp\library\think\exception\Handle.php	/^        $status   = $e->getStatusCode();$/;"	v
status	.\vendor\firebase\php-jwt\src\JWT.php	/^                $status = 0;$/;"	v
status	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^                    $status = '     <info>up<\/info> ';$/;"	v
status	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^                    $status = '   <error>down<\/error> ';$/;"	v
statusCode	.\thinkphp\library\think\console\Command.php	/^            $statusCode = $this->execute($input, $output);$/;"	v
statusCode	.\thinkphp\library\think\console\Command.php	/^            $statusCode = call_user_func($this->code, $input, $output);$/;"	v
statusCode	.\thinkphp\library\think\exception\Handle.php	/^            $statusCode = $exception->getStatusCode();$/;"	v
statusCode	.\thinkphp\library\think\exception\Handle.php	/^            $statusCode = 500;$/;"	v
statusCode	.\thinkphp\library\think\exception\HttpException.php	/^        $this->statusCode = $statusCode;$/;"	v
statusCode	.\thinkphp\library\think\exception\HttpException.php	/^    private $statusCode;$/;"	v
stderr	.\thinkphp\library\think\Process.php	/^        $this->stderr                       = '';$/;"	v
stderr	.\thinkphp\library\think\Process.php	/^        $this->stderr                       = null;$/;"	v
stderr	.\thinkphp\library\think\Process.php	/^    private $stderr;$/;"	v
stderr	.\thinkphp\library\think\console\output\driver\Console.php	/^        $stderr    = $this->openErrorStream();$/;"	v
stdout	.\thinkphp\library\think\Process.php	/^        $this->stdout                       = null;$/;"	v
stdout	.\thinkphp\library\think\Process.php	/^        $this->stdout                  = '';$/;"	v
stdout	.\thinkphp\library\think\Process.php	/^    private $stdout;$/;"	v
stdout	.\thinkphp\library\think\console\output\driver\Console.php	/^        $this->stdout    = $this->openOutputStream();$/;"	v
stdout	.\thinkphp\library\think\console\output\driver\Console.php	/^    private $stdout;$/;"	v
step	.\thinkphp\library\think\Cache.php	/^    public static function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\Cache.php	/^    public static function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\Model.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	v
step	.\thinkphp\library\think\Model.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	v
step	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function dec($name, $step = 1);$/;"	v
step	.\thinkphp\library\think\cache\Driver.php	/^    abstract public function inc($name, $step = 1);$/;"	v
step	.\thinkphp\library\think\cache\driver\File.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\File.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Lite.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Redis.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Sqlite.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Wincache.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function dec($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\cache\driver\Xcache.php	/^    public function inc($name, $step = 1)$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^                    $step = $rule['expr'];$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^            $step = $this->lazyWrite('dec', $guid, $step, $lazyTime);$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^            $step = $this->lazyWrite('inc', $guid, $step, $lazyTime);$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^    public function dec($field, $step = 1)$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^    public function inc($field, $step = 1)$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	v
step	.\thinkphp\library\think\db\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	v
step	.\thinkphp\library\think\template\taglib\Cx.php	/^                    $step = $value;$/;"	v
step	.\thinkphp\library\think\template\taglib\Cx.php	/^        $step       = 1;$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^            $step = $this->lazyWrite($guid, $step, $lazyTime);$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^            $step = $this->lazyWrite($guid, -$step, $lazyTime);$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^    public function dec($field, $step = 1)$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^    public function inc($field, $step = 1)$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	v
step	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	v
stmt	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^        $stmt = $this->getConnection()->prepare($sql);$/;"	v
stop	.\thinkphp\library\think\Process.php	/^    public function stop()$/;"	f
stop	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function stop()$/;"	f
stop	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    public function stop()$/;"	f
storage	.\thinkphp\library\think\Template.php	/^        $this->storage = new $class();$/;"	v
storage	.\thinkphp\library\think\Template.php	/^    protected $storage;$/;"	v
store	.\thinkphp\library\think\Cache.php	/^    public static function store($name = '')$/;"	f
str	.\thinkphp\library\think\Request.php	/^            $str           = $this->url();$/;"	v
str	.\thinkphp\library\think\Route.php	/^                    $str = $key;$/;"	v
str	.\thinkphp\library\think\Route.php	/^                    $str = substr($key, 0, $pos);$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . $name . '?' . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: '!empty(' . $name . ')') . '?' . $name . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: '!empty(' . $name . ')') . '?' . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: 'isset(' . $name . ')') . '?' . $name . ':' . substr($str, 1) . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php echo (' . $name . ') ? ' . $name . ' : ' . substr($str, 1) . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php if(' . $name . ') echo ' . substr($str, 1) . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                                        $str = '<?php if(' . ($express ?: '!empty(' . $name . ')') . ') echo ' . substr($str, 1) . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                            $str = '';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                            $str = '<?php echo ' . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                            $str = trim(substr($str, $pos + 1));$/;"	v
str	.\thinkphp\library\think\Template.php	/^                        $str = $this->config['tpl_begin'] . $str . $this->config['tpl_end'];$/;"	v
str	.\thinkphp\library\think\Template.php	/^                        $str = '<?php ' . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                        $str = '<?php echo ' . $str . '; ?>';$/;"	v
str	.\thinkphp\library\think\Template.php	/^                        $str = substr($str, 1);$/;"	v
str	.\thinkphp\library\think\Template.php	/^                $str  = stripslashes($match[1]);$/;"	v
str	.\thinkphp\library\think\db\Builder.php	/^            $str = [];$/;"	v
str	.\thinkphp\library\think\template\taglib\Cx.php	/^            $str   = 'explode(\\',\\',' . $value . ')';$/;"	v
str	.\thinkphp\library\think\template\taglib\Cx.php	/^            $str   = 'is_array(' . $value . ')?' . $value . ':explode(\\',\\',' . $value . ')';$/;"	v
str	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $str = substr(md5($str), 8, 10);$/;"	v
stream	.\thinkphp\library\think\console\output\driver\Console.php	/^            $stream = $this->stdout;$/;"	v
stream	.\thinkphp\library\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	v
strict	.\thinkphp\library\think\db\Query.php	/^    public function strict($strict = true)$/;"	f
string	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function string($name, $length = 255)$/;"	f
string	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $string  = $this->workerCommand;$/;"	v
stringWidth	.\thinkphp\library\think\console\output\driver\Console.php	/^    private function stringWidth($string)$/;"	f
stty	.\thinkphp\library\think\console\output\Ask.php	/^    private static $stty;$/;"	v
sttyMode	.\thinkphp\library\think\console\output\Ask.php	/^            $sttyMode = shell_exec('stty -g');$/;"	v
sttyMode	.\thinkphp\library\think\console\output\Ask.php	/^        $sttyMode = shell_exec('stty -g');$/;"	v
stub	.\thinkphp\library\think\console\command\Make.php	/^        $stub = file_get_contents($this->getStub());$/;"	v
studly	.\vendor\topthink\think-helper\src\Str.php	/^    public static function studly($value)$/;"	f
studlyCache	.\vendor\topthink\think-helper\src\Str.php	/^    protected static $studlyCache = [];$/;"	v
style	.\thinkphp\library\think\console\output\Formatter.php	/^            } elseif (false === $style = $this->createStyleFromString(strtolower($tag))) {$/;"	v
style	.\thinkphp\library\think\console\output\Formatter.php	/^        $style = new Style();$/;"	v
style	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null)$/;"	v
style	.\thinkphp\library\think\debug\Console.php	/^                    $style  = "color:#009bb4;";$/;"	v
style	.\thinkphp\library\think\debug\Console.php	/^                    $style  = 'color:#F4006B;font-size:14px;';$/;"	v
styleStack	.\thinkphp\library\think\console\output\Formatter.php	/^        $this->styleStack = new StyleStack();$/;"	v
styleStack	.\thinkphp\library\think\console\output\Formatter.php	/^    private $styleStack;$/;"	v
styles	.\thinkphp\library\think\console\Output.php	/^    protected $styles = [$/;"	v
styles	.\thinkphp\library\think\console\output\Formatter.php	/^    private $styles    = [];$/;"	v
styles	.\thinkphp\library\think\console\output\formatter\Stack.php	/^                $this->styles = array_slice($this->styles, 0, $index);$/;"	v
styles	.\thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->styles = [];$/;"	v
styles	.\thinkphp\library\think\console\output\formatter\Stack.php	/^    private $styles;$/;"	v
subDomain	.\thinkphp\library\think\Route.php	/^                    $subDomain       = implode('.', $domain);$/;"	v
subDomain	.\thinkphp\library\think\Route.php	/^    private static $subDomain = '';$/;"	v
subPath	.\vendor\composer\ClassLoader.php	/^                $subPath = substr($subPath, 0, $lastPos);$/;"	v
subPath	.\vendor\composer\ClassLoader.php	/^            $subPath = $class;$/;"	v
subQuery	.\thinkphp\library\think\db\Query.php	/^    public function withCount($relation, $subQuery = true)$/;"	v
subRelation	.\thinkphp\library\think\Model.php	/^                $subRelation = $relation;$/;"	v
subRelation	.\thinkphp\library\think\Model.php	/^            $subRelation = '';$/;"	v
subRelation	.\thinkphp\library\think\db\Query.php	/^                $subRelation = $relation;$/;"	v
subRelation	.\thinkphp\library\think\db\Query.php	/^            $subRelation = '';$/;"	v
subRelation	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany($where, $relation, $subRelation = '')$/;"	v
subRelation	.\thinkphp\library\think\model\relation\HasMany.php	/^    protected function eagerlyOneToMany($model, $where, $relation, $subRelation = '', $closure = false)$/;"	v
subRelation	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany($where, $relation, $subRelation = '', $closure = false)$/;"	v
subRelation	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne($where, $relation, $subRelation = '', $closure = false)$/;"	v
subRelation	.\thinkphp\library\think\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne($model, $relation, &$result, $subRelation = '')$/;"	v
subRelation	.\thinkphp\library\think\model\relation\OneToOne.php	/^    protected function eagerlyWhere($model, $where, $key, $relation, $subRelation = '', $closure = false)$/;"	v
subSql	.\thinkphp\library\think\db\Query.php	/^            $subSql  = $this->options($options)->field('count(' . $field . ')')->bind($this->bind)->buildSql();$/;"	v
subToArray	.\thinkphp\library\think\Model.php	/^    protected function subToArray($model, $visible, $hidden, $key)$/;"	f
substr	.\vendor\topthink\think-helper\src\Str.php	/^    public static function substr($string, $start, $length = null)$/;"	f
success	.\extend\php-jwt-master\src\JWT.php	/^                $success = openssl_sign($msg, $signature, $key, $algorithm);$/;"	v
success	.\extend\php-jwt-master\src\JWT.php	/^                $success = openssl_verify($msg, $signature, $key, $algorithm);$/;"	v
success	.\thinkphp\library\traits\controller\Jump.php	/^    protected function success($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	f
success	.\vendor\firebase\php-jwt\src\JWT.php	/^                $success = openssl_sign($msg, $signature, $key, $algorithm);$/;"	v
success	.\vendor\firebase\php-jwt\src\JWT.php	/^                $success = openssl_verify($msg, $signature, $key, $algorithm);$/;"	v
suffix	.\thinkphp\library\think\App.php	/^            $suffix     = $config['action_suffix'];$/;"	v
suffix	.\thinkphp\library\think\App.php	/^    public static $suffix = false;$/;"	v
suffix	.\thinkphp\library\think\Build.php	/^            $suffix = $suffix ? 'Controller' : '';$/;"	v
suffix	.\thinkphp\library\think\Build.php	/^    protected static function buildHello($module, $namespace, $suffix = false)$/;"	v
suffix	.\thinkphp\library\think\Model.php	/^                $suffix     = basename(dirname($name));$/;"	v
suffix	.\thinkphp\library\think\Request.php	/^            $suffix   = Config::get('url_html_suffix');$/;"	v
suffix	.\thinkphp\library\think\Route.php	/^                    $suffix = isset($options['ext']) ? $options['ext'] : null;$/;"	v
suffix	.\thinkphp\library\think\Route.php	/^                $suffix = App::$suffix || Config::get('controller_suffix') ? ucfirst(Config::get('url_controller_layer')) : '';$/;"	v
suffix	.\thinkphp\library\think\Route.php	/^            $suffix = isset($option['ext']) ? $option['ext'] : null;$/;"	v
suffix	.\thinkphp\library\think\Url.php	/^                $suffix = $match[2];$/;"	v
suffix	.\thinkphp\library\think\Url.php	/^                $suffix = substr($suffix, 0, $pos);$/;"	v
suffix	.\thinkphp\library\think\Url.php	/^            $suffix = true === $suffix ? Config::get('url_html_suffix') : $suffix;$/;"	v
suffix	.\thinkphp\library\think\Url.php	/^        $suffix = in_array($url, ['\/', '']) ? '' : self::parseSuffix($suffix);$/;"	v
suffix	.\thinkphp\library\think\template\taglib\Cx.php	/^        $suffix = isset($tag['suffix']) ? $tag['suffix'] : 'true';$/;"	v
suggestions	.\thinkphp\library\think\Console.php	/^            $suggestions = $this->getAbbreviationSuggestions(array_values($commands));$/;"	v
sum	.\thinkphp\library\think\db\Query.php	/^    public function sum($field)$/;"	f
sum	.\vendor\topthink\think-mongo\src\Query.php	/^    public function sum($field)$/;"	f
supportSavepoint	.\thinkphp\library\think\db\Connection.php	/^    protected function supportSavepoint()$/;"	f
supportSavepoint	.\thinkphp\library\think\db\connector\Mysql.php	/^    protected function supportSavepoint()$/;"	f
supportSavepoint	.\thinkphp\library\think\db\connector\Pgsql.php	/^    protected function supportSavepoint()$/;"	f
supportSavepoint	.\thinkphp\library\think\db\connector\Sqlite.php	/^    protected function supportSavepoint()$/;"	f
supportedCommands	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\ProxyAdapter.php	/^        $supportedCommands = array($/;"	v
supported_algs	.\extend\php-jwt-master\src\JWT.php	/^    public static $supported_algs = array($/;"	v
supported_algs	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static $supported_algs = array($/;"	v
supports	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^    public function supports($packageType)$/;"	f
supports	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^    public function supports($packageType)$/;"	f
supports	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^    public function supports($packageType)$/;"	f
sync	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function sync($ids, $detaching = true)$/;"	f
synopsis	.\thinkphp\library\think\console\Command.php	/^    private $synopsis = [];$/;"	v
synopsis	.\thinkphp\library\think\console\output\Descriptor.php	/^        $synopsis   = sprintf('%s%s', $option->getShortcut() ? sprintf('-%s, ', $option->getShortcut()) : '    ', sprintf('--%s%s', $option->getName(), $value));$/;"	v
tLib	.\thinkphp\library\think\Template.php	/^        $tLib = new $className($this);$/;"	v
tabid	.\thinkphp\library\think\log\driver\Socket.php	/^        $tabid = $this->getClientArg('tabid');$/;"	v
table	.\thinkphp\library\think\Model.php	/^            $table = $this->getQuery()->getTable($name);$/;"	v
table	.\thinkphp\library\think\Model.php	/^        $table      = $table ?: Loader::parseName($this->name) . '_' . $name;$/;"	v
table	.\thinkphp\library\think\Model.php	/^    protected $table;$/;"	v
table	.\thinkphp\library\think\Model.php	/^    public function belongsToMany($model, $table = '', $foreignKey = '', $localKey = '')$/;"	v
table	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $table   = $class::getTable();$/;"	v
table	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $table = $input->getOption('table');$/;"	v
table	.\thinkphp\library\think\db\Builder.php	/^                $table = $pos;$/;"	v
table	.\thinkphp\library\think\db\Builder.php	/^                $table = $this->parseSqlTable($table);$/;"	v
table	.\thinkphp\library\think\db\Builder.php	/^                $table = $this->parseTable($table, $options);$/;"	v
table	.\thinkphp\library\think\db\Builder.php	/^            $table = $options['table'];$/;"	v
table	.\thinkphp\library\think\db\Builder.php	/^        $table = $this->parseTable($options['table'], $options);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                    $table = $join;$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                    $table = $key;$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                    $table = $this->getTable($table);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                    $table = $this->parseSqlTable($key);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                    $table = $this->parseSqlTable($table);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                $table  = [];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                $table = $join;$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                $table = $this->getTable();$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                $table = [$table => $alias];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^                $table = is_array($this->options['table']) ? key($this->options['table']) : $this->options['table'];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table  = $this->getJoinTable($join, $alias);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table  = [];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table = $join;$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table = $this->getJoinTable($join);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table = '*';$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table = is_array($options['table']) ? key($options['table']) : $options['table'];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^            $table = isset($this->options['table']) ? $this->options['table'] : $this->getTable();$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^        $table = $this->parseSqlTable($table);$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^        $table = is_array($options['table']) ? key($options['table']) : $options['table'];$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^        $this->table = $table;$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^    protected $table = '';$/;"	v
table	.\thinkphp\library\think\db\Query.php	/^    public function table($table)$/;"	f
table	.\thinkphp\library\think\db\builder\Mysql.php	/^                $table = $options['alias'][$table];$/;"	v
table	.\thinkphp\library\think\db\builder\Mysql.php	/^                $table = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\db\builder\Mysql.php	/^                $table = str_replace('.', '`.`', $table);$/;"	v
table	.\thinkphp\library\think\db\builder\Pgsql.php	/^                $table = $options['alias'][$table];$/;"	v
table	.\thinkphp\library\think\db\builder\Pgsql.php	/^                $table = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\db\builder\Sqlite.php	/^                $table = $options['alias'][$table];$/;"	v
table	.\thinkphp\library\think\db\builder\Sqlite.php	/^                $table = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^                $table = $options['alias'][$table];$/;"	v
table	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^                $table = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^        $this->table   = $table;$/;"	v
table	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^    protected $table;$/;"	v
table	.\thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function __construct($message, $table = '', array $config = [])$/;"	v
table	.\thinkphp\library\think\model\Merge.php	/^                        $table = is_int($key) ? $db->getTable($model) : $model;$/;"	v
table	.\thinkphp\library\think\model\Merge.php	/^                    $table = is_int($key) ? $db->getTable($model) : $model;$/;"	v
table	.\thinkphp\library\think\model\Merge.php	/^            $table = is_int($key) ? $query->getTable($name) : $model;$/;"	v
table	.\thinkphp\library\think\model\Merge.php	/^    protected static function getModelField($query, $name, $table = '', $map = [], $fields = [])$/;"	v
table	.\thinkphp\library\think\model\relation\BelongsTo.php	/^        $table    = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^            $table = $this->pivot->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $table     = $this->pivot->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\HasMany.php	/^        $table    = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\HasOne.php	/^        $table      = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\HasOne.php	/^        $table    = $this->query->getTable();$/;"	v
table	.\thinkphp\library\think\model\relation\OneToOne.php	/^            $table = $query->getTable();$/;"	v
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^            $table = new Table($this->getSchemaTableName(), $options, $this);$/;"	v
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^            $table = new Table($this->getSchemaTableName(), array(), $this);$/;"	v
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^            $table = new Table($table, array(), $this->getAdapter());$/;"	v
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function table($tableName, $options = array())$/;"	f
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function table($tableName, $options);$/;"	f
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^            $table = new Table($table, array(), $this->getAdapter());$/;"	v
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\AbstractSeed.php	/^    public function table($tableName, $options = array())$/;"	f
table	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^    public function table($tableName, $options);$/;"	f
table	.\vendor\topthink\think-migration\src\Migrator.php	/^    public function table($tableName, $options = [])$/;"	f
table	.\vendor\topthink\think-mongo\src\Query.php	/^        $this->table = $table;$/;"	v
table	.\vendor\topthink\think-mongo\src\Query.php	/^    protected $table = '';$/;"	v
table	.\vendor\topthink\think-mongo\src\Query.php	/^    public function table($table)$/;"	f
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = $this->getTable();$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = $this->parseSqlTable($tableName);$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = $this->prefix;$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = $this->table;$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = '( ' . implode(" UNION ", $tableName) . ') AS ' . $this->name;$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = [];$/;"	v
tableName	.\thinkphp\library\think\db\Query.php	/^            $tableName = key($tableName) ?: current($tableName);$/;"	v
tableName	.\thinkphp\library\think\db\connector\Mysql.php	/^                $tableName = str_replace('.', '`.`', $tableName);$/;"	v
tableName	.\thinkphp\library\think\db\connector\Mysql.php	/^            $tableName = '`' . $tableName . '`';$/;"	v
tableName	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^        $tableName = $this->query->getTable();$/;"	v
tableName	.\vendor\topthink\think-mongo\src\Query.php	/^            $tableName = $this->getTable();$/;"	v
tableName	.\vendor\topthink\think-mongo\src\Query.php	/^            $tableName = $this->parseSqlTable($tableName);$/;"	v
tableName	.\vendor\topthink\think-mongo\src\Query.php	/^            $tableName = $this->prefix;$/;"	v
tableName	.\vendor\topthink\think-mongo\src\Query.php	/^            $tableName = $this->table;$/;"	v
tableName	.\vendor\topthink\think-mongo\src\Query.php	/^            $tableName = key($tableName) ?: current($tableName);$/;"	v
table_msg	.\thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_schema_name varchar, a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
table_msg	.\thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
tables	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $tables = Db::connect($config)->getTables($dbName);$/;"	v
tables	.\thinkphp\library\think\console\command\optimize\Schema.php	/^            $tables = Db::connect($config)->getTables();$/;"	v
tables	.\thinkphp\library\think\db\Query.php	/^                $tables = explode(',', $table);$/;"	v
tables	.\thinkphp\library\think\db\Query.php	/^            $tables = $table;$/;"	v
tables	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $tables = array();$/;"	v
tag	.\thinkphp\library\think\Cache.php	/^    public static function tag($name, $keys = null, $overlay = false)$/;"	f
tag	.\thinkphp\library\think\Hook.php	/^            foreach ($tags as $tag => $behavior) {$/;"	v
tag	.\thinkphp\library\think\Hook.php	/^    public static function exec($class, $tag = '', &$params = null, $extra = null)$/;"	v
tag	.\thinkphp\library\think\Request.php	/^            $tag    = $except;$/;"	v
tag	.\thinkphp\library\think\Route.php	/^                $tag    = null;$/;"	v
tag	.\thinkphp\library\think\Template.php	/^                        $tag                  = array_pop($right);$/;"	v
tag	.\thinkphp\library\think\cache\Driver.php	/^            $this->tag = $name;$/;"	v
tag	.\thinkphp\library\think\cache\Driver.php	/^            $this->tag = null;$/;"	v
tag	.\thinkphp\library\think\cache\Driver.php	/^    protected $tag;$/;"	v
tag	.\thinkphp\library\think\cache\Driver.php	/^    public function tag($name, $keys = null, $overlay = false)$/;"	f
tag	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $tag       = $this->tag;$/;"	v
tag	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $tag = '';$/;"	v
tag	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $this->tag = null;$/;"	v
tag	.\thinkphp\library\think\console\output\Formatter.php	/^                $tag = $matches[1][$i][0];$/;"	v
tag	.\thinkphp\library\think\console\output\Formatter.php	/^                $tag = isset($matches[3][$i][0]) ? $matches[3][$i][0] : '';$/;"	v
tag	.\thinkphp\library\think\template\TagLib.php	/^                            $tag           = $val;$/;"	v
tag	.\thinkphp\library\think\template\TagLib.php	/^                $tag = $this->tags[$name];$/;"	v
tagAssign	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagAssign($tag, $content)$/;"	f
tagCase	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagCase($tag, $content)$/;"	f
tagCompare	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagCompare($tag, $content)$/;"	f
tagDefault	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefault($tag)$/;"	f
tagDefine	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefine($tag, $content)$/;"	f
tagDefined	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefined($tag, $content)$/;"	f
tagElse	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagElse($tag)$/;"	f
tagElseif	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagElseif($tag, $content)$/;"	f
tagEmpty	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagEmpty($tag, $content)$/;"	f
tagFor	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagFor($tag, $content)$/;"	f
tagForeach	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagForeach($tag, $content)$/;"	f
tagFunction	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagFunction($tag, $content)$/;"	f
tagIf	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagIf($tag, $content)$/;"	f
tagLib	.\thinkphp\library\think\Template.php	/^            $tagLib    = substr($tagLib, strrpos($tagLib, '\\\\') + 1);$/;"	v
tagLib	.\thinkphp\library\think\template\TagLib.php	/^    protected $tagLib = '';$/;"	v
tagLibs	.\thinkphp\library\think\Template.php	/^            $tagLibs = $this->getIncludeTagLib($content);$/;"	v
tagLibs	.\thinkphp\library\think\Template.php	/^            $tagLibs = explode(',', $this->config['taglib_pre_load']);$/;"	v
tagLibs	.\thinkphp\library\think\Template.php	/^        $tagLibs = explode(',', $this->config['taglib_build_in']);$/;"	v
tagList	.\thinkphp\library\think\template\TagLib.php	/^    protected $tagList = [];$/;"	v
tagLoad	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagLoad($tag, $content)$/;"	f
tagName	.\thinkphp\library\think\template\TagLib.php	/^        $tagName = is_array($tags) ? implode('|', $tags) : $tags;$/;"	v
tagNotdefined	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotdefined($tag, $content)$/;"	f
tagNotempty	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotempty($tag, $content)$/;"	f
tagNotpresent	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotpresent($tag, $content)$/;"	f
tagPhp	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagPhp($tag, $content)$/;"	f
tagPresent	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagPresent($tag, $content)$/;"	f
tagRange	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagRange($tag, $content)$/;"	f
tagRegex	.\thinkphp\library\think\console\output\Formatter.php	/^        $tagRegex = '[a-z][a-z0-9_=;-]*';$/;"	v
tagSwitch	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagSwitch($tag, $content)$/;"	f
tagUrl	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagUrl($tag, $content)$/;"	f
tagVolist	.\thinkphp\library\think\template\taglib\Cx.php	/^    public function tagVolist($tag, $content)$/;"	f
tags	.\thinkphp\library\think\Hook.php	/^    private static $tags = [];$/;"	v
tags	.\thinkphp\library\think\template\TagLib.php	/^        $tags = [];$/;"	v
tags	.\thinkphp\library\think\template\TagLib.php	/^    protected $tags = []; \/\/ 标签定义$/;"	v
tags	.\thinkphp\library\think\template\taglib\Cx.php	/^    protected $tags = [$/;"	v
tailable	.\vendor\topthink\think-mongo\src\Query.php	/^    public function tailable($tailable)$/;"	f
target	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^                        $target = $extraDir . DIRECTORY_SEPARATOR . $name . '.php';$/;"	v
template	.\thinkphp\library\think\Template.php	/^                $template = str_replace(['\/', ':'], $this->config['view_depr'], $template);$/;"	v
template	.\thinkphp\library\think\Template.php	/^                $template = str_replace(['\/', ':'], $this->config['view_depr'], substr($template, 1));$/;"	v
template	.\thinkphp\library\think\Template.php	/^            $template = $this->parseTemplateFile($templateName);$/;"	v
template	.\thinkphp\library\think\Template.php	/^            $template = realpath($path . $template . '.' . ltrim($this->config['view_suffix'], '.'));$/;"	v
template	.\thinkphp\library\think\Template.php	/^        $template = $this->parseTemplateFile($template);$/;"	v
template	.\thinkphp\library\think\exception\Handle.php	/^        $template = Config::get('http_exception_template');$/;"	v
template	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^        $this->template = $template;$/;"	v
template	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^    protected $template;$/;"	v
template	.\thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function __construct($message, $template = '')$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^                    $template = str_replace('.', DS, $controller) . $depr . $template;$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^                    $template = str_replace('.', DS, $controller) . $depr . (1 == $this->config['auto_rule'] ? Loader::parseName($request->action(true)) : $request->action());$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^            $template   = str_replace(['\/', ':'], $depr, $template);$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^            $template = $this->parseTemplate($template);$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^            $template = str_replace(['\/', ':'], $depr, substr($template, 1));$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^        $this->template = $template;$/;"	v
template	.\thinkphp\library\think\view\driver\Php.php	/^    protected $template;$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^                    $template = str_replace('.', DS, $controller) . $depr . $template;$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^                    $template = str_replace('.', DS, $controller) . $depr . (1 == $this->config['auto_rule'] ? Loader::parseName($request->action(true)) : $request->action());$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^            $template   = str_replace(['\/', ':'], $depr, $template);$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^            $template = $this->parseTemplate($template);$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^            $template = str_replace(['\/', ':'], $depr, substr($template, 1));$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^        $this->template = new Template($this->config);$/;"	v
template	.\thinkphp\library\think\view\driver\Think.php	/^    private $template;$/;"	v
template	.\thinkphp\library\traits\controller\Jump.php	/^            $template = Config::get('template');$/;"	v
templateName	.\thinkphp\library\think\Template.php	/^                $templateName = $this->get(substr($templateName, 1));$/;"	v
template_deny_funs	.\thinkphp\library\think\Template.php	/^            $template_deny_funs = explode(',', $this->config['tpl_deny_func_list']);$/;"	v
terminalDimensions	.\thinkphp\library\think\console\output\driver\Console.php	/^    private $terminalDimensions;$/;"	v
test	.\thinkphp\library\think\console\output\Ask.php	/^            $test = "\/usr\/bin\/env %s -c 'echo OK' 2> \/dev\/null";$/;"	v
testAdditionalHeaders	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testAdditionalHeaders()$/;"	f
testArrayAccessKIDChooser	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testArrayAccessKIDChooser()$/;"	f
testBeforeValidTokenWithIat	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testBeforeValidTokenWithIat()$/;"	f
testBeforeValidTokenWithNbf	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testBeforeValidTokenWithNbf()$/;"	f
testDecodeFromPython	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testDecodeFromPython()$/;"	f
testEmptyKeyFails	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testEmptyKeyFails()$/;"	f
testEncodeDecode	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testEncodeDecode()$/;"	f
testExpiredToken	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testExpiredToken()$/;"	f
testExpiredTokenWithLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testExpiredTokenWithLeeway()$/;"	f
testGif	.\vendor\topthink\think-image\tests\CropTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\FlipTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\InfoTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\RotateTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\TextTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\ThumbTest.php	/^    public function testGif()$/;"	f
testGif	.\vendor\topthink\think-image\tests\WaterTest.php	/^    public function testGif()$/;"	f
testIllegal	.\vendor\topthink\think-image\tests\InfoTest.php	/^    public function testIllegal()$/;"	f
testIncorrectAlgorithm	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testIncorrectAlgorithm()$/;"	f
testInvalidSegmentCount	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testInvalidSegmentCount()$/;"	f
testInvalidSignatureEncoding	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testInvalidSignatureEncoding()$/;"	f
testInvalidToken	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testInvalidToken()$/;"	f
testInvalidTokenWithIatLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testInvalidTokenWithIatLeeway()$/;"	f
testInvalidTokenWithNbfLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testInvalidTokenWithNbfLeeway()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\CropTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\FlipTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\InfoTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\RotateTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\TextTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\ThumbTest.php	/^    public function testJpeg()$/;"	f
testJpeg	.\vendor\topthink\think-image\tests\WaterTest.php	/^    public function testJpeg()$/;"	f
testKIDChooser	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testKIDChooser()$/;"	f
testMalformedJsonThrowsException	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testMalformedJsonThrowsException()$/;"	f
testMalformedUtf8StringsFail	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testMalformedUtf8StringsFail()$/;"	f
testMissingAlgorithm	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testMissingAlgorithm()$/;"	f
testNoneAlgorithm	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testNoneAlgorithm()$/;"	f
testNullKeyFails	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testNullKeyFails()$/;"	f
testOpen	.\vendor\topthink\think-image\tests\InfoTest.php	/^    public function testOpen()$/;"	f
testPng	.\vendor\topthink\think-image\tests\CropTest.php	/^    public function testPng()$/;"	f
testPng	.\vendor\topthink\think-image\tests\InfoTest.php	/^    public function testPng()$/;"	f
testPng	.\vendor\topthink\think-image\tests\TextTest.php	/^    public function testPng()$/;"	f
testPng	.\vendor\topthink\think-image\tests\ThumbTest.php	/^    public function testPng()$/;"	f
testPng	.\vendor\topthink\think-image\tests\WaterTest.php	/^    public function testPng()$/;"	f
testRSEncodeDecode	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testRSEncodeDecode()$/;"	f
testUrlSafeCharacters	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testUrlSafeCharacters()$/;"	f
testValidToken	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidToken()$/;"	f
testValidTokenWithIatLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidTokenWithIatLeeway()$/;"	f
testValidTokenWithLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidTokenWithLeeway()$/;"	f
testValidTokenWithList	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidTokenWithList()$/;"	f
testValidTokenWithNbf	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidTokenWithNbf()$/;"	f
testValidTokenWithNbfLeeway	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testValidTokenWithNbfLeeway()$/;"	f
testVerifyError	.\vendor\firebase\php-jwt\tests\JWTTest.php	/^    public function testVerifyError()$/;"	f
text	.\thinkphp\library\think\console\output\Ask.php	/^                $text    = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $choices[$default]);$/;"	v
text	.\thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s (yes\/no)<\/info> [<comment>%s<\/comment>]:', $text, $default ? 'yes' : 'no');$/;"	v
text	.\thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $default);$/;"	v
text	.\thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, implode(', ', $default));$/;"	v
text	.\thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info>:', $text);$/;"	v
text	.\thinkphp\library\think\console\output\Ask.php	/^        $text    = $this->question->getQuestion();$/;"	v
text	.\thinkphp\library\think\console\output\Formatter.php	/^            $text = $match[0];$/;"	v
text	.\vendor\topthink\think-image\src\Image.php	/^    public function text($text, $font, $size, $color = '#00000000',$/;"	f
text	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function text($name)$/;"	f
that	.\thinkphp\library\think\console\output\Ask.php	/^        $that = $this;$/;"	v
threshold	.\thinkphp\library\think\Console.php	/^        $threshold       = 1e3;$/;"	v
through	.\thinkphp\library\think\Model.php	/^        $through    = $this->parseModel($through);$/;"	v
through	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $through      = $this->through;$/;"	v
through	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->through    = $through;$/;"	v
through	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected $through;$/;"	v
throughKey	.\thinkphp\library\think\Model.php	/^        $throughKey = $throughKey ?: $this->getForeignKey($through);$/;"	v
throughKey	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $throughKey   = $this->throughKey;$/;"	v
throughKey	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->throughKey = $throughKey;$/;"	v
throughKey	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected $throughKey;$/;"	v
throughTable	.\thinkphp\library\think\model\relation\HasManyThrough.php	/^            $throughTable = $through::getTable();$/;"	v
throwNotFound	.\thinkphp\library\think\db\Query.php	/^    protected function throwNotFound($options = [])$/;"	f
throwNotFound	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function throwNotFound($options = [])$/;"	f
thrown	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\IrreversibleMigrationException.php	/^ * Exception class thrown when migrations cannot be reversed using the 'change'$/;"	c
thumb	.\vendor\topthink\think-image\src\Image.php	/^    public function thumb($width, $height, $type = self::THUMB_SCALING)$/;"	f
time	.\thinkphp\library\think\Model.php	/^            $time = date($format, $time);$/;"	v
time	.\thinkphp\library\think\Model.php	/^            $time = new $format($time);$/;"	v
time	.\thinkphp\library\think\Request.php	/^    public function time($float = false)$/;"	f
time	.\thinkphp\library\think\Session.php	/^                $time = $item['__time__'];$/;"	v
time	.\thinkphp\library\think\cache\Driver.php	/^            $time = time();$/;"	v
time	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function time($name)$/;"	f
time	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^            $from, $time = time()$/;"	v
timeTypes	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PostgresAdapter.php	/^            $timeTypes = array($/;"	v
time_str	.\thinkphp\library\think\log\driver\File.php	/^                $time_str   = ' [运行时间：' . number_format($runtime, 6) . 's][吞吐率：' . $reqs . 'req\/s]';$/;"	v
time_str	.\thinkphp\library\think\log\driver\Socket.php	/^            $time_str   = ' [运行时间：' . number_format($runtime, 6) . 's][吞吐率：' . $reqs . 'req\/s]';$/;"	v
timeout	.\thinkphp\library\think\Process.php	/^            $timeout = null;$/;"	v
timeout	.\thinkphp\library\think\Process.php	/^        $this->timeout = $this->validateTimeout($timeout);$/;"	v
timeout	.\thinkphp\library\think\Process.php	/^        $timeout = (float) $timeout;$/;"	v
timeout	.\thinkphp\library\think\Process.php	/^    private $timeout;$/;"	v
timeout	.\thinkphp\library\think\process\Builder.php	/^            $this->timeout = null;$/;"	v
timeout	.\thinkphp\library\think\process\Builder.php	/^        $this->timeout = $timeout;$/;"	v
timeout	.\thinkphp\library\think\process\Builder.php	/^        $timeout = (float) $timeout;$/;"	v
timeout	.\thinkphp\library\think\process\Builder.php	/^    private $timeout        = 60;$/;"	v
timeout	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    public function listen($queue, $delay, $memory, $timeout = 60)$/;"	v
timeout	.\vendor\topthink\think-queue\src\queue\command\Listen.php	/^        $timeout = $input->getOption('timeout');$/;"	v
timeoutType	.\thinkphp\library\think\process\exception\Timeout.php	/^        $this->timeoutType = $timeoutType;$/;"	v
timeoutType	.\thinkphp\library\think\process\exception\Timeout.php	/^        return $this->timeoutType === self::TYPE_GENERAL;$/;"	v
timeoutType	.\thinkphp\library\think\process\exception\Timeout.php	/^        return $this->timeoutType === self::TYPE_IDLE;$/;"	v
timeoutType	.\thinkphp\library\think\process\exception\Timeout.php	/^    private $timeoutType;$/;"	v
times	.\thinkphp\library\think\db\Query.php	/^            $times = 1;$/;"	v
timestamp	.\extend\php-jwt-master\src\JWT.php	/^        $timestamp = is_null(static::$timestamp) ? time() : static::$timestamp;$/;"	v
timestamp	.\extend\php-jwt-master\src\JWT.php	/^    public static $timestamp = null;$/;"	v
timestamp	.\thinkphp\library\think\Model.php	/^    protected function formatDateTime($time, $format, $timestamp = false)$/;"	v
timestamp	.\vendor\firebase\php-jwt\src\JWT.php	/^        $timestamp = is_null(static::$timestamp) ? time() : static::$timestamp;$/;"	v
timestamp	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static $timestamp = null;$/;"	v
timestamp	.\vendor\topthink\think-helper\src\Time.php	/^        $timestamp = time();$/;"	v
timestamp	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function timestamp($name)$/;"	f
timezone	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->timezone = (bool) $timezone;$/;"	v
timezone	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $timezone = false;$/;"	v
tinyInteger	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function tinyInteger($name)$/;"	f
title	.\thinkphp\library\think\Validate.php	/^                $title = isset($this->field[$key]) ? $this->field[$key] : $key;$/;"	v
title	.\thinkphp\library\think\Validate.php	/^    protected function checkItem($field, $value, $rules, $data, $title = '', $msg = [])$/;"	v
title	.\thinkphp\library\think\console\output\driver\Console.php	/^            $title = sprintf('  [%s]  ', get_class($e));$/;"	v
title	.\vendor\topthink\think-helper\src\Str.php	/^    public static function title($value)$/;"	f
tks	.\extend\php-jwt-master\src\JWT.php	/^        $tks = explode('.', $jwt);$/;"	v
tks	.\vendor\firebase\php-jwt\src\JWT.php	/^        $tks = explode('.', $jwt);$/;"	v
tmpTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $tmpTableName = 'tmp_' . $table->getName();$/;"	v
tmpTableName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $tmpTableName = 'tmp_' . $tableName;$/;"	v
to	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^     * You can use this class to create and manipulate tables.$/;"	c
to	.\vendor\topthink\think-migration\phinx\src\Phinx\Seed\SeedInterface.php	/^     * You can use this class to create and manipulate tables.$/;"	c
toArray	.\thinkphp\library\think\Collection.php	/^    public function toArray()$/;"	f
toArray	.\thinkphp\library\think\Model.php	/^    public function toArray()$/;"	f
toArray	.\thinkphp\library\think\Paginator.php	/^    public function toArray()$/;"	f
toCollection	.\thinkphp\library\think\Model.php	/^    public function toCollection($collection)$/;"	f
toJson	.\thinkphp\library\think\Collection.php	/^    public function toJson($options = JSON_UNESCAPED_UNICODE)$/;"	f
toJson	.\thinkphp\library\think\Model.php	/^    public function toJson($options = JSON_UNESCAPED_UNICODE)$/;"	f
today	.\vendor\topthink\think-helper\src\Time.php	/^    public static function today()$/;"	f
together	.\thinkphp\library\think\Model.php	/^    public function together($relation)$/;"	f
toggleBreakpoint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterInterface.php	/^    public function toggleBreakpoint(MigrationInterface $migration);$/;"	f
toggleBreakpoint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterWrapper.php	/^    public function toggleBreakpoint(MigrationInterface $migration)$/;"	f
toggleBreakpoint	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function toggleBreakpoint(MigrationInterface $migration)$/;"	f
toggleBreakpoint	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^    protected function toggleBreakpoint($version)$/;"	f
token	.\thinkphp\helper.php	/^        $token = Request::instance()->token($name, $type);$/;"	v
token	.\thinkphp\helper.php	/^    function token($name = '__token__', $type = 'md5')$/;"	f
token	.\thinkphp\library\think\Request.php	/^        $token = call_user_func($type, $_SERVER['REQUEST_TIME_FLOAT']);$/;"	v
token	.\thinkphp\library\think\Request.php	/^    public function token($name = '__token__', $type = 'md5')$/;"	f
token	.\thinkphp\library\think\Validate.php	/^    protected function token($value, $rule, $data)$/;"	f
token	.\thinkphp\library\think\console\Input.php	/^            $token = array_shift($tokens);$/;"	v
token	.\thinkphp\library\think\console\Input.php	/^        while (null !== $token = array_shift($this->parsed)) {$/;"	v
tokens	.\thinkphp\library\think\console\Input.php	/^        $this->tokens = $argv;$/;"	v
tokens	.\thinkphp\library\think\console\Input.php	/^        $this->tokens = $tokens;$/;"	v
tokens	.\thinkphp\library\think\console\Input.php	/^        $tokens = $this->tokens;$/;"	v
tokens	.\thinkphp\library\think\console\Input.php	/^        $tokens = array_map(function ($token) {$/;"	v
tokens	.\thinkphp\library\think\console\Input.php	/^    private $tokens;$/;"	v
topthink	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^        $this->topthink      = $topthink;$/;"	v
topthink	.\vendor\topthink\think-queue\src\queue\job\Topthink.php	/^    protected $topthink;$/;"	v
total	.\thinkphp\library\think\Paginator.php	/^            $this->total       = $total;$/;"	v
total	.\thinkphp\library\think\Paginator.php	/^    protected $total;$/;"	v
total	.\thinkphp\library\think\Paginator.php	/^    public function total()$/;"	f
total	.\thinkphp\library\think\db\Query.php	/^            $total   = $this->count();$/;"	v
total	.\thinkphp\library\think\db\Query.php	/^            $total   = null;$/;"	v
total	.\thinkphp\library\think\db\Query.php	/^            $total  = $simple;$/;"	v
total	.\vendor\topthink\think-mongo\src\Query.php	/^            $total   = $this->count();$/;"	v
total	.\vendor\topthink\think-mongo\src\Query.php	/^            $total   = null;$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, $nameLength);$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, strlen($argument->getName()));$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth   = isset($options['total_width']) ? $options['total_width'] : strlen($argument->getName());$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = 0;$/;"	v
totalWidth	.\thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = isset($options['total_width']) ? $options['total_width'] : $this->calculateTotalWidthForOptions([$option]);$/;"	v
tpl	.\thinkphp\library\think\template\TagLib.php	/^        $this->tpl = $template;$/;"	v
tpl	.\thinkphp\library\think\template\TagLib.php	/^    protected $tpl;$/;"	v
trace	.\thinkphp\helper.php	/^    function trace($log = '[think]', $level = 'log')$/;"	f
trace	.\thinkphp\library\think\Debug.php	/^        $trace = new $class($config);$/;"	v
trace	.\thinkphp\library\think\Model.php	/^            $trace = debug_backtrace(false, 2);$/;"	v
trace	.\thinkphp\library\think\Model.php	/^        $trace      = debug_backtrace(false, 2);$/;"	v
trace	.\thinkphp\library\think\Model.php	/^        $trace    = debug_backtrace(false, 2);$/;"	v
trace	.\thinkphp\library\think\console\output\driver\Console.php	/^                $trace = $e->getTrace();$/;"	v
trace	.\thinkphp\library\think\debug\Console.php	/^        $trace = [];$/;"	v
trace	.\thinkphp\library\think\debug\Html.php	/^        $trace = [];$/;"	v
trace	.\thinkphp\library\think\log\driver\Socket.php	/^        $trace = [];$/;"	v
traceReflector	.\thinkphp\library\think\exception\ThrowableError.php	/^        $traceReflector = new \\ReflectionProperty('Exception', 'trace');$/;"	v
trace_tabs	.\thinkphp\library\think\debug\Console.php	/^        $trace_tabs = array_values($this->config['trace_tabs']);$/;"	v
trait_uses_recursive	.\vendor\topthink\think-helper\src\helper.php	/^    function trait_uses_recursive($trait)$/;"	f
traits	.\vendor\topthink\think-helper\src\helper.php	/^        $traits = class_uses($trait);$/;"	v
transTimes	.\thinkphp\library\think\db\Connection.php	/^        $this->transTimes = max(0, $this->transTimes - 1);$/;"	v
transTimes	.\thinkphp\library\think\db\Connection.php	/^    protected $transTimes = 0;$/;"	v
transaction	.\thinkphp\library\think\db\Connection.php	/^    public function transaction($callback)$/;"	f
transaction	.\thinkphp\library\think\db\Query.php	/^    public function transaction($callback)$/;"	f
transaction	.\vendor\topthink\think-queue\src\queue\connector\Redis.php	/^    protected function transaction(\\Closure $closure)$/;"	f
trashed	.\thinkphp\library\traits\model\SoftDelete.php	/^    public function trashed()$/;"	f
trigger	.\thinkphp\library\think\Model.php	/^    protected function trigger($event, &$params)$/;"	f
trigger	.\thinkphp\library\think\db\Connection.php	/^    protected function trigger($sql, $runtime, $explain = [], $master = false)$/;"	f
trigger	.\thinkphp\library\think\db\Query.php	/^    protected function trigger($event, $params = [])$/;"	f
trigger	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function trigger($sql, $runtime, $options = [])$/;"	f
trigger	.\vendor\topthink\think-mongo\src\Query.php	/^    protected function trigger($event, $params = [])$/;"	f
trueAnswerRegex	.\thinkphp\library\think\console\output\question\Confirmation.php	/^        $this->trueAnswerRegex = $trueAnswerRegex;$/;"	v
trueAnswerRegex	.\thinkphp\library\think\console\output\question\Confirmation.php	/^    private $trueAnswerRegex;$/;"	v
ttfPath	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $ttfPath = __DIR__ . '\/..\/assets\/' . ($this->useZh ? 'zhttfs' : 'ttfs') . '\/';$/;"	v
ttfs	.\vendor\topthink\think-captcha\src\Captcha.php	/^            $ttfs = [];$/;"	v
ttl	.\thinkphp\library\think\cache\driver\Memcache.php	/^    public function rm($name, $ttl = false)$/;"	v
ttl	.\thinkphp\library\think\cache\driver\Memcached.php	/^    public function rm($name, $ttl = false)$/;"	v
tty	.\thinkphp\library\think\Process.php	/^        $this->tty = (bool) $tty;$/;"	v
tty	.\thinkphp\library\think\Process.php	/^    private $tty;$/;"	v
ttyMode	.\thinkphp\library\think\process\pipes\Unix.php	/^        $this->ttyMode       = (bool) $ttyMode;$/;"	v
ttyMode	.\thinkphp\library\think\process\pipes\Unix.php	/^    private $ttyMode;$/;"	v
type	.\thinkphp\helper.php	/^    function token($name = '__token__', $type = 'md5')$/;"	v
type	.\thinkphp\library\think\App.php	/^            $type = $request->isAjax() ?$/;"	v
type	.\thinkphp\library\think\App.php	/^            $type = key($vars) === 0 ? 1 : 0;$/;"	v
type	.\thinkphp\library\think\App.php	/^        self::$dispatch = ['type' => $type, $type => $dispatch];$/;"	v
type	.\thinkphp\library\think\App.php	/^    public static function dispatch($dispatch, $type = 'module')$/;"	v
type	.\thinkphp\library\think\Cache.php	/^        $type = !empty($options['type']) ? $options['type'] : 'File';$/;"	v
type	.\thinkphp\library\think\Config.php	/^            $type = pathinfo($file, PATHINFO_EXTENSION);$/;"	v
type	.\thinkphp\library\think\Config.php	/^        if (empty($type)) $type = pathinfo($config, PATHINFO_EXTENSION);$/;"	v
type	.\thinkphp\library\think\Config.php	/^    public static function parse($config, $type = '', $name = '', $range = '')$/;"	v
type	.\thinkphp\library\think\Cookie.php	/^    protected static function jsonFormatProtect(&$val, $key, $type = 'encode')$/;"	v
type	.\thinkphp\library\think\Debug.php	/^        $type   = isset($config['type']) ? $config['type'] : 'Html';$/;"	v
type	.\thinkphp\library\think\Loader.php	/^    public static function parseName($name, $type = 0, $ucfirst = true)$/;"	v
type	.\thinkphp\library\think\Log.php	/^        $type  = isset($config['type']) ? $config['type'] : 'File';$/;"	v
type	.\thinkphp\library\think\Log.php	/^    protected static $type = ['log', 'error', 'info', 'sql', 'notice', 'alert', 'debug'];$/;"	v
type	.\thinkphp\library\think\Log.php	/^    public static function record($msg, $type = 'log')$/;"	v
type	.\thinkphp\library\think\Log.php	/^    public static function write($msg, $type = 'log', $force = false)$/;"	v
type	.\thinkphp\library\think\Model.php	/^            $type = $this->type[$name];$/;"	v
type	.\thinkphp\library\think\Model.php	/^        $type = $type ?: get_class($this);$/;"	v
type	.\thinkphp\library\think\Model.php	/^    protected $type = [];$/;"	v
type	.\thinkphp\library\think\Process.php	/^        foreach ($result as $type => $data) {$/;"	v
type	.\thinkphp\library\think\Request.php	/^                $type = $contentType;$/;"	v
type	.\thinkphp\library\think\Request.php	/^                $type = 's';$/;"	v
type	.\thinkphp\library\think\Request.php	/^        $type      = $type ? 1 : 0;$/;"	v
type	.\thinkphp\library\think\Request.php	/^        $type  = is_callable($type) ? $type : 'md5';$/;"	v
type	.\thinkphp\library\think\Request.php	/^    public function except($name, $type = 'param')$/;"	v
type	.\thinkphp\library\think\Request.php	/^    public function has($name, $type = 'param', $checkEmpty = false)$/;"	v
type	.\thinkphp\library\think\Request.php	/^    public function only($name, $type = 'param')$/;"	v
type	.\thinkphp\library\think\Request.php	/^    public function token($name = '__token__', $type = 'md5')$/;"	v
type	.\thinkphp\library\think\Request.php	/^    public function type()$/;"	f
type	.\thinkphp\library\think\Response.php	/^    public static function create($data = '', $type = '', $code = 200, array $header = [], $options = [])$/;"	v
type	.\thinkphp\library\think\Route.php	/^            $type             = '*';$/;"	v
type	.\thinkphp\library\think\Route.php	/^            $type = self::$bind['type'];$/;"	v
type	.\thinkphp\library\think\Route.php	/^        $type = strtolower($type);$/;"	v
type	.\thinkphp\library\think\Route.php	/^        foreach (self::$methodPrefix as $type => $val) {$/;"	v
type	.\thinkphp\library\think\Route.php	/^        self::$bind = ['type' => $type, $type => $bind];$/;"	v
type	.\thinkphp\library\think\Route.php	/^    protected static function registerRules($rules, $type = '*')$/;"	v
type	.\thinkphp\library\think\Route.php	/^    protected static function setRule($rule, $route, $type = '*', $option = [], $pattern = [], $group = '')$/;"	v
type	.\thinkphp\library\think\Route.php	/^    public static function bind($bind, $type = 'module')$/;"	v
type	.\thinkphp\library\think\Route.php	/^    public static function import(array $rule, $type = '*')$/;"	v
type	.\thinkphp\library\think\Template.php	/^        $type          = $this->config['compile_type'] ? $this->config['compile_type'] : 'File';$/;"	v
type	.\thinkphp\library\think\Template.php	/^        $type  = strtoupper(trim(array_shift($vars)));$/;"	v
type	.\thinkphp\library\think\Url.php	/^            $type = Config::get('url_common_param');$/;"	v
type	.\thinkphp\library\think\Url.php	/^            $type = Route::getBind('type');$/;"	v
type	.\thinkphp\library\think\Validate.php	/^                $type = $this->alias[$type];$/;"	v
type	.\thinkphp\library\think\Validate.php	/^            $type = $rule;$/;"	v
type	.\thinkphp\library\think\Validate.php	/^            $type = 'is';$/;"	v
type	.\thinkphp\library\think\Validate.php	/^    protected static $type = [];$/;"	v
type	.\thinkphp\library\think\View.php	/^            $type    = $options;$/;"	v
type	.\thinkphp\library\think\View.php	/^            $type = !empty($options['type']) ? $options['type'] : 'Think';$/;"	v
type	.\thinkphp\library\think\console\Output.php	/^    public function writeln($messages, $type = self::OUTPUT_NORMAL)$/;"	v
type	.\thinkphp\library\think\console\command\Make.php	/^    protected $type;$/;"	v
type	.\thinkphp\library\think\console\command\make\Controller.php	/^    protected $type = "Controller";$/;"	v
type	.\thinkphp\library\think\console\command\make\Model.php	/^    protected $type = "Model";$/;"	v
type	.\thinkphp\library\think\console\output\driver\Console.php	/^                    $type     = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';$/;"	v
type	.\thinkphp\library\think\controller\Rest.php	/^            $this->type = $ext;$/;"	v
type	.\thinkphp\library\think\controller\Rest.php	/^            $this->type = $request->type();$/;"	v
type	.\thinkphp\library\think\controller\Rest.php	/^            $this->type = $this->restDefaultType;$/;"	v
type	.\thinkphp\library\think\controller\Rest.php	/^    protected $type; \/\/ 当前资源类型$/;"	v
type	.\thinkphp\library\think\controller\Rest.php	/^    protected function response($data, $type = 'json', $code = 200)$/;"	v
type	.\thinkphp\library\think\db\Builder.php	/^        $type = $this->query->getTableInfo($table, 'type');$/;"	v
type	.\thinkphp\library\think\db\Builder.php	/^        $type = $union['type'];$/;"	v
type	.\thinkphp\library\think\db\Connection.php	/^            $type  = is_array($val) ? $val[1] : PDO::PARAM_STR;$/;"	v
type	.\thinkphp\library\think\db\Query.php	/^            $type  = $rule['type'];$/;"	v
type	.\thinkphp\library\think\debug\Console.php	/^        $type       = strtolower($type);$/;"	v
type	.\thinkphp\library\think\debug\Console.php	/^        foreach ($trace as $type => $msg) {$/;"	v
type	.\thinkphp\library\think\log\driver\File.php	/^        foreach ($log as $type => $val) {$/;"	v
type	.\thinkphp\library\think\log\driver\Socket.php	/^        foreach ($log as $type => $val) {$/;"	v
type	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $this->type      = $type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphMany.php	/^        $type      = $this->type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphMany.php	/^    protected $type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $this->type      = $type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphOne.php	/^        $type      = $this->type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphOne.php	/^    protected $type;$/;"	v
type	.\thinkphp\library\think\model\relation\MorphTo.php	/^    public function associate($model, $type = '')$/;"	v
type	.\thinkphp\library\think\process\pipes\Unix.php	/^            $type = (false !== $found = array_search($pipe, $this->pipes)) ? $found : 'input';$/;"	v
type	.\thinkphp\library\think\process\pipes\Windows.php	/^        foreach ($fh as $type => $fileHandle) {$/;"	v
type	.\thinkphp\library\think\template\TagLib.php	/^                            $type          = !empty($array[1]) ? $array[1] : 'type';$/;"	v
type	.\thinkphp\library\think\template\TagLib.php	/^                    $type          = !empty($tag['alias'][1]) ? $tag['alias'][1] : 'type';$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^                $type = 'eq';$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^                $type = 'neq';$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^            $type = strtolower(substr(strrchr($val, '.'), 1));$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^        $type     = $this->parseCondition(' ' . $type . ' ');$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^        $type     = isset($tag['type']) ? strtolower($tag['type']) : '';$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^        $type  = isset($tag['type']) ? $tag['type'] : 'eq'; \/\/ 比较类型$/;"	v
type	.\thinkphp\library\think\template\taglib\Cx.php	/^        $type  = isset($tag['type']) ? $tag['type'] : 'in'; \/\/ 比较类型$/;"	v
type	.\thinkphp\library\traits\controller\Jump.php	/^        $type     = $type ?: $this->getResponseType();$/;"	v
type	.\thinkphp\library\traits\controller\Jump.php	/^        $type = $this->getResponseType();$/;"	v
type	.\vendor\topthink\think-helper\src\Hash.php	/^                $type = 'bcrypt';$/;"	v
type	.\vendor\topthink\think-helper\src\Hash.php	/^                $type = 'md5';$/;"	v
type	.\vendor\topthink\think-helper\src\Hash.php	/^    public static function check($value, $hashedValue, $type = null, array $options = [])$/;"	v
type	.\vendor\topthink\think-helper\src\Hash.php	/^    public static function make($value, $type = null, array $options = [])$/;"	v
type	.\vendor\topthink\think-image\src\Image.php	/^            $type = $this->info['type'];$/;"	v
type	.\vendor\topthink\think-image\src\Image.php	/^            $type = strtolower($type);$/;"	v
type	.\vendor\topthink\think-image\src\Image.php	/^    public function save($pathname, $type = null, $quality = 80, $interlace = true)$/;"	v
type	.\vendor\topthink\think-image\src\Image.php	/^    public function thumb($width, $height, $type = self::THUMB_SCALING)$/;"	v
type	.\vendor\topthink\think-image\src\Image.php	/^    public function type()$/;"	f
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                        $type = static::PHINX_TYPE_UUID;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type  = static::PHINX_TYPE_BINARY;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type  = static::PHINX_TYPE_INTEGER;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type  = static::PHINX_TYPE_TEXT;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type = static::PHINX_TYPE_BIG_INTEGER;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type = static::PHINX_TYPE_BINARY;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type = static::PHINX_TYPE_CHAR;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type = static::PHINX_TYPE_INTEGER;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                    $type = static::PHINX_TYPE_STRING;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^                $type = static::PHINX_TYPE_BOOLEAN;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\MysqlAdapter.php	/^            $type = $matches[1];$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                        $type = static::PHINX_TYPE_UUID;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_BIG_INTEGER;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_BINARY;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_BOOLEAN;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_CHAR;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_INTEGER;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^                    $type = static::PHINX_TYPE_STRING;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $type = $matches[1];$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $type = strtolower($columnInfo['type']);$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addColumn($columnName, $type = null, $options = array())$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->type = $type;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $type;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        $this->type = $type;$/;"	v
type	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^    protected $type = self::INDEX;$/;"	v
type	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addColumn($columnName, $type = null, $options = [])$/;"	v
type	.\vendor\topthink\think-mongo\src\Builder.php	/^        $type = $this->query->getTableInfo('', 'type');$/;"	v
type	.\vendor\topthink\think-mongo\src\Query.php	/^            $type   = [];$/;"	v
type	.\vendor\topthink\think-queue\src\Queue.php	/^        $type    = !empty($options['connector']) ? $options['connector'] : 'Sync';$/;"	v
typeCast	.\thinkphp\library\think\Request.php	/^    private function typeCast(&$data, $type)$/;"	f
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^            $this->typeMap = $config['type_map'];$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^            $typeMap = $this->typeMap;$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^        $this->typeMap = $this->config['type_map'];$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^        $typeMap = is_string($typeMap) ? ['root' => $typeMap] : $typeMap;$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected $typeMap = 'array';$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Connection.php	/^    protected function getResult($class = '', $typeMap = null)$/;"	v
typeMap	.\vendor\topthink\think-mongo\src\Query.php	/^    public function typeMap($typeMap)$/;"	f
typeMsg	.\thinkphp\library\think\Validate.php	/^    protected static $typeMsg = [$/;"	v
types	.\thinkphp\library\think\db\Query.php	/^        $types = $this->getFieldsType($table);$/;"	v
uid	.\thinkphp\library\think\Loader.php	/^        $uid = $name . $layer;$/;"	v
unblock	.\thinkphp\library\think\process\pipes\Pipes.php	/^    protected function unblock()$/;"	f
under	.\vendor\composer\ClassLoader.php	/^ * the autoloader will first look for the class under the component\/$/;"	c
union	.\thinkphp\library\think\db\Query.php	/^    public function union($union, $all = false)$/;"	f
unique	.\thinkphp\library\think\Validate.php	/^    protected function unique($value, $rule, $data, $field)$/;"	f
unique	.\vendor\topthink\think-migration\src\db\Column.php	/^        $this->unique = true;$/;"	v
unique	.\vendor\topthink\think-migration\src\db\Column.php	/^    protected $unique = false;$/;"	v
unlink	.\thinkphp\library\think\cache\driver\File.php	/^    private function unlink($path)$/;"	f
unregister	.\vendor\composer\ClassLoader.php	/^    public function unregister()$/;"	f
unsetCodes	.\thinkphp\library\think\console\output\formatter\Style.php	/^        $unsetCodes = [];$/;"	v
unsetOption	.\thinkphp\library\think\console\output\formatter\Style.php	/^    public function unsetOption($option)$/;"	f
unshift	.\thinkphp\library\think\Collection.php	/^    public function unshift($value, $key = null)$/;"	f
unsignedInteger	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function unsignedInteger($name)$/;"	f
up	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $up      = '..' !== $chunk;$/;"	v
up	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^                $up = !(empty($parts) || '..' === end($parts));$/;"	v
up	.\thinkphp\library\think\console\command\optimize\Autoload.php	/^        $up = false;$/;"	v
up	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    public function up()$/;"	f
up	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\MigrationInterface.php	/^    public function up();$/;"	f
update	.\thinkphp\library\think\Model.php	/^    protected $update = [];$/;"	v
update	.\thinkphp\library\think\Model.php	/^    public static function update($data = [], $where = [], $field = null)$/;"	f
update	.\thinkphp\library\think\db\Builder.php	/^    public function update($data, $options)$/;"	f
update	.\thinkphp\library\think\db\Query.php	/^    public function update(array $data = [])$/;"	f
update	.\vendor\topthink\think-installer\src\ThinkExtend.php	/^    public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)$/;"	f
update	.\vendor\topthink\think-installer\src\ThinkFramework.php	/^    public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)$/;"	f
update	.\vendor\topthink\think-installer\src\ThinkTesting.php	/^    public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)$/;"	f
update	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function update()$/;"	f
update	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->update = $update;$/;"	v
update	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $update;$/;"	v
update	.\vendor\topthink\think-mongo\src\Builder.php	/^    public function update($data, $options = [])$/;"	f
update	.\vendor\topthink\think-mongo\src\Query.php	/^    public function update(array $data)$/;"	f
updateOptions	.\vendor\topthink\think-mongo\src\Builder.php	/^            $updateOptions = ['multi' => false];$/;"	v
updateOptions	.\vendor\topthink\think-mongo\src\Builder.php	/^            $updateOptions = ['multi' => true];$/;"	v
updateSql	.\thinkphp\library\think\db\Builder.php	/^    protected $updateSql    = 'UPDATE %TABLE% SET %SET% %JOIN% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
updateSql	.\thinkphp\library\think\db\builder\Mysql.php	/^    protected $updateSql    = 'UPDATE %TABLE% %JOIN% SET %SET% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
updateSql	.\thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $updateSql       = 'UPDATE %TABLE% SET %SET% FROM %TABLE% %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
updateStatus	.\thinkphp\library\think\Process.php	/^    protected function updateStatus($blocking)$/;"	f
updateTime	.\thinkphp\library\think\Model.php	/^    protected $updateTime = 'update_time';$/;"	v
updateWhere	.\thinkphp\library\think\Model.php	/^                $this->updateWhere = $where;$/;"	v
updateWhere	.\thinkphp\library\think\Model.php	/^            $this->updateWhere = $where;$/;"	v
updateWhere	.\thinkphp\library\think\Model.php	/^    protected $updateWhere;$/;"	v
updatedAtColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^        $updatedAtColumnName = is_null($updatedAtColumnName) ? 'updated_at' : $updatedAtColumnName;$/;"	v
updatedAtColumnName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table.php	/^    public function addTimestamps($createdAtColumnName = 'created_at', $updatedAtColumnName = 'updated_at')$/;"	v
updatedAtColumnName	.\vendor\topthink\think-migration\src\db\Table.php	/^    public function addTimestamps($createdAtColumnName = 'create_time', $updatedAtColumnName = 'update_time')$/;"	v
upper	.\vendor\topthink\think-helper\src\Str.php	/^    public static function upper($value)$/;"	f
uri	.\thinkphp\library\think\debug\Console.php	/^            $uri = $_SERVER['SERVER_PROTOCOL'] . ' ' . $_SERVER['REQUEST_METHOD'] . ' : ' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
uri	.\thinkphp\library\think\debug\Console.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
uri	.\thinkphp\library\think\debug\Html.php	/^            $uri = $_SERVER['SERVER_PROTOCOL'] . ' ' . $_SERVER['REQUEST_METHOD'] . ' : ' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
uri	.\thinkphp\library\think\debug\Html.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
uri	.\thinkphp\library\think\log\driver\File.php	/^            $uri     = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';$/;"	v
url	.\thinkphp\helper.php	/^    function url($url = '', $vars = '', $suffix = true, $domain = false)$/;"	f
url	.\thinkphp\library\think\Paginator.php	/^        $url = $path;$/;"	v
url	.\thinkphp\library\think\Paginator.php	/^    protected function url($page)$/;"	f
url	.\thinkphp\library\think\Request.php	/^                    $url = $_SERVER['ORIG_SCRIPT_NAME'];$/;"	v
url	.\thinkphp\library\think\Request.php	/^                    $url = $_SERVER['PHP_SELF'];$/;"	v
url	.\thinkphp\library\think\Request.php	/^                    $url = $_SERVER['SCRIPT_NAME'];$/;"	v
url	.\thinkphp\library\think\Request.php	/^                    $url = str_replace('\\\\', '\/', str_replace($_SERVER['DOCUMENT_ROOT'], '', $_SERVER['SCRIPT_FILENAME']));$/;"	v
url	.\thinkphp\library\think\Request.php	/^                    $url = substr($_SERVER['SCRIPT_NAME'], 0, $pos) . '\/' . $script_name;$/;"	v
url	.\thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['HTTP_X_REWRITE_URL'];$/;"	v
url	.\thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['ORIG_PATH_INFO'] . (!empty($_SERVER['QUERY_STRING']) ? '?' . $_SERVER['QUERY_STRING'] : '');$/;"	v
url	.\thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['REQUEST_URI'];$/;"	v
url	.\thinkphp\library\think\Request.php	/^                $this->url = '';$/;"	v
url	.\thinkphp\library\think\Request.php	/^                $this->url = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';$/;"	v
url	.\thinkphp\library\think\Request.php	/^            $this->url = $url;$/;"	v
url	.\thinkphp\library\think\Request.php	/^            $url = '';$/;"	v
url	.\thinkphp\library\think\Request.php	/^    protected $url;$/;"	v
url	.\thinkphp\library\think\Request.php	/^    public function url($url = null)$/;"	f
url	.\thinkphp\library\think\Route.php	/^                $url = preg_replace('\/\\.' . $request->ext() . '$\/i', '', $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^            $url = $bind . ('.' != substr($bind, -1) ? $depr : '') . ltrim($url, $depr);$/;"	v
url	.\thinkphp\library\think\Route.php	/^            $url = implode('|', explode($depr, $url, $len2 + 1));$/;"	v
url	.\thinkphp\library\think\Route.php	/^            $url = rtrim($url, '|');$/;"	v
url	.\thinkphp\library\think\Route.php	/^            $url = str_replace('|', $depr, $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^            $url = str_replace(['|', $option['param_depr']], [$depr, '|'], $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^        $url              = str_replace($depr, '|', $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^        $url    = str_replace($depr, '|', $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^        $url = str_replace($depr, '|', $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^        $url = str_replace('|', '\/', $url);$/;"	v
url	.\thinkphp\library\think\Route.php	/^        $url = trim($url, '\/');$/;"	v
url	.\thinkphp\library\think\Url.php	/^                                $url    = ltrim($url, $rule);$/;"	v
url	.\thinkphp\library\think\Url.php	/^                        $url        = $key . substr($url, strlen($val));$/;"	v
url	.\thinkphp\library\think\Url.php	/^                    $url             = substr($url, $pos[$domain]);$/;"	v
url	.\thinkphp\library\think\Url.php	/^                    $url    = str_replace(['\/[:' . $key . ']', '[:' . $key . ']', '<' . $key . '?>'], '', $url);$/;"	v
url	.\thinkphp\library\think\Url.php	/^                    $url = str_replace(['[:' . $key . ']', '<' . $key . '?>', ':' . $key . '', '<' . $key . '>'], $type ? $vars[$key] : urlencode($vars[$key]), $url);$/;"	v
url	.\thinkphp\library\think\Url.php	/^                    $url = substr($url, strlen($bind) + 1);$/;"	v
url	.\thinkphp\library\think\Url.php	/^                $url = self::parseUrl($url, $domain);$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url  = !empty($info['path']) ? $info['path'] : '';$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url  = 'name' . substr($url, $pos + 1);$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url = $match[0];$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url = $module . $controller . '\/' . $action;$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url = ltrim(str_replace('\\\\', '\/', $url), '\/');$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url = preg_replace(['\/(\\W)\\?$\/', '\/(\\W)\\?\/'], ['', '\\1'], $url);$/;"	v
url	.\thinkphp\library\think\Url.php	/^            $url = substr($url, 1);$/;"	v
url	.\thinkphp\library\think\Url.php	/^        $url  = str_replace('\/', $depr, $url);$/;"	v
url	.\thinkphp\library\think\Url.php	/^        $url = $domain . rtrim(self::$root ?: Request::instance()->root(), '\/') . '\/' . ltrim($url, '\/');$/;"	v
url	.\thinkphp\library\think\log\driver\Socket.php	/^        $url = 'http:\/\/' . $host . ':' . $this->port . $address;$/;"	v
url	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $url = $this->url($/;"	v
url	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $url = $this->url($this->currentPage() + 1);$/;"	v
url	.\thinkphp\library\think\template\taglib\Cx.php	/^        $url    = isset($tag['link']) ? $tag['link'] : '';$/;"	v
url	.\thinkphp\library\traits\controller\Jump.php	/^            $url = Request::instance()->isAjax() ? '' : 'javascript:history.back(-1);';$/;"	v
url	.\thinkphp\library\traits\controller\Jump.php	/^            $url = Request::instance()->server('HTTP_REFERER');$/;"	v
url	.\thinkphp\library\traits\controller\Jump.php	/^            $url = Url::build($url);$/;"	v
url	.\thinkphp\library\traits\controller\Jump.php	/^    protected function error($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	v
url	.\thinkphp\library\traits\controller\Jump.php	/^    protected function success($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	v
url	.\vendor\topthink\think-mongo\src\Connection.php	/^            $url = $url . $hostList[$i] . ':' . $portList[0] . ',';$/;"	v
url	.\vendor\topthink\think-mongo\src\Connection.php	/^        $url      = 'mongodb:\/\/' . ($this->config['username'] ? "{$this->config['username']}" : '') . ($this->config['password'] ? ":{$this->config['password']}@" : '');$/;"	v
url	.\vendor\topthink\think-queue\src\queue\command\Subscribe.php	/^            $url = Url::build($url);$/;"	v
url	.\vendor\topthink\think-queue\src\queue\command\Subscribe.php	/^        $url = $input->getArgument('url');$/;"	v
url	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $this->url = "{$this->options['protocol']}:\/\/{$this->options['host']}:{$this->options['port']}\/v{$this->options['api_version']}\/";$/;"	v
url	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $url        = "project\/{$this->options['project_id']}\/queue\/{$queue}\/message";$/;"	v
url	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $url   = "project\/{$this->options['project_id']}\/queue\/{$queue}\/message\/{$id}";$/;"	v
url	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^        $url = "{$this->url}$url";$/;"	v
url	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected $url;$/;"	v
urls	.\thinkphp\library\think\Paginator.php	/^        $urls = [];$/;"	v
urlsafeB64Decode	.\extend\php-jwt-master\src\JWT.php	/^    public static function urlsafeB64Decode($input)$/;"	f
urlsafeB64Decode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function urlsafeB64Decode($input)$/;"	f
urlsafeB64Encode	.\extend\php-jwt-master\src\JWT.php	/^    public static function urlsafeB64Encode($input)$/;"	f
urlsafeB64Encode	.\vendor\firebase\php-jwt\src\JWT.php	/^    public static function urlsafeB64Encode($input)$/;"	f
usage	.\thinkphp\library\think\console\Command.php	/^            $usage = sprintf('%s %s', $this->name, $usage);$/;"	v
usages	.\thinkphp\library\think\console\Command.php	/^    private $usages   = [];$/;"	v
use	.\thinkphp\library\think\template\taglib\Cx.php	/^        $use  = ['&$' . $name];$/;"	v
useFileHandles	.\thinkphp\library\think\Process.php	/^        $this->useFileHandles               = '\\\\' === DS;$/;"	v
useFileHandles	.\thinkphp\library\think\Process.php	/^    private $useFileHandles = false;$/;"	v
useGlobalScope	.\thinkphp\library\think\Model.php	/^    protected $useGlobalScope = true;$/;"	v
useGlobalScope	.\thinkphp\library\think\Model.php	/^    public static function useGlobalScope($use)$/;"	f
useIncludePath	.\vendor\composer\ClassLoader.php	/^        $this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	.\vendor\composer\ClassLoader.php	/^    private $useIncludePath = false;$/;"	v
useSoftDelete	.\thinkphp\library\think\db\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	f
useSoftDelete	.\vendor\topthink\think-mongo\src\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	f
useStaticLoader	.\vendor\composer\autoload_real.php	/^        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());$/;"	v
user	.\thinkphp\library\think\Console.php	/^        $user = posix_getpwnam($user);$/;"	v
using	.\thinkphp\library\think\db\Query.php	/^    public function using($using)$/;"	f
utf8String	.\thinkphp\library\think\console\output\driver\Console.php	/^        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);$/;"	v
uuid	.\vendor\topthink\think-migration\src\db\Column.php	/^    public static function uuid($name)$/;"	f
v	.\thinkphp\library\think\Controller.php	/^            $v = Loader::validate($validate);$/;"	v
v	.\thinkphp\library\think\Controller.php	/^            $v = Loader::validate();$/;"	v
v	.\thinkphp\library\think\Lang.php	/^                    $v = "{:{$v}}";$/;"	v
v	.\thinkphp\library\think\Template.php	/^                            $v = $this->get(substr($v, 1));$/;"	v
v	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^                $v = 'Close';$/;"	v
val	.\thinkphp\library\think\Build.php	/^                    $val      = trim($val);$/;"	v
val	.\thinkphp\library\think\Cookie.php	/^            $val = 'decode' == $type ? urldecode($val) : urlencode($val);$/;"	v
val	.\thinkphp\library\think\Request.php	/^    public function mimeType($type, $val = '')$/;"	v
val	.\thinkphp\library\think\Route.php	/^                $val      = substr($val, 1, -1);$/;"	v
val	.\thinkphp\library\think\Route.php	/^                $val = str_replace($matches[0], $replace, $val);$/;"	v
val	.\thinkphp\library\think\Url.php	/^                        $val = $val[0];$/;"	v
val	.\thinkphp\library\think\Validate.php	/^        $val = $this->getDataValue($data, $rule);$/;"	v
val	.\thinkphp\library\think\db\Builder.php	/^                $val = $val->__toString();$/;"	v
val	.\thinkphp\library\think\db\Builder.php	/^            $val = is_null($val) ? ['null', ''] : ['=', $val];$/;"	v
val	.\thinkphp\library\think\db\Query.php	/^                    $val = $prefix . '.' . $val . ($alias ? ' AS ' . $alias . $val : '');$/;"	v
val	.\thinkphp\library\think\db\connector\Mysql.php	/^                $val                 = array_change_key_case($val);$/;"	v
val	.\thinkphp\library\think\db\connector\Pgsql.php	/^                $val                 = array_change_key_case($val);$/;"	v
val	.\thinkphp\library\think\db\connector\Sqlite.php	/^                $val                = array_change_key_case($val);$/;"	v
val	.\thinkphp\library\think\db\connector\Sqlsrv.php	/^                $val                       = array_change_key_case($val);$/;"	v
val	.\vendor\topthink\think-mongo\src\Builder.php	/^            $val = ['=', $val];$/;"	v
valid	.\thinkphp\library\think\template\TagLib.php	/^    protected $valid = false;$/;"	v
validOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $validOptions = $this->getValidOptions();$/;"	v
validOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\ForeignKey.php	/^        $validOptions = array('delete', 'update', 'constraint');$/;"	v
validOptions	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Index.php	/^        $validOptions = array('type', 'unique', 'name', 'limit');$/;"	v
validate	.\thinkphp\helper.php	/^    function validate($name = '', $layer = 'validate', $appendSuffix = false)$/;"	f
validate	.\thinkphp\library\think\Controller.php	/^    protected function validate($data, $validate, $message = [], $batch = false, $callback = null)$/;"	f
validate	.\thinkphp\library\think\File.php	/^        $this->validate = $rule;$/;"	v
validate	.\thinkphp\library\think\File.php	/^    protected $validate = [];$/;"	v
validate	.\thinkphp\library\think\File.php	/^    public function validate(array $rule = [])$/;"	f
validate	.\thinkphp\library\think\Loader.php	/^                $validate = new $class;$/;"	v
validate	.\thinkphp\library\think\Loader.php	/^            $validate = new $class;$/;"	v
validate	.\thinkphp\library\think\Loader.php	/^    public static function validate($name = '', $layer = 'validate', $appendSuffix = false, $common = 'common')$/;"	f
validate	.\thinkphp\library\think\Model.php	/^                $validate = Loader::validate($name);$/;"	v
validate	.\thinkphp\library\think\Model.php	/^                $validate = Loader::validate();$/;"	v
validate	.\thinkphp\library\think\Model.php	/^            $this->validate = [$/;"	v
validate	.\thinkphp\library\think\Model.php	/^            $this->validate = null;$/;"	v
validate	.\thinkphp\library\think\Model.php	/^            $this->validate = true === $rule ? $this->name : $rule;$/;"	v
validate	.\thinkphp\library\think\Model.php	/^            $validate = $this->validate;$/;"	v
validate	.\thinkphp\library\think\Model.php	/^    protected $validate;$/;"	v
validate	.\thinkphp\library\think\Model.php	/^    public function validate($rule = true, $msg = [], $batch = false)$/;"	f
validate	.\thinkphp\library\think\console\Input.php	/^    public function validate()$/;"	f
validateAttempts	.\thinkphp\library\think\console\output\Ask.php	/^    protected function validateAttempts($interviewer)$/;"	f
validateData	.\thinkphp\library\think\Model.php	/^    protected function validateData($data, $rule = null, $batch = null)$/;"	f
validateFailException	.\thinkphp\library\think\Controller.php	/^    protected function validateFailException($fail = true)$/;"	f
validateFailException	.\thinkphp\library\think\Model.php	/^    public function validateFailException($fail = true)$/;"	f
validateInput	.\thinkphp\library\think\process\Utils.php	/^    public static function validateInput($caller, $input)$/;"	f
validateName	.\thinkphp\library\think\console\Command.php	/^    private function validateName($name)$/;"	f
validateTimeout	.\thinkphp\library\think\Process.php	/^    private function validateTimeout($timeout)$/;"	f
validator	.\thinkphp\library\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	v
validator	.\thinkphp\library\think\console\output\Question.php	/^        $this->validator = $validator;$/;"	v
validator	.\thinkphp\library\think\console\output\Question.php	/^    private $validator;$/;"	v
value	.\thinkphp\helper.php	/^    function cache($name, $value = '', $options = null, $tag = null)$/;"	v
value	.\thinkphp\helper.php	/^    function config($name = '', $value = null, $range = '')$/;"	v
value	.\thinkphp\helper.php	/^    function cookie($name, $value = '', $option = null)$/;"	v
value	.\thinkphp\helper.php	/^    function session($name, $value = '', $prefix = null)$/;"	v
value	.\thinkphp\library\think\Collection.php	/^                $value    = $row;$/;"	v
value	.\thinkphp\library\think\Collection.php	/^                $value    = $row[$columnKey];$/;"	v
value	.\thinkphp\library\think\Config.php	/^    public static function set($name, $value = null, $range = '')$/;"	v
value	.\thinkphp\library\think\Controller.php	/^    protected function assign($name, $value = '')$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^                $value = $_COOKIE;$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^                $value = [];$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^                $value = json_decode(substr($value, 6), true);$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^            $value = $_COOKIE[$key];$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^            $value = 'think:' . json_encode($value);$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^            $value = null;$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^    public static function forever($name, $value = '', $option = null)$/;"	v
value	.\thinkphp\library\think\Cookie.php	/^    public static function set($name, $value = '', $option = null)$/;"	v
value	.\thinkphp\library\think\Debug.php	/^    public static function remark($name, $value = '')$/;"	v
value	.\thinkphp\library\think\Lang.php	/^                $value = call_user_func_array('sprintf', $vars);$/;"	v
value	.\thinkphp\library\think\Lang.php	/^                $value = str_replace($replace, $vars, $value);$/;"	v
value	.\thinkphp\library\think\Lang.php	/^        $value = isset(self::$lang[$range][$key]) ? self::$lang[$range][$key] : $name;$/;"	v
value	.\thinkphp\library\think\Lang.php	/^    public static function set($name, $value = null, $range = '')$/;"	v
value	.\thinkphp\library\think\Model.php	/^                        $value         = $this->getRelationData($modelRelation);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value  = $this->formatDateTime($value, $format);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value  = $this->formatDateTime(strtotime($value), $format);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value  = $this->formatDateTime(time(), $format);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = (float) $value;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = (float) number_format($value, $param, '.', '');$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = json_encode($value, JSON_FORCE_OBJECT);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = new $type($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = null;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = strtotime($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = time();$/;"	v
value	.\thinkphp\library\think\Model.php	/^                    $value = unserialize($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value  = $this->formatDateTime($value, $format);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value  = is_numeric($value) ? $value : strtotime($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value  = json_encode($value, $option);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $modelRelation->getRelation();$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $this->$method($value, array_merge($this->data, $data), $this->relation);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $this->formatDateTime($value, $this->dateFormat);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $this->formatDateTime(strtotime($value), $this->dateFormat);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $this->getRelationData($modelRelation);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = $this->writeTransform($value, $this->type[$name]);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = (array) $value;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = (bool) $value;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = (int) $value;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = empty($value) ? [] : json_decode($value, true);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = empty($value) ? new \\stdClass() : json_decode($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = json_decode($value, true);$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = null;$/;"	v
value	.\thinkphp\library\think\Model.php	/^                $value = serialize($value);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value    = $this->getData($name);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value    = null;$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->$method($value, $this->data, $this->relation);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->autoWriteTimestamp($name);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->formatDateTime(time(), $this->dateFormat);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->formatDateTime(time(), $this->dateFormat, true);$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->parent;$/;"	v
value	.\thinkphp\library\think\Model.php	/^            $value = $this->readTransform($value, $this->type[$name]);$/;"	v
value	.\thinkphp\library\think\Model.php	/^    public function data($data, $value = null)$/;"	v
value	.\thinkphp\library\think\Paginator.php	/^    public function appends($key, $value = null)$/;"	v
value	.\thinkphp\library\think\Request.php	/^                        $value = $default;$/;"	v
value	.\thinkphp\library\think\Request.php	/^                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));$/;"	v
value	.\thinkphp\library\think\Request.php	/^                $value = call_user_func($filter, $value);$/;"	v
value	.\thinkphp\library\think\Request.php	/^        $value  = $this->server('HTTP_X_REQUESTED_WITH', '', 'strtolower');$/;"	v
value	.\thinkphp\library\think\Response.php	/^    public function header($name, $value = null)$/;"	v
value	.\thinkphp\library\think\Route.php	/^                $value   = [];$/;"	v
value	.\thinkphp\library\think\Route.php	/^    public static function name($name = '', $value = null)$/;"	v
value	.\thinkphp\library\think\Session.php	/^                $value               = isset($_SESSION[$name1][$name2]) ? $_SESSION[$name1][$name2] : null;$/;"	v
value	.\thinkphp\library\think\Session.php	/^                $value               = isset($_SESSION[$prefix][$name1][$name2]) ? $_SESSION[$prefix][$name1][$name2] : null;$/;"	v
value	.\thinkphp\library\think\Session.php	/^                $value = isset($_SESSION[$name]) ? $_SESSION[$name] : null;$/;"	v
value	.\thinkphp\library\think\Session.php	/^                $value = isset($_SESSION[$prefix][$name]) ? $_SESSION[$prefix][$name] : null;$/;"	v
value	.\thinkphp\library\think\Session.php	/^            $value = $prefix ? (!empty($_SESSION[$prefix]) ? $_SESSION[$prefix] : []) : $_SESSION;$/;"	v
value	.\thinkphp\library\think\Session.php	/^    public static function set($name, $value = '', $prefix = null)$/;"	v
value	.\thinkphp\library\think\Template.php	/^    public function assign($name, $value = '')$/;"	v
value	.\thinkphp\library\think\Validate.php	/^            $value               = isset($data[$name1][$name2]) ? $data[$name1][$name2] : null;$/;"	v
value	.\thinkphp\library\think\Validate.php	/^            $value = $key;$/;"	v
value	.\thinkphp\library\think\Validate.php	/^            $value = $this->getDataValue($data, $key);$/;"	v
value	.\thinkphp\library\think\Validate.php	/^            $value = isset($data[$key]) ? $data[$key] : null;$/;"	v
value	.\thinkphp\library\think\Validate.php	/^        return $value == $rule;$/;"	v
value	.\thinkphp\library\think\View.php	/^    public function assign($name, $value = '')$/;"	v
value	.\thinkphp\library\think\View.php	/^    public function config($name, $value = null)$/;"	v
value	.\thinkphp\library\think\View.php	/^    public static function share($name, $value = '')$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                    $value = call_user_func($value);$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                $value   = explode(',', $this->get($key));$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                $value   = implode(',', array_unique($value));$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                $value = $keys;$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                $value = $name;$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^                $value = array_unique(array_merge($this->getTagItem($name), $keys));$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^            $value = $this->get($name);$/;"	v
value	.\thinkphp\library\think\cache\Driver.php	/^        $value = $this->get($key);$/;"	v
value	.\thinkphp\library\think\cache\driver\File.php	/^            $value  = $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\File.php	/^            $value  = $this->get($name) + $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\File.php	/^            $value  = $this->get($name) - $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\File.php	/^            $value  = -$step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Lite.php	/^            $value = $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Lite.php	/^            $value = $this->get($name) + $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Lite.php	/^            $value = $this->get($name) - $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Lite.php	/^            $value = -$step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Memcache.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Memcached.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Redis.php	/^        $value = $this->handler->get($this->getCacheKey($name));$/;"	v
value	.\thinkphp\library\think\cache\driver\Redis.php	/^        $value = is_scalar($value) ? $value : 'think_serialize:' . serialize($value);$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $this->get($name) + $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $this->get($name) - $step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = -$step;$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = gzcompress($value, 3);$/;"	v
value	.\thinkphp\library\think\cache\driver\Sqlite.php	/^        $value = sqlite_escape_string(serialize($value));$/;"	v
value	.\thinkphp\library\think\console\Input.php	/^                $value = $next;$/;"	v
value	.\thinkphp\library\think\console\Input.php	/^                $value = $option->isValueOptional() ? $option->getDefault() : true;$/;"	v
value	.\thinkphp\library\think\console\Input.php	/^                $value = '';$/;"	v
value	.\thinkphp\library\think\console\Input.php	/^            $value = null;$/;"	v
value	.\thinkphp\library\think\console\command\optimize\Route.php	/^            $value = '[__start__' . substr($content, $start, $end - $start + 1) . '__end__]';$/;"	v
value	.\thinkphp\library\think\console\input\Definition.php	/^                    $value = sprintf(' %s%s%s', $option->isValueOptional() ? '[' : '', strtoupper($option->getName()), $option->isValueOptional() ? ']' : '');$/;"	v
value	.\thinkphp\library\think\console\input\Definition.php	/^                $value = '';$/;"	v
value	.\thinkphp\library\think\console\output\Ask.php	/^            $value   = rtrim(shell_exec($command));$/;"	v
value	.\thinkphp\library\think\console\output\Ask.php	/^            $value = fgets($inputStream, 4096);$/;"	v
value	.\thinkphp\library\think\console\output\Ask.php	/^            $value = rtrim(shell_exec($exe));$/;"	v
value	.\thinkphp\library\think\console\output\Ask.php	/^            $value = trim($value);$/;"	v
value	.\thinkphp\library\think\console\output\Descriptor.php	/^                $value = '[' . $value . ']';$/;"	v
value	.\thinkphp\library\think\console\output\Descriptor.php	/^            $value = '=' . strtoupper($option->getName());$/;"	v
value	.\thinkphp\library\think\console\output\Descriptor.php	/^        $value = '';$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = ':' . $bindName;$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = array_unique(is_array($value) ? $value : explode(',', $value));$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = date('Y-m-d H:i:s', $value);$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = date('Y-m-d', $value);$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = explode(',', $value);$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^                $value = strtotime($value) ?: $value;$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value    = array_values($data);$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value = $value ? '1' : '0';$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value = $value->__toString();$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value = 'null';$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value = array_map([$this, 'parseValue'], $value);$/;"	v
value	.\thinkphp\library\think\db\Builder.php	/^            $value = strpos($value, ':') === 0 && $this->query->isBind(substr($value, 1)) ? $value : $this->connection->quote($value);$/;"	v
value	.\thinkphp\library\think\db\Connection.php	/^                $value = $this->quote($value);$/;"	v
value	.\thinkphp\library\think\db\Connection.php	/^                $value = (float) $value;$/;"	v
value	.\thinkphp\library\think\db\Connection.php	/^            $value = is_array($val) ? $val[0] : $val;$/;"	v
value	.\thinkphp\library\think\db\Connection.php	/^    public function setConfig($config, $value = '')$/;"	v
value	.\thinkphp\library\think\db\Expression.php	/^        $this->value = $value;$/;"	v
value	.\thinkphp\library\think\db\Expression.php	/^    protected $value;$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^                        $value = strtotime($value);$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^            $value = $data[$field];$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^            $value = Cache::$type($guid, $step);$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^    public function bind($key, $value = false, $type = PDO::PARAM_STR)$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^    public function data($field, $value = null)$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^    public function setField($field, $value = '')$/;"	v
value	.\thinkphp\library\think\db\Query.php	/^    public function value($field, $default = null, $force = false)$/;"	f
value	.\thinkphp\library\think\db\builder\Mysql.php	/^            $value    = array_values($data);$/;"	v
value	.\thinkphp\library\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	v
value	.\thinkphp\library\think\response\View.php	/^    public function assign($name, $value = '')$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^                $value = $this->autoBuildVar($value);$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value  = '';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = $this->autoBuildVar($tag['value']);$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = $this->autoBuildVar($value);$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = '"' . $value . '"';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = '\\'' . $tag['value'] . '\\'';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = '\\'' . $value . '\\'';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = 'case "' . $value . '":';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = 'case ' . $value . ':';$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^            $value = trim($value);$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^        $value = $tag['value'];$/;"	v
value	.\thinkphp\library\think\template\taglib\Cx.php	/^        $value = isset($tag['expression']) ? $tag['expression'] : $tag['value'];$/;"	v
value	.\thinkphp\library\think\view\driver\Php.php	/^    public function config($name, $value = null)$/;"	v
value	.\thinkphp\library\think\view\driver\Think.php	/^    public function config($name, $value = null)$/;"	v
value	.\vendor\topthink\think-helper\src\Arr.php	/^                $value = static::sortRecursive($value);$/;"	v
value	.\vendor\topthink\think-helper\src\Str.php	/^            $value = preg_replace('\/\\s+\/u', '', $value);$/;"	v
value	.\vendor\topthink\think-helper\src\Str.php	/^            $value = static::lower(preg_replace('\/(.)(?=[A-Z])\/u', '$1' . $delimiter, $value));$/;"	v
value	.\vendor\topthink\think-helper\src\Str.php	/^        $value = ucwords(str_replace(['-', '_'], ' ', $value));$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^                $value = $value[1];$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^                $value = date('Y-m-d H:i:s', $value);$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^                $value = date('Y-m-d', $value);$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^            $value       = is_array($value) ? $value : explode(',', $value);$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^            $value = is_array($value) ? $value : explode(',', $value);$/;"	v
value	.\vendor\topthink\think-mongo\src\Builder.php	/^            $value = strtotime($value) ?: $value;$/;"	v
value	.\vendor\topthink\think-mongo\src\Connection.php	/^                    $value = $value->__toString();$/;"	v
value	.\vendor\topthink\think-mongo\src\Query.php	/^    public function data($field, $value = null)$/;"	v
value	.\vendor\topthink\think-mongo\src\Query.php	/^    public function setField($field, $value = '')$/;"	v
value	.\vendor\topthink\think-mongo\src\Query.php	/^    public function value($field, $default = null)$/;"	f
valueLength	.\thinkphp\library\think\console\output\Descriptor.php	/^                $valueLength = 1 + strlen($option->getName()); \/\/ = + value$/;"	v
valueSet	.\thinkphp\library\think\Collection.php	/^                $valueSet = true;$/;"	v
values	.\thinkphp\library\think\console\Input.php	/^        $values = (array) $values;$/;"	v
values	.\thinkphp\library\think\console\Output.php	/^            $values  = array_flip($choices);$/;"	v
values	.\thinkphp\library\think\console\input\Definition.php	/^        $values = [];$/;"	v
values	.\thinkphp\library\think\console\output\Question.php	/^            $values = array_merge(array_keys($values), array_values($values));$/;"	v
values	.\thinkphp\library\think\db\Builder.php	/^        $values = array_values($data);$/;"	v
values	.\thinkphp\library\think\template\taglib\Cx.php	/^            $values = explode('|', $value);$/;"	v
values	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^            $values = preg_split('\/,\\s*\/', $values);$/;"	v
values	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^        $this->values = $values;$/;"	v
values	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Table\Column.php	/^    protected $values;$/;"	v
var	.\thinkphp\library\think\Route.php	/^                    $var           = substr($item, 1);$/;"	v
var	.\thinkphp\library\think\Route.php	/^                    $var    = trim($rule, '__');$/;"	v
var	.\thinkphp\library\think\Route.php	/^        $var = [];$/;"	v
var	.\thinkphp\library\think\Url.php	/^                foreach ($vars as $var => $val) {$/;"	v
var	.\thinkphp\library\think\View.php	/^    protected static $var = [];$/;"	v
var	.\thinkphp\library\think\template\taglib\Cx.php	/^                $var = '$_' . uniqid();$/;"	v
var	.\thinkphp\library\think\template\taglib\Cx.php	/^            $var  = '$_' . uniqid();$/;"	v
var	.\thinkphp\library\think\template\taglib\Cx.php	/^            $var = &$name;$/;"	v
varArray	.\thinkphp\library\think\Template.php	/^            $varArray = explode('|', $varStr);$/;"	v
varStr	.\thinkphp\library\think\Template.php	/^                $varStr = substr_replace($varStr, $parseStr, $match[1], strlen($match[0]));$/;"	v
varStr	.\thinkphp\library\think\Template.php	/^            $varStr                  = $name;$/;"	v
varStr	.\thinkphp\library\think\Template.php	/^            $varStr = $_varFunctionList[$_key];$/;"	v
varStr	.\thinkphp\library\think\Template.php	/^        $varStr = trim($varStr);$/;"	v
var_jsonp_handler	.\thinkphp\library\think\response\Jsonp.php	/^            $var_jsonp_handler = Request::instance()->param($this->options['var_jsonp_handler'], "");$/;"	v
var_type	.\thinkphp\library\think\debug\Console.php	/^                    $var_type = gettype($m);$/;"	v
vars	.\thinkphp\helper.php	/^    function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	v
vars	.\thinkphp\helper.php	/^    function lang($name, $vars = [], $lang = '')$/;"	v
vars	.\thinkphp\helper.php	/^    function url($url = '', $vars = '', $suffix = true, $domain = false)$/;"	v
vars	.\thinkphp\helper.php	/^    function view($template = '', $vars = [], $replace = [], $code = 200)$/;"	v
vars	.\thinkphp\library\think\App.php	/^                $vars = array_merge(Request::instance()->param(), $dispatch['var']);$/;"	v
vars	.\thinkphp\library\think\App.php	/^            $vars = Config::get('url_param_type') ?$/;"	v
vars	.\thinkphp\library\think\App.php	/^            $vars = [$actionName];$/;"	v
vars	.\thinkphp\library\think\App.php	/^        $vars = [];$/;"	v
vars	.\thinkphp\library\think\App.php	/^    private static function bindParams($reflect, $vars = [])$/;"	v
vars	.\thinkphp\library\think\App.php	/^    public static function invokeClass($class, $vars = [])$/;"	v
vars	.\thinkphp\library\think\App.php	/^    public static function invokeFunction($function, $vars = [])$/;"	v
vars	.\thinkphp\library\think\App.php	/^    public static function invokeMethod($method, $vars = [])$/;"	v
vars	.\thinkphp\library\think\Controller.php	/^    protected function display($content = '', $vars = [], $replace = [], $config = [])$/;"	v
vars	.\thinkphp\library\think\Controller.php	/^    protected function fetch($template = '', $vars = [], $replace = [], $config = [])$/;"	v
vars	.\thinkphp\library\think\File.php	/^            $vars = [];$/;"	v
vars	.\thinkphp\library\think\Lang.php	/^    public static function get($name = null, $vars = [], $range = '')$/;"	v
vars	.\thinkphp\library\think\Loader.php	/^                    $vars = [$vars];$/;"	v
vars	.\thinkphp\library\think\Loader.php	/^    public static function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	v
vars	.\thinkphp\library\think\Request.php	/^                    $vars = $this->post(false);$/;"	v
vars	.\thinkphp\library\think\Request.php	/^                    $vars = $this->put(false);$/;"	v
vars	.\thinkphp\library\think\Request.php	/^                    $vars = [];$/;"	v
vars	.\thinkphp\library\think\Route.php	/^                    $vars   = self::parseVar($key);$/;"	v
vars	.\thinkphp\library\think\Route.php	/^            $vars    = $item['var'];$/;"	v
vars	.\thinkphp\library\think\Route.php	/^        $vars = self::parseVar($rule);$/;"	v
vars	.\thinkphp\library\think\Template.php	/^                        $vars  = explode('.', $match[0]);$/;"	v
vars	.\thinkphp\library\think\Template.php	/^    public function display($content, $vars = [], $config = [])$/;"	v
vars	.\thinkphp\library\think\Template.php	/^    public function fetch($template, $vars = [], $config = [])$/;"	v
vars	.\thinkphp\library\think\Url.php	/^                $vars = array_merge($params, $vars);$/;"	v
vars	.\thinkphp\library\think\Url.php	/^                $vars = http_build_query($vars);$/;"	v
vars	.\thinkphp\library\think\Url.php	/^    public static function build($url = '', $vars = '', $suffix = true, $domain = false)$/;"	v
vars	.\thinkphp\library\think\View.php	/^        $vars = array_merge(self::$var, $this->data, $vars);$/;"	v
vars	.\thinkphp\library\think\View.php	/^    public function display($content, $vars = [], $replace = [], $config = [])$/;"	v
vars	.\thinkphp\library\think\View.php	/^    public function fetch($template = '', $vars = [], $replace = [], $config = [], $renderContent = false)$/;"	v
vars	.\thinkphp\library\think\response\View.php	/^            $this->vars = array_merge($this->vars, $name);$/;"	v
vars	.\thinkphp\library\think\response\View.php	/^    protected $vars        = [];$/;"	v
vars	.\thinkphp\library\think\template\driver\File.php	/^    public function read($cacheFile, $vars = [])$/;"	v
vars	.\thinkphp\library\think\template\taglib\Cx.php	/^        $vars   = isset($tag['vars']) ? $tag['vars'] : '';$/;"	v
vars	.\thinkphp\library\think\template\taglib\Cx.php	/^        $vars = !empty($tag['vars']) ? $tag['vars'] : '';$/;"	v
vendor	.\thinkphp\helper.php	/^    function vendor($class, $ext = EXT)$/;"	f
vendorDir	.\vendor\composer\autoload_classmap.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
vendorDir	.\vendor\composer\autoload_files.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
vendorDir	.\vendor\composer\autoload_namespaces.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
vendorDir	.\vendor\composer\autoload_psr4.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
verbosity	.\thinkphp\library\think\console\Output.php	/^        $this->verbosity = (int) $level;$/;"	v
verbosity	.\thinkphp\library\think\console\Output.php	/^    private $verbosity = self::VERBOSITY_NORMAL;$/;"	v
verify	.\extend\php-jwt-master\src\JWT.php	/^    private static function verify($msg, $signature, $key, $alg)$/;"	f
verify	.\vendor\firebase\php-jwt\src\JWT.php	/^    private static function verify($msg, $signature, $key, $alg)$/;"	f
verifyMigrationDirectory	.\vendor\topthink\think-migration\src\Command.php	/^    protected function verifyMigrationDirectory($path)$/;"	f
version	.\thinkphp\library\think\Console.php	/^        $this->version = $version;$/;"	v
version	.\thinkphp\library\think\Console.php	/^    private $version;$/;"	v
version	.\thinkphp\library\think\Console.php	/^    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN', $user = null)$/;"	v
version	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^        $this->version = $version;$/;"	v
version	.\vendor\topthink\think-migration\phinx\src\Phinx\Migration\AbstractMigration.php	/^    protected $version;$/;"	v
version	.\vendor\topthink\think-migration\src\command\Migrate.php	/^                    $version = Util::getVersionFromFileName(basename($filePath));$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^            $version     = $lastVersion['version'];$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^        $version   = $input->getOption('target');$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^                $version = 0;$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^            $version = $prev < 0 ? 0 : $versions[$prev];$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $version = $input->getOption('target');$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        if (empty($versions) || $version == end($versions)) {$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^            $version = end($versions);$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^            $version = max(array_merge($versions, array_keys($migrations)));$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $version  = 0;$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $version = $input->getOption('target');$/;"	v
version	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^                $version = array_key_exists($migration->getVersion(), $versions) ? $versions[$migration->getVersion()] : false;$/;"	v
versionLog	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $versionLog = $this->getVersionLog();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\Migrate.php	/^            $versions = [];$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^        $versions   = $this->getVersionLog();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Breakpoint.php	/^        $versions = $this->getVersionLog();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $versions   = $this->getVersions();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Rollback.php	/^        $versions   = array_keys($versionLog);$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $versions   = $this->getVersions();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $versions   = array_keys($this->getMigrations());$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Run.php	/^        $versions = $this->getVersions();$/;"	v
versions	.\vendor\topthink\think-migration\src\command\migrate\Status.php	/^            $versions      = $this->getVersionLog();$/;"	v
via	.\thinkphp\library\think\db\Query.php	/^    public function via($via = '')$/;"	f
view	.\thinkphp\helper.php	/^    function view($template = '', $vars = [], $replace = [], $code = 200)$/;"	f
view	.\thinkphp\library\think\Controller.php	/^        $this->view    = View::instance(Config::get('template'), Config::get('view_replace_str'));$/;"	v
view	.\thinkphp\library\think\Controller.php	/^    protected $view;$/;"	v
view	.\thinkphp\library\think\db\Query.php	/^    public function view($join, $field = true, $on = null, $type = 'INNER')$/;"	f
view	.\thinkphp\library\traits\controller\Jump.php	/^            $view = Config::get('view_replace_str');$/;"	v
visible	.\thinkphp\library\think\Model.php	/^        $this->visible = $override ? $visible : array_merge($this->visible, $visible);$/;"	v
visible	.\thinkphp\library\think\Model.php	/^        $visible = [];$/;"	v
visible	.\thinkphp\library\think\Model.php	/^    protected $visible = [];$/;"	v
visible	.\thinkphp\library\think\Model.php	/^    protected function parseAttr($attrs, &$result, $visible = true)$/;"	v
visible	.\thinkphp\library\think\Model.php	/^    public function visible($visible = [], $override = false)$/;"	f
visible	.\thinkphp\library\think\model\Collection.php	/^    public function visible($visible = [], $override = false)$/;"	f
w	.\thinkphp\library\think\Validate.php	/^            return $w == $width && $h == $height;$/;"	v
w	.\thinkphp\library\think\process\pipes\Unix.php	/^        $w = isset($this->pipes[0]) ? [$this->pipes[0]] : null;$/;"	v
w	.\thinkphp\library\think\process\pipes\Windows.php	/^        $w = isset($this->pipes[0]) ? [$this->pipes[0]] : null;$/;"	v
w	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $w   = (2 * M_PI) \/ $T;$/;"	v
w	.\vendor\topthink\think-captcha\src\Captcha.php	/^        $w = (2 * M_PI) \/ $T;$/;"	v
w	.\vendor\topthink\think-image\src\Image.php	/^                $w = $width \/ $scale;$/;"	v
w	.\vendor\topthink\think-image\src\Image.php	/^        $w = $maxx - $minx;$/;"	v
w	.\vendor\topthink\think-image\src\Image.php	/^        $w = $this->info['width'];$/;"	v
wait	.\thinkphp\library\think\Process.php	/^    public function wait($callback = null)$/;"	f
waitRandomInterval	.\vendor\topthink\think-queue\src\queue\connector\Topthink.php	/^    protected static function waitRandomInterval($retry)$/;"	f
wantHelps	.\thinkphp\library\think\Console.php	/^                $this->wantHelps = true;$/;"	v
wantHelps	.\thinkphp\library\think\Console.php	/^            $this->wantHelps = false;$/;"	v
wantHelps	.\thinkphp\library\think\Console.php	/^    private $wantHelps = false;$/;"	v
water	.\vendor\topthink\think-image\src\Image.php	/^        $water = $fun($source);$/;"	v
water	.\vendor\topthink\think-image\src\Image.php	/^    public function water($source, $locate = self::WATER_SOUTHEAST, $alpha = 100)$/;"	f
week	.\vendor\topthink\think-helper\src\Time.php	/^    public static function week()$/;"	f
weekToSecond	.\vendor\topthink\think-helper\src\Time.php	/^    public static function weekToSecond($week = 1)$/;"	f
where	.\thinkphp\library\think\Model.php	/^                $where = $array;$/;"	v
where	.\thinkphp\library\think\Model.php	/^                $where = $this->updateWhere;$/;"	v
where	.\thinkphp\library\think\Model.php	/^            $where = $this->updateWhere;$/;"	v
where	.\thinkphp\library\think\Model.php	/^            $where = [$pk => $this->data[$pk]];$/;"	v
where	.\thinkphp\library\think\Model.php	/^            $where = null;$/;"	v
where	.\thinkphp\library\think\Model.php	/^        $where  = $this->getWhere();$/;"	v
where	.\thinkphp\library\think\Model.php	/^        $where = $this->getWhere();$/;"	v
where	.\thinkphp\library\think\Model.php	/^    public function isUpdate($update = true, $where = null)$/;"	v
where	.\thinkphp\library\think\Model.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	v
where	.\thinkphp\library\think\Model.php	/^    public static function hasWhere($relation, $where = [], $fields = null)$/;"	v
where	.\thinkphp\library\think\Model.php	/^    public static function update($data = [], $where = [], $field = null)$/;"	v
where	.\thinkphp\library\think\Route.php	/^                    $where = [];$/;"	v
where	.\thinkphp\library\think\db\Builder.php	/^            $where = [];$/;"	v
where	.\thinkphp\library\think\db\Query.php	/^                $where = $field;$/;"	v
where	.\thinkphp\library\think\db\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	f
where	.\thinkphp\library\think\model\Merge.php	/^                    $where = $this->updateWhere;$/;"	v
where	.\thinkphp\library\think\model\Merge.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	v
where	.\vendor\topthink\think-mongo\src\Builder.php	/^            $where = [];$/;"	v
where	.\vendor\topthink\think-mongo\src\Builder.php	/^        $where = $this->parseWhere($options['where'], $options);$/;"	v
where	.\vendor\topthink\think-mongo\src\Query.php	/^                $where = $field;$/;"	v
where	.\vendor\topthink\think-mongo\src\Query.php	/^                $where = '';$/;"	v
where	.\vendor\topthink\think-mongo\src\Query.php	/^        $where = [];$/;"	v
where	.\vendor\topthink\think-mongo\src\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	f
whereBetween	.\thinkphp\library\think\db\Query.php	/^    public function whereBetween($field, $condition, $logic = 'AND')$/;"	f
whereBetween	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereBetween($field, $condition, $logic = 'and')$/;"	f
whereClause	.\thinkphp\library\think\db\Builder.php	/^                    $whereClause = $this->buildWhere($query->getOptions('where'), $options);$/;"	v
whereExists	.\thinkphp\library\think\db\Query.php	/^    public function whereExists($condition, $logic = 'AND')$/;"	f
whereExp	.\thinkphp\library\think\db\Query.php	/^    public function whereExp($field, $condition, $logic = 'AND')$/;"	f
whereExp	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereExp($field, $condition, $logic = 'and')$/;"	f
whereIn	.\thinkphp\library\think\db\Query.php	/^    public function whereIn($field, $condition, $logic = 'AND')$/;"	f
whereIn	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereIn($field, $condition, $logic = 'and')$/;"	f
whereLike	.\thinkphp\library\think\db\Query.php	/^    public function whereLike($field, $condition, $logic = 'AND')$/;"	f
whereLike	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereLike($field, $condition, $logic = 'and')$/;"	f
whereNor	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNor($field, $op = null, $condition = null)$/;"	f
whereNotBetween	.\thinkphp\library\think\db\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'AND')$/;"	f
whereNotBetween	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'and')$/;"	f
whereNotExists	.\thinkphp\library\think\db\Query.php	/^    public function whereNotExists($condition, $logic = 'AND')$/;"	f
whereNotIn	.\thinkphp\library\think\db\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'AND')$/;"	f
whereNotIn	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'and')$/;"	f
whereNotLike	.\thinkphp\library\think\db\Query.php	/^    public function whereNotLike($field, $condition, $logic = 'AND')$/;"	f
whereNotNull	.\thinkphp\library\think\db\Query.php	/^    public function whereNotNull($field, $logic = 'AND')$/;"	f
whereNotNull	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNotNull($field, $logic = 'and')$/;"	f
whereNull	.\thinkphp\library\think\db\Query.php	/^    public function whereNull($field, $logic = 'AND')$/;"	f
whereNull	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereNull($field, $logic = 'and')$/;"	f
whereOr	.\thinkphp\library\think\db\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	f
whereOr	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	f
whereOrRaw	.\thinkphp\library\think\db\Query.php	/^    public function whereOrRaw($where, $bind = [])$/;"	f
wherePivot	.\thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	f
whereRaw	.\thinkphp\library\think\db\Query.php	/^    public function whereRaw($where, $bind = [], $logic = 'AND')$/;"	f
whereStr	.\thinkphp\library\think\db\Builder.php	/^            $whereStr = $whereStr . $this->parseWhereItem($field, $condition, '', $options, $binds);$/;"	v
whereStr	.\thinkphp\library\think\db\Builder.php	/^            $whereStr = $whereStr ? '( ' . $whereStr . ' ) AND ' : '';$/;"	v
whereStr	.\thinkphp\library\think\db\Builder.php	/^        $whereStr = $this->buildWhere($where, $options);$/;"	v
whereStr	.\thinkphp\library\think\db\Builder.php	/^        $whereStr = '';$/;"	v
whereTime	.\thinkphp\library\think\db\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	f
whereTime	.\vendor\topthink\think-mongo\src\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	f
whereXor	.\thinkphp\library\think\db\Query.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	f
widget	.\thinkphp\helper.php	/^    function widget($name, $data = [])$/;"	f
width	.\thinkphp\library\think\console\output\Ask.php	/^            $width = max(array_map('strlen', array_keys($this->question->getChoices())));$/;"	v
width	.\thinkphp\library\think\console\output\Descriptor.php	/^            $width = $this->getColumnWidth($description->getCommands());$/;"	v
width	.\thinkphp\library\think\console\output\Descriptor.php	/^            $width = strlen($command->getName()) > $width ? strlen($command->getName()) : $width;$/;"	v
width	.\thinkphp\library\think\console\output\Descriptor.php	/^        $width = 0;$/;"	v
width	.\thinkphp\library\think\console\output\driver\Console.php	/^                $width = 1 << 31;$/;"	v
width	.\thinkphp\library\think\console\output\driver\Console.php	/^            $width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;$/;"	v
width	.\vendor\topthink\think-image\src\Image.php	/^                $width  = $w * $scale;$/;"	v
width	.\vendor\topthink\think-image\src\Image.php	/^        empty($width) && $width   = $w;$/;"	v
width	.\vendor\topthink\think-image\src\Image.php	/^    public function width()$/;"	f
window	.\thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $window = $side * 2;$/;"	v
with	.\thinkphp\library\think\Model.php	/^            $with  = [];$/;"	v
with	.\thinkphp\library\think\Model.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	v
with	.\thinkphp\library\think\Model.php	/^    public static function get($data, $with = [], $cache = false)$/;"	v
with	.\thinkphp\library\think\db\Query.php	/^            $with = explode(',', $with);$/;"	v
with	.\thinkphp\library\think\db\Query.php	/^    public function with($with)$/;"	f
with	.\thinkphp\library\think\model\Merge.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	v
with	.\thinkphp\library\think\model\Merge.php	/^    public static function get($data = null, $with = [], $cache = false)$/;"	v
with	.\thinkphp\library\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	f
with	.\vendor\topthink\think-mongo\src\Query.php	/^    public function with($with)$/;"	f
withCount	.\thinkphp\library\think\db\Query.php	/^    public function withCount($relation, $subQuery = true)$/;"	f
withCount	.\vendor\topthink\think-mongo\src\Query.php	/^    public function withCount($relation)$/;"	f
withField	.\thinkphp\library\think\db\Query.php	/^    public function withField($field)$/;"	f
withTrashed	.\thinkphp\library\traits\model\SoftDelete.php	/^    public static function withTrashed()$/;"	f
word	.\vendor\topthink\think-image\src\image\gif\Encoder.php	/^    public function word($int)$/;"	f
worker	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^        $this->worker = new Worker();$/;"	v
worker	.\vendor\topthink\think-queue\src\queue\command\Work.php	/^    protected $worker;$/;"	v
workerCommand	.\vendor\topthink\think-queue\src\queue\Listener.php	/^        $this->workerCommand =$/;"	v
workerCommand	.\vendor\topthink\think-queue\src\queue\Listener.php	/^    protected $workerCommand;$/;"	v
wrappers	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\AdapterFactory.php	/^    protected $wrappers = array($/;"	v
write	.\thinkphp\library\think\Log.php	/^    public static function write($msg, $type = 'log', $force = false)$/;"	f
write	.\thinkphp\library\think\console\Output.php	/^    public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)$/;"	f
write	.\thinkphp\library\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	f
write	.\thinkphp\library\think\console\output\driver\Buffer.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	f
write	.\thinkphp\library\think\console\output\driver\Console.php	/^    public function write($messages, $newline = false, $type = Output::OUTPUT_NORMAL, $stream = null)$/;"	f
write	.\thinkphp\library\think\console\output\driver\Nothing.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	f
write	.\thinkphp\library\think\log\driver\File.php	/^    protected function write($message, $destination, $apart = false)$/;"	f
write	.\thinkphp\library\think\process\pipes\Windows.php	/^    private function write($blocking, $close)$/;"	f
write	.\thinkphp\library\think\session\driver\Memcache.php	/^    public function write($sessID, $sessData)$/;"	f
write	.\thinkphp\library\think\session\driver\Memcached.php	/^    public function write($sessID, $sessData)$/;"	f
write	.\thinkphp\library\think\session\driver\Redis.php	/^    public function write($sessID, $sessData)$/;"	f
write	.\thinkphp\library\think\template\driver\File.php	/^    public function write($cacheFile, $content)$/;"	f
writeColumns	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^        $writeColumns = array();$/;"	v
writeCommand	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\PdoAdapter.php	/^    public function writeCommand($command, $args = array())$/;"	f
writeConcern	.\vendor\topthink\think-mongo\src\Connection.php	/^    public function execute($namespace, BulkWrite $bulk, WriteConcern $writeConcern = null)$/;"	v
writeConcern	.\vendor\topthink\think-mongo\src\Query.php	/^        $writeConcern = isset($options['writeConcern']) ? $options['writeConcern'] : null;$/;"	v
writeConcern	.\vendor\topthink\think-mongo\src\Query.php	/^    public function execute($namespace, BulkWrite $bulk, WriteConcern $writeConcern = null)$/;"	v
writeConcern	.\vendor\topthink\think-mongo\src\Query.php	/^    public function writeConcern($writeConcern)$/;"	f
writeName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $writeName = ($selectName == $columnName) ? $newColumnName : $selectName;$/;"	v
writeName	.\vendor\topthink\think-migration\phinx\src\Phinx\Db\Adapter\SQLiteAdapter.php	/^            $writeName = ($selectName === $columnName) ? $newColumn->getName() : $selectName;$/;"	v
writePrompt	.\thinkphp\library\think\console\output\Ask.php	/^    protected function writePrompt()$/;"	f
writeResult	.\vendor\topthink\think-mongo\src\Connection.php	/^        $writeResult = $this->mongo->executeBulkWrite($namespace, $bulk, $writeConcern);$/;"	v
writeResult	.\vendor\topthink\think-mongo\src\Query.php	/^        $writeResult  = $this->execute($options['table'], $bulk, $writeConcern);$/;"	v
writeResult	.\vendor\topthink\think-mongo\src\Query.php	/^        $writeResult = $this->execute($options['table'], $bulk, $writeConcern);$/;"	v
writeText	.\thinkphp\library\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	f
writeTimes	.\thinkphp\library\think\Cache.php	/^    public static $writeTimes = 0;$/;"	v
writeTransform	.\thinkphp\library\think\Model.php	/^    protected function writeTransform($value, $type)$/;"	f
writed	.\thinkphp\library\think\log\driver\File.php	/^    protected $writed = [];$/;"	v
writeln	.\thinkphp\library\think\console\Output.php	/^    public function writeln($messages, $type = self::OUTPUT_NORMAL)$/;"	f
written	.\thinkphp\library\think\process\pipes\Unix.php	/^                $written = fwrite($w[0], $this->inputBuffer, 2 << 18); \/\/ write 512k$/;"	v
written	.\thinkphp\library\think\process\pipes\Windows.php	/^                $written = fwrite($w[0], $this->inputBuffer, 2 << 18);$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x      = $y      = 0;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x    = $this->info['width'] - $w;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = $this->info['width'] - $info[0];$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = $this->info['width'] - $w;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = $y = 0;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = ($this->info['width'] - $info[0]) \/ 2;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = ($this->info['width'] - $w) \/ 2;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^                $x = 0;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^        $x = $minx;$/;"	v
x	.\vendor\topthink\think-image\src\Image.php	/^    public function crop($w, $h, $x = 0, $y = 0, $width = null, $height = null)$/;"	v
xml	.\thinkphp\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = [])$/;"	f
xml	.\thinkphp\library\think\response\Xml.php	/^        $xml  = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>";$/;"	v
xml	.\thinkphp\library\think\response\Xml.php	/^        $xml = $attr = '';$/;"	v
xml	.\thinkphp\library\think\template\TagLib.php	/^    protected $xml  = '';$/;"	v
xmlEncode	.\thinkphp\library\think\response\Xml.php	/^    protected function xmlEncode($data, $root, $item, $attr, $id, $encoding)$/;"	f
y	.\vendor\topthink\think-image\src\Image.php	/^                $y    = $this->info['height'] - $h;$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^                $y = $this->info['height'] - $h;$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^                $y = $this->info['height'] - $info[1];$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^                $y = ($this->info['height'] - $h) \/ 2;$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^                $y = ($this->info['height'] - $info[1]) \/ 2;$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^                $y = 0;$/;"	v
y	.\vendor\topthink\think-image\src\Image.php	/^        $y = abs($miny);$/;"	v
year	.\vendor\topthink\think-helper\src\Time.php	/^        $year = date('Y') - 1;$/;"	v
year	.\vendor\topthink\think-helper\src\Time.php	/^    public static function year()$/;"	f
yesterday	.\vendor\topthink\think-helper\src\Time.php	/^        $yesterday = date('d') - 1;$/;"	v
yesterday	.\vendor\topthink\think-helper\src\Time.php	/^    public static function yesterday()$/;"	f
zone	.\thinkphp\library\think\db\Builder.php	/^                    $zone = implode(',', $array);$/;"	v
zone	.\thinkphp\library\think\db\Builder.php	/^                    $zone = implode(',', $this->parseValue($value, $field));$/;"	v
